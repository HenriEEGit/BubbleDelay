/*******************************************************************************************************************
Copyright (c) 2023 Cycling '74

The code that Max generates automatically and that end users are capable of
exporting and using, and any associated documentation files (the “Software”)
is a work of authorship for which Cycling '74 is the author and owner for
copyright purposes.

This Software is dual-licensed either under the terms of the Cycling '74
License for Max-Generated Code for Export, or alternatively under the terms
of the General Public License (GPL) Version 3. You may use the Software
according to either of these licenses as it is most appropriate for your
project on a case-by-case basis (proprietary or not).

A) Cycling '74 License for Max-Generated Code for Export

A license is hereby granted, free of charge, to any person obtaining a copy
of the Software (“Licensee”) to use, copy, modify, merge, publish, and
distribute copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The Software is licensed to Licensee for all uses that do not include the sale,
sublicensing, or commercial distribution of software that incorporates this
source code. This means that the Licensee is free to use this software for
educational, research, and prototyping purposes, to create musical or other
creative works with software that incorporates this source code, or any other
use that does not constitute selling software that makes use of this source
code. Commercial distribution also includes the packaging of free software with
other paid software, hardware, or software-provided commercial services.

For entities with UNDER $200k in annual revenue or funding, a license is hereby
granted, free of charge, for the sale, sublicensing, or commercial distribution
of software that incorporates this source code, for as long as the entity's
annual revenue remains below $200k annual revenue or funding.

For entities with OVER $200k in annual revenue or funding interested in the
sale, sublicensing, or commercial distribution of software that incorporates
this source code, please send inquiries to licensing@cycling74.com.

The above copyright notice and this license shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Please see
https://support.cycling74.com/hc/en-us/articles/10730637742483-RNBO-Export-Licensing-FAQ
for additional information

B) General Public License Version 3 (GPLv3)
Details of the GPLv3 license can be found at: https://www.gnu.org/licenses/gpl-3.0.html
*******************************************************************************************************************/

#include "RNBO_Common.h"
#include "RNBO_AudioSignal.h"

namespace RNBO {


#define trunc(x) ((Int)(x))

#if defined(__GNUC__) || defined(__clang__)
    #define RNBO_RESTRICT __restrict__
#elif defined(_MSC_VER)
    #define RNBO_RESTRICT __restrict
#endif

#define FIXEDSIZEARRAYINIT(...) { }

class RnboBubble : public PatcherInterfaceImpl {
public:

class RNBOSubpatcher_56 : public PatcherInterfaceImpl {
    
    friend class RnboBubble;
    
    public:
    
    RNBOSubpatcher_56()
    {
    }
    
    ~RNBOSubpatcher_56()
    {
    }
    
    virtual RnboBubble* getPatcher() const {
        return static_cast<RnboBubble *>(_parentPatcher);
    }
    
    RnboBubble* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
        SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
        const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
        this->dspexpr_01_perform(in1, this->dspexpr_01_in2, out1, n);
        this->dspexpr_02_perform(in2, this->dspexpr_02_in2, out2, n);
        this->dspexpr_03_perform(in3, this->dspexpr_03_in2, out3, n);
        this->dspexpr_04_perform(in4, this->dspexpr_04_in2, out4, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_01_getPresetValue(getSubState(preset, "in"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_01_value_set(v);
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_01_value;
            }
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 1;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "in";
            }
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "ingain/in";
            }
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = -12;
                info->max = 12;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "In";
                info->unit = "dB";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            {
                value = (value < -12 ? -12 : (value > 12 ? 12 : value));
                ParameterValue normalizedValue = (value - -12) / (12 - -12);
                return normalizedValue;
            }
            }
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 0:
            {
            {
                {
                    return -12 + value * (12 - -12);
                }
            }
            }
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_01_value_constrain(value);
            }
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
    
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void param_01_value_set(number v) {
        v = this->param_01_value_constrain(v);
        this->param_01_value = v;
        this->sendParameter(0, false);
    
        if (this->param_01_value != this->param_01_lastValue) {
            this->getEngine()->presetTouched();
            this->param_01_lastValue = this->param_01_value;
        }
    
        this->expr_01_in1_set(v);
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 4;
    }
    
    Index getNumOutputChannels() const {
        return 4;
    }
    
    void initializeObjects() {}
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
    
        {
            this->scheduleParamInit(0, 0);
        }
    }
    
    void allocateDataRefs() {}
    
    number param_01_value_constrain(number v) const {
        v = (v > 12 ? 12 : (v < -12 ? -12 : v));
        return v;
    }
    
    void dspexpr_04_in2_set(number v) {
        this->dspexpr_04_in2 = v;
    }
    
    void dspexpr_03_in2_set(number v) {
        this->dspexpr_03_in2 = v;
    }
    
    void dspexpr_02_in2_set(number v) {
        this->dspexpr_02_in2 = v;
    }
    
    void dspexpr_01_in2_set(number v) {
        this->dspexpr_01_in2 = v;
    }
    
    void expr_01_out1_set(number v) {
        this->expr_01_out1 = v;
        this->dspexpr_04_in2_set(this->expr_01_out1);
        this->dspexpr_03_in2_set(this->expr_01_out1);
        this->dspexpr_02_in2_set(this->expr_01_out1);
        this->dspexpr_01_in2_set(this->expr_01_out1);
    }
    
    void expr_01_in1_set(number in1) {
        this->expr_01_in1 = in1;
        this->expr_01_out1_set(rnbo_pow(10, this->expr_01_in1 * 0.05));//#map:ingain/dbtoa_obj-26:1
    }
    
    void dspexpr_01_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_02_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_03_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_04_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void param_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_01_value;
    }
    
    void param_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_01_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        dspexpr_01_in1 = 0;
        dspexpr_01_in2 = 0;
        dspexpr_02_in1 = 0;
        dspexpr_02_in2 = 0;
        expr_01_in1 = 0;
        expr_01_out1 = 0;
        param_01_value = 0;
        dspexpr_03_in1 = 0;
        dspexpr_03_in2 = 0;
        dspexpr_04_in1 = 0;
        dspexpr_04_in2 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        param_01_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number dspexpr_01_in1;
        number dspexpr_01_in2;
        number dspexpr_02_in1;
        number dspexpr_02_in2;
        number expr_01_in1;
        number expr_01_out1;
        number param_01_value;
        number dspexpr_03_in1;
        number dspexpr_03_in2;
        number dspexpr_04_in1;
        number dspexpr_04_in2;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number param_01_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_57 : public PatcherInterfaceImpl {
    
    friend class RnboBubble;
    
    public:
    
    RNBOSubpatcher_57()
    {
    }
    
    ~RNBOSubpatcher_57()
    {
    }
    
    virtual RnboBubble* getPatcher() const {
        return static_cast<RnboBubble *>(_parentPatcher);
    }
    
    RnboBubble* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -62043057, false);
    }
    
    inline number safemod(number f, number m) {
        if (m != 0) {
            Int f_trunc = (Int)(trunc(f));
            Int m_trunc = (Int)(trunc(m));
    
            if (f == f_trunc && m == m_trunc) {
                f = f_trunc % m_trunc;
            } else {
                if (m < 0) {
                    m = -m;
                }
    
                if (f >= m) {
                    if (f >= m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f -= m;
                    }
                } else if (f <= -m) {
                    if (f <= -m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f += m;
                    }
                }
            }
        } else {
            f = 0.0;
        }
    
        return f;
    }
    
    inline number safesqrt(number num) {
        return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
        const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
        this->linetilde_01_perform(this->signals[0], n);
        this->xfade_tilde_01_perform(this->signals[0], in1, in3, out1, n);
        this->xfade_tilde_02_perform(this->signals[0], in2, in4, out2, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 1; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -62043057:
            {
            this->linetilde_01_target_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
    
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_01_out1_bang_bang() {
        this->expr_02_in1_bang();
    }
    
    void eventinlet_01_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_02_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_02_in1_set(converted);
        }
    }
    
    void linetilde_01_target_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 4;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {}
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void linetilde_01_time_set(number v) {
        this->linetilde_01_time = v;
    }
    
    void linetilde_01_segments_set(const list& v) {
        this->linetilde_01_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_01_time == 0) {
                this->linetilde_01_activeRamps->length = 0;
                this->linetilde_01_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_01_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_01_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_01_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_01_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_01_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_01_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_01_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_01_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_01_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_01_activeRamps->push(lastRampValue);
                    this->linetilde_01_activeRamps->push(0);
                    this->linetilde_01_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_01_keepramp)) {
                            this->linetilde_01_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_01_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_01_activeRamps->push(destinationValue);
                    this->linetilde_01_activeRamps->push(inc);
                    this->linetilde_01_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void expr_02_out1_set(number v) {
        this->expr_02_out1 = v;
    
        {
            list converted = {this->expr_02_out1};
            this->linetilde_01_segments_set(converted);
        }
    }
    
    void expr_02_in1_set(number in1) {
        this->expr_02_in1 = in1;
    
        this->expr_02_out1_set(
            (this->expr_02_in2 == 0 ? 0 : (this->expr_02_in2 == 0. ? 0. : this->expr_02_in1 / this->expr_02_in2))
        );//#map:Mix~//_obj-7:1
    }
    
    void eventinlet_01_out1_number_set(number v) {
        this->expr_02_in1_set(v);
    }
    
    void expr_02_in1_bang() {
        this->expr_02_out1_set(
            (this->expr_02_in2 == 0 ? 0 : (this->expr_02_in2 == 0. ? 0. : this->expr_02_in1 / this->expr_02_in2))
        );//#map:Mix~//_obj-7:1
    }
    
    void expr_02_in2_set(number v) {
        this->expr_02_in2 = v;
    }
    
    void linetilde_01_perform(SampleValue * out, Index n) {
        auto __linetilde_01_time = this->linetilde_01_time;
        auto __linetilde_01_keepramp = this->linetilde_01_keepramp;
        auto __linetilde_01_currentValue = this->linetilde_01_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_01_activeRamps->length)) {
            while ((bool)(this->linetilde_01_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_01_activeRamps[0];
                number inc = this->linetilde_01_activeRamps[1];
                number rampTimeInSamples = this->linetilde_01_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_01_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_01_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_01_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -62043057,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_01_keepramp))) {
                            __linetilde_01_time = 0;
                        }
                    }
                }
    
                __linetilde_01_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_01_currentValue;
            i++;
        }
    
        this->linetilde_01_currentValue = __linetilde_01_currentValue;
        this->linetilde_01_time = __linetilde_01_time;
    }
    
    void xfade_tilde_01_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 1);
        }
    }
    
    void xfade_tilde_02_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 1);
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    number xfade_tilde_01_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return 1.0 - rnbo_abs(pos);
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_01_func_reset() {}
    
    number xfade_tilde_02_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return 1.0 - rnbo_abs(pos);
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_02_func_reset() {}
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        xfade_tilde_01_pos = 0;
        xfade_tilde_02_pos = 0;
        expr_02_in1 = 0;
        expr_02_in2 = 100;
        expr_02_out1 = 0;
        linetilde_01_time = 10;
        linetilde_01_keepramp = 1;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        linetilde_01_currentValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number xfade_tilde_01_pos;
        number xfade_tilde_02_pos;
        number expr_02_in1;
        number expr_02_in2;
        number expr_02_out1;
        list linetilde_01_segments;
        number linetilde_01_time;
        number linetilde_01_keepramp;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[1];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        list linetilde_01_activeRamps;
        number linetilde_01_currentValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_58 : public PatcherInterfaceImpl {
    
    friend class RnboBubble;
    
    public:
    
    RNBOSubpatcher_58()
    {
    }
    
    ~RNBOSubpatcher_58()
    {
    }
    
    virtual RnboBubble* getPatcher() const {
        return static_cast<RnboBubble *>(_parentPatcher);
    }
    
    RnboBubble* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->dspexpr_05_perform(in1, this->dspexpr_05_in2, out1, n);
        this->dspexpr_06_perform(in2, this->dspexpr_06_in2, out2, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_02_getPresetValue(getSubState(preset, "out"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_02_value_set(v);
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_02_value;
            }
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 1;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "out";
            }
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "outgain/out";
            }
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = -12;
                info->max = 12;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Out";
                info->unit = "dB";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            {
                value = (value < -12 ? -12 : (value > 12 ? 12 : value));
                ParameterValue normalizedValue = (value - -12) / (12 - -12);
                return normalizedValue;
            }
            }
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 0:
            {
            {
                {
                    return -12 + value * (12 - -12);
                }
            }
            }
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_02_value_constrain(value);
            }
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("outgain/number_obj-10") == objectId)
                this->numberobj_01_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("outgain/number_obj-10") == objectId)
                this->numberobj_01_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("outgain/number_obj-10"):
            {
            return "outgain/number_obj-10";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void param_02_value_set(number v) {
        v = this->param_02_value_constrain(v);
        this->param_02_value = v;
        this->sendParameter(0, false);
    
        if (this->param_02_value != this->param_02_lastValue) {
            this->getEngine()->presetTouched();
            this->param_02_lastValue = this->param_02_value;
        }
    
        this->expr_03_in1_set(v);
    }
    
    void numberobj_01_valin_set(number v) {
        this->numberobj_01_value_set(v);
    }
    
    void numberobj_01_format_set(number v) {
        this->numberobj_01_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numberobj_01_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
    
        {
            this->scheduleParamInit(0, 0);
        }
    }
    
    void allocateDataRefs() {}
    
    number param_02_value_constrain(number v) const {
        v = (v > 12 ? 12 : (v < -12 ? -12 : v));
        return v;
    }
    
    void numberobj_01_output_set(number ) {}
    
    void numberobj_01_value_set(number v) {
        this->numberobj_01_value_setter(v);
        v = this->numberobj_01_value;
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("outgain/number_obj-10"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_01_output_set(localvalue);
    }
    
    void dspexpr_06_in2_set(number v) {
        this->dspexpr_06_in2 = v;
    }
    
    void dspexpr_05_in2_set(number v) {
        this->dspexpr_05_in2 = v;
    }
    
    void expr_03_out1_set(number v) {
        this->expr_03_out1 = v;
        this->numberobj_01_value_set(this->expr_03_out1);
        this->dspexpr_06_in2_set(this->expr_03_out1);
        this->dspexpr_05_in2_set(this->expr_03_out1);
    }
    
    void expr_03_in1_set(number in1) {
        this->expr_03_in1 = in1;
        this->expr_03_out1_set(rnbo_pow(10, this->expr_03_in1 * 0.05));//#map:outgain/dbtoa_obj-26:1
    }
    
    void dspexpr_05_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_06_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_01_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_01_value = localvalue;
    }
    
    void param_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_02_value;
    }
    
    void param_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_02_value_set(preset["value"]);
    }
    
    void numberobj_01_init() {
        this->numberobj_01_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("outgain/number_obj-10"), 1, this->_currentTime);
    }
    
    void numberobj_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_01_value;
    }
    
    void numberobj_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_01_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        dspexpr_05_in1 = 0;
        dspexpr_05_in2 = 0;
        dspexpr_06_in1 = 0;
        dspexpr_06_in2 = 0;
        expr_03_in1 = 0;
        expr_03_out1 = 0;
        param_02_value = 0;
        numberobj_01_value = 0;
        numberobj_01_value_setter(numberobj_01_value);
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        param_02_lastValue = 0;
        numberobj_01_currentFormat = 6;
        numberobj_01_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number dspexpr_05_in1;
        number dspexpr_05_in2;
        number dspexpr_06_in1;
        number dspexpr_06_in2;
        number expr_03_in1;
        number expr_03_out1;
        number param_02_value;
        number numberobj_01_value;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number param_02_lastValue;
        Int numberobj_01_currentFormat;
        number numberobj_01_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_59 : public PatcherInterfaceImpl {
    
    friend class RnboBubble;
    
    public:
    
    RNBOSubpatcher_59()
    {
    }
    
    ~RNBOSubpatcher_59()
    {
    }
    
    virtual RnboBubble* getPatcher() const {
        return static_cast<RnboBubble *>(_parentPatcher);
    }
    
    RnboBubble* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->dspexpr_08_perform(in1, this->dspexpr_08_in2, this->signals[0], n);
        this->dspexpr_07_perform(this->signals[0], out1, n);
        this->dspexpr_10_perform(in2, this->dspexpr_10_in2, this->signals[0], n);
        this->dspexpr_09_perform(this->signals[0], out2, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 1; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
    
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_02_out1_bang_bang() {}
    
    void eventinlet_02_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_10_in2_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->dspexpr_08_in2_set(converted);
        }
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {}
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void dspexpr_10_in2_set(number v) {
        this->dspexpr_10_in2 = v;
    }
    
    void dspexpr_08_in2_set(number v) {
        this->dspexpr_08_in2 = v;
    }
    
    void eventinlet_02_out1_number_set(number v) {
        this->dspexpr_10_in2_set(v);
        this->dspexpr_08_in2_set(v);
    }
    
    void dspexpr_08_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_07_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_atan(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_10_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_09_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_atan(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        dspexpr_07_in1 = 0;
        dspexpr_08_in1 = 0;
        dspexpr_08_in2 = 0;
        dspexpr_09_in1 = 0;
        dspexpr_10_in1 = 0;
        dspexpr_10_in2 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number dspexpr_07_in1;
        number dspexpr_08_in1;
        number dspexpr_08_in2;
        number dspexpr_09_in1;
        number dspexpr_10_in1;
        number dspexpr_10_in2;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[1];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_60 : public PatcherInterfaceImpl {
    
    friend class RnboBubble;
    
    public:
    
    RNBOSubpatcher_60()
    {
    }
    
    ~RNBOSubpatcher_60()
    {
    }
    
    virtual RnboBubble* getPatcher() const {
        return static_cast<RnboBubble *>(_parentPatcher);
    }
    
    RnboBubble* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->onepole_tilde_01_perform(in1, this->onepole_tilde_01_freqInHz, out1, n);
        this->onepole_tilde_02_perform(in2, this->onepole_tilde_02_freqInHz, out2, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->onepole_tilde_01_dspsetup(forceDSPSetup);
        this->onepole_tilde_02_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
    
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {}
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void onepole_tilde_01_perform(const Sample * x, number freqInHz, SampleValue * out1, Index n) {
        RNBO_UNUSED(freqInHz);
        auto __onepole_tilde_01_lastY = this->onepole_tilde_01_lastY;
        auto __onepole_tilde_01_b1 = this->onepole_tilde_01_b1;
        auto __onepole_tilde_01_a0 = this->onepole_tilde_01_a0;
        auto __onepole_tilde_01_needsUpdate = this->onepole_tilde_01_needsUpdate;
        auto __onepole_tilde_01_freq = this->onepole_tilde_01_freq;
        Index i;
    
        for (i = 0; i < n; i++) {
            if (__onepole_tilde_01_freq != 5000 || (bool)(__onepole_tilde_01_needsUpdate)) {
                __onepole_tilde_01_freq = 5000;
                __onepole_tilde_01_a0 = 1 - rnbo_exp(-31415.926535897932 / this->sr);
                __onepole_tilde_01_a0 = (__onepole_tilde_01_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_01_a0 < 0.00001 ? 0.00001 : __onepole_tilde_01_a0));
                __onepole_tilde_01_b1 = 1 - __onepole_tilde_01_a0;
                __onepole_tilde_01_needsUpdate = false;
            }
    
            __onepole_tilde_01_lastY = __onepole_tilde_01_a0 * x[(Index)i] + __onepole_tilde_01_b1 * __onepole_tilde_01_lastY;
            out1[(Index)i] = __onepole_tilde_01_lastY;
        }
    
        this->onepole_tilde_01_freq = __onepole_tilde_01_freq;
        this->onepole_tilde_01_needsUpdate = __onepole_tilde_01_needsUpdate;
        this->onepole_tilde_01_a0 = __onepole_tilde_01_a0;
        this->onepole_tilde_01_b1 = __onepole_tilde_01_b1;
        this->onepole_tilde_01_lastY = __onepole_tilde_01_lastY;
    }
    
    void onepole_tilde_02_perform(const Sample * x, number freqInHz, SampleValue * out1, Index n) {
        RNBO_UNUSED(freqInHz);
        auto __onepole_tilde_02_lastY = this->onepole_tilde_02_lastY;
        auto __onepole_tilde_02_b1 = this->onepole_tilde_02_b1;
        auto __onepole_tilde_02_a0 = this->onepole_tilde_02_a0;
        auto __onepole_tilde_02_needsUpdate = this->onepole_tilde_02_needsUpdate;
        auto __onepole_tilde_02_freq = this->onepole_tilde_02_freq;
        Index i;
    
        for (i = 0; i < n; i++) {
            if (__onepole_tilde_02_freq != 5000 || (bool)(__onepole_tilde_02_needsUpdate)) {
                __onepole_tilde_02_freq = 5000;
                __onepole_tilde_02_a0 = 1 - rnbo_exp(-31415.926535897932 / this->sr);
                __onepole_tilde_02_a0 = (__onepole_tilde_02_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_02_a0 < 0.00001 ? 0.00001 : __onepole_tilde_02_a0));
                __onepole_tilde_02_b1 = 1 - __onepole_tilde_02_a0;
                __onepole_tilde_02_needsUpdate = false;
            }
    
            __onepole_tilde_02_lastY = __onepole_tilde_02_a0 * x[(Index)i] + __onepole_tilde_02_b1 * __onepole_tilde_02_lastY;
            out1[(Index)i] = __onepole_tilde_02_lastY;
        }
    
        this->onepole_tilde_02_freq = __onepole_tilde_02_freq;
        this->onepole_tilde_02_needsUpdate = __onepole_tilde_02_needsUpdate;
        this->onepole_tilde_02_a0 = __onepole_tilde_02_a0;
        this->onepole_tilde_02_b1 = __onepole_tilde_02_b1;
        this->onepole_tilde_02_lastY = __onepole_tilde_02_lastY;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void onepole_tilde_01_reset() {
        this->onepole_tilde_01_lastY = 0;
        this->onepole_tilde_01_a0 = 0;
        this->onepole_tilde_01_b1 = 0;
    }
    
    void onepole_tilde_01_dspsetup(bool force) {
        if ((bool)(this->onepole_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->onepole_tilde_01_needsUpdate = true;
        this->onepole_tilde_01_reset();
        this->onepole_tilde_01_setupDone = true;
    }
    
    void onepole_tilde_02_reset() {
        this->onepole_tilde_02_lastY = 0;
        this->onepole_tilde_02_a0 = 0;
        this->onepole_tilde_02_b1 = 0;
    }
    
    void onepole_tilde_02_dspsetup(bool force) {
        if ((bool)(this->onepole_tilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->onepole_tilde_02_needsUpdate = true;
        this->onepole_tilde_02_reset();
        this->onepole_tilde_02_setupDone = true;
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        onepole_tilde_01_x = 0;
        onepole_tilde_01_freqInHz = 5000;
        onepole_tilde_02_x = 0;
        onepole_tilde_02_freqInHz = 5000;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        onepole_tilde_01_freq = 0;
        onepole_tilde_01_needsUpdate = false;
        onepole_tilde_01_lastY = 0;
        onepole_tilde_01_a0 = 0;
        onepole_tilde_01_b1 = 0;
        onepole_tilde_01_setupDone = false;
        onepole_tilde_02_freq = 0;
        onepole_tilde_02_needsUpdate = false;
        onepole_tilde_02_lastY = 0;
        onepole_tilde_02_a0 = 0;
        onepole_tilde_02_b1 = 0;
        onepole_tilde_02_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number onepole_tilde_01_x;
        number onepole_tilde_01_freqInHz;
        number onepole_tilde_02_x;
        number onepole_tilde_02_freqInHz;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number onepole_tilde_01_freq;
        bool onepole_tilde_01_needsUpdate;
        number onepole_tilde_01_lastY;
        number onepole_tilde_01_a0;
        number onepole_tilde_01_b1;
        bool onepole_tilde_01_setupDone;
        number onepole_tilde_02_freq;
        bool onepole_tilde_02_needsUpdate;
        number onepole_tilde_02_lastY;
        number onepole_tilde_02_a0;
        number onepole_tilde_02_b1;
        bool onepole_tilde_02_setupDone;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_61 : public PatcherInterfaceImpl {
    
    friend class RnboBubble;
    
    public:
    
    class RNBOSubpatcher_49 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_61;
            friend class RnboBubble;
            
            public:
            
            RNBOSubpatcher_49()
            {
            }
            
            ~RNBOSubpatcher_49()
            {
            }
            
            virtual RNBOSubpatcher_61* getPatcher() const {
                return static_cast<RNBOSubpatcher_61 *>(_parentPatcher);
            }
            
            RnboBubble* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -871642103, false);
                getEngine()->flushClockEvents(this, -1494586265, false);
                getEngine()->flushClockEvents(this, 2098551528, false);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                this->dspexpr_13_perform(in5, this->dspexpr_13_in2, this->signals[0], n);
            
                this->rampsmooth_tilde_01_perform(
                    this->signals[0],
                    this->rampsmooth_tilde_01_up,
                    this->rampsmooth_tilde_01_down,
                    this->signals[1],
                    n
                );
            
                this->dspexpr_11_perform(in1, in3, this->signals[1], out1, n);
                this->dspexpr_12_perform(in2, in4, this->signals[1], out2, n);
                this->numbertilde_01_perform(this->signals[0], this->dummyBuffer, n);
                this->numbertilde_02_perform(in5, this->dummyBuffer, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 2; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_01_dspsetup(forceDSPSetup);
                this->numbertilde_01_dspsetup(forceDSPSetup);
                this->numbertilde_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double samplerate) {
                this->translate_01_onSampleRateChanged(samplerate);
            }
            
            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                this->updateTime(time);
                this->translate_01_onTempoChanged(tempo);
            }
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void processBBUEvent(MillisecondTime , number , number , number ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -871642103:
                    {
                    this->loadbang_01_startupbang_bang();
                    break;
                    }
                case -1494586265:
                    {
                    this->numbertilde_01_value_set(value);
                    break;
                    }
                case 2098551528:
                    {
                    this->numbertilde_02_value_set(value);
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("Pitch/Switch~/number~_obj-6") == objectId)
                        this->numbertilde_01_sig_number_set(payload);
            
                    if (TAG("Pitch/Switch~/number~_obj-5") == objectId)
                        this->numbertilde_02_sig_number_set(payload);
            
                    break;
                    }
                case TAG("mode"):
                    {
                    if (TAG("Pitch/Switch~/number~_obj-6") == objectId)
                        this->numbertilde_01_mode_set(payload);
            
                    if (TAG("Pitch/Switch~/number~_obj-5") == objectId)
                        this->numbertilde_02_mode_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("Pitch/Switch~/number_obj-112") == objectId)
                        this->numberobj_02_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Pitch/Switch~/number_obj-112") == objectId)
                        this->numberobj_02_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Pitch/Switch~/message_obj-110") == objectId)
                        this->message_01_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("Pitch/Switch~/number~_obj-6") == objectId)
                        this->numbertilde_01_sig_list_set(payload);
            
                    if (TAG("Pitch/Switch~/number~_obj-5") == objectId)
                        this->numbertilde_02_sig_list_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Pitch/Switch~/message_obj-110") == objectId)
                        this->message_01_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("startupbang"):
                    {
                    if (TAG("Pitch/Switch~/loadbang_obj-115") == objectId)
                        this->loadbang_01_startupbang_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Pitch/Switch~/message_obj-110") == objectId)
                        this->message_01_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("monitor"):
                    {
                    return "monitor";
                    }
                case TAG("Pitch/Switch~/number~_obj-6"):
                    {
                    return "Pitch/Switch~/number~_obj-6";
                    }
                case TAG("assign"):
                    {
                    return "assign";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Pitch/Switch~/number~_obj-5"):
                    {
                    return "Pitch/Switch~/number~_obj-5";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Pitch/Switch~/number_obj-112"):
                    {
                    return "Pitch/Switch~/number_obj-112";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Pitch/Switch~/message_obj-110"):
                    {
                    return "Pitch/Switch~/message_obj-110";
                    }
                case TAG("sig"):
                    {
                    return "sig";
                    }
                case TAG("mode"):
                    {
                    return "mode";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("Pitch/Switch~/loadbang_obj-115"):
                    {
                    return "Pitch/Switch~/loadbang_obj-115";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void numbertilde_01_sig_number_set(number v) {
                this->numbertilde_01_outValue = v;
            }
            
            void numbertilde_01_sig_list_set(const list& v) {
                this->numbertilde_01_outValue = v[0];
            }
            
            void numbertilde_01_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_01_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_01_currentMode = 1;
                }
            }
            
            void numbertilde_02_sig_number_set(number v) {
                this->numbertilde_02_outValue = v;
            }
            
            void numbertilde_02_sig_list_set(const list& v) {
                this->numbertilde_02_outValue = v[0];
            }
            
            void numbertilde_02_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_02_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_02_currentMode = 1;
                }
            }
            
            void loadbang_01_startupbang_bang() {
                this->loadbang_01_output_bang();
            }
            
            void numberobj_02_valin_set(number v) {
                this->numberobj_02_value_set(v);
            }
            
            void numberobj_02_format_set(number v) {
                this->numberobj_02_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_01_listin_list_set(const list& v) {
                this->message_01_set_set(v);
            }
            
            void message_01_listin_number_set(number v) {
                this->message_01_set_set(v);
            }
            
            void message_01_listin_bang_bang() {
                this->message_01_trigger_bang();
            }
            
            void numbertilde_01_value_set(number ) {}
            
            void numbertilde_02_value_set(number ) {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 5;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->numbertilde_01_init();
                this->numbertilde_02_init();
                this->numberobj_02_init();
                this->message_01_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {}
            
            void rampsmooth_tilde_01_down_set(number v) {
                this->rampsmooth_tilde_01_down = v;
            }
            
            void rampsmooth_tilde_01_up_set(number v) {
                this->rampsmooth_tilde_01_up = v;
            }
            
            void numberobj_02_output_set(number v) {
                this->rampsmooth_tilde_01_down_set(v);
                this->rampsmooth_tilde_01_up_set(v);
            }
            
            void numberobj_02_value_set(number v) {
                this->numberobj_02_value_setter(v);
                v = this->numberobj_02_value;
                number localvalue = v;
            
                if (this->numberobj_02_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/Switch~/number_obj-112"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_02_output_set(localvalue);
            }
            
            void translate_01_out_set(number v) {
                this->numberobj_02_value_set(v);
            }
            
            void translate_01_value_set(number v) {
                this->translate_01_value = v;
            
                {
                    {
                        {
                            {
                                {
                                    this->translate_01_out_set(this->mstosamps(v));
                                }
                            }
                        }
                    }
                }
            }
            
            void message_01_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->translate_01_value_set(converted);
                }
            }
            
            void message_01_trigger_bang() {
                this->message_01_out_set(this->message_01_set);
            }
            
            void loadbang_01_output_bang() {
                this->message_01_trigger_bang();
            }
            
            void message_01_set_set(const list& v) {
                this->message_01_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Pitch/Switch~/message_obj-110"),
                    v,
                    this->_currentTime
                );
            }
            
            void dspexpr_13_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] != 0;//#map:_###_obj_###_:1
                }
            }
            
            void rampsmooth_tilde_01_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                auto __rampsmooth_tilde_01_increment = this->rampsmooth_tilde_01_increment;
                auto __rampsmooth_tilde_01_index = this->rampsmooth_tilde_01_index;
                auto __rampsmooth_tilde_01_prev = this->rampsmooth_tilde_01_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_01_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_01_prev) {
                            number _up = up;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_01_index = _up;
                            __rampsmooth_tilde_01_increment = (x[(Index)i] - __rampsmooth_tilde_01_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_01_prev) {
                            number _down = down;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_01_index = _down;
                            __rampsmooth_tilde_01_increment = (x[(Index)i] - __rampsmooth_tilde_01_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_01_index > 0) {
                        __rampsmooth_tilde_01_prev += __rampsmooth_tilde_01_increment;
                        __rampsmooth_tilde_01_index -= 1;
                    } else {
                        __rampsmooth_tilde_01_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_01_prev;
                }
            
                this->rampsmooth_tilde_01_prev = __rampsmooth_tilde_01_prev;
                this->rampsmooth_tilde_01_index = __rampsmooth_tilde_01_index;
                this->rampsmooth_tilde_01_increment = __rampsmooth_tilde_01_increment;
            }
            
            void dspexpr_11_perform(
                const Sample * in1,
                const Sample * in2,
                const Sample * in3,
                SampleValue * out1,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in3[(Index)i] * (in2[(Index)i] - in1[(Index)i]);//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_12_perform(
                const Sample * in1,
                const Sample * in2,
                const Sample * in3,
                SampleValue * out1,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in3[(Index)i] * (in2[(Index)i] - in1[(Index)i]);//#map:_###_obj_###_:1
                }
            }
            
            void numbertilde_01_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_01_currentIntervalInSamples = this->numbertilde_01_currentIntervalInSamples;
                auto __numbertilde_01_lastValue = this->numbertilde_01_lastValue;
                auto __numbertilde_01_currentInterval = this->numbertilde_01_currentInterval;
                auto __numbertilde_01_rampInSamples = this->numbertilde_01_rampInSamples;
                auto __numbertilde_01_outValue = this->numbertilde_01_outValue;
                auto __numbertilde_01_currentMode = this->numbertilde_01_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_01_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_01_smooth_next(
                            __numbertilde_01_outValue,
                            __numbertilde_01_rampInSamples,
                            __numbertilde_01_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_01_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_01_lastValue && __numbertilde_01_currentInterval <= 0) {
                    __numbertilde_01_currentInterval = __numbertilde_01_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1494586265,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_01_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Pitch/Switch~/number~_obj-6"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_01_currentInterval = __numbertilde_01_currentInterval;
                this->numbertilde_01_lastValue = __numbertilde_01_lastValue;
            }
            
            void numbertilde_02_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_02_currentIntervalInSamples = this->numbertilde_02_currentIntervalInSamples;
                auto __numbertilde_02_lastValue = this->numbertilde_02_lastValue;
                auto __numbertilde_02_currentInterval = this->numbertilde_02_currentInterval;
                auto __numbertilde_02_rampInSamples = this->numbertilde_02_rampInSamples;
                auto __numbertilde_02_outValue = this->numbertilde_02_outValue;
                auto __numbertilde_02_currentMode = this->numbertilde_02_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_02_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_02_smooth_next(
                            __numbertilde_02_outValue,
                            __numbertilde_02_rampInSamples,
                            __numbertilde_02_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_02_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_02_lastValue && __numbertilde_02_currentInterval <= 0) {
                    __numbertilde_02_currentInterval = __numbertilde_02_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        2098551528,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_02_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Pitch/Switch~/number~_obj-5"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_02_currentInterval = __numbertilde_02_currentInterval;
                this->numbertilde_02_lastValue = __numbertilde_02_lastValue;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_02_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_02_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_02_value = localvalue;
            }
            
            number rampsmooth_tilde_01_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_01_d_prev);
                this->rampsmooth_tilde_01_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_01_d_dspsetup() {
                this->rampsmooth_tilde_01_d_reset();
            }
            
            void rampsmooth_tilde_01_d_reset() {
                this->rampsmooth_tilde_01_d_prev = 0;
            }
            
            void rampsmooth_tilde_01_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_01_setupDone = true;
                this->rampsmooth_tilde_01_d_dspsetup();
            }
            
            number numbertilde_01_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_01_smooth_d_prev);
                this->numbertilde_01_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_01_smooth_d_dspsetup() {
                this->numbertilde_01_smooth_d_reset();
            }
            
            void numbertilde_01_smooth_d_reset() {
                this->numbertilde_01_smooth_d_prev = 0;
            }
            
            number numbertilde_01_smooth_next(number x, number up, number down) {
                if (this->numbertilde_01_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_01_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_01_smooth_index = _up;
                        this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _up;
                    } else if (x < this->numbertilde_01_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_01_smooth_index = _down;
                        this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_01_smooth_index > 0) {
                    this->numbertilde_01_smooth_prev += this->numbertilde_01_smooth_increment;
                    this->numbertilde_01_smooth_index -= 1;
                } else {
                    this->numbertilde_01_smooth_prev = x;
                }
            
                return this->numbertilde_01_smooth_prev;
            }
            
            void numbertilde_01_smooth_reset() {
                this->numbertilde_01_smooth_prev = 0;
                this->numbertilde_01_smooth_index = 0;
                this->numbertilde_01_smooth_increment = 0;
                this->numbertilde_01_smooth_d_reset();
            }
            
            void numbertilde_01_init() {
                this->numbertilde_01_currentMode = 1;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/Switch~/number~_obj-6"), 1, this->_currentTime);
            }
            
            void numbertilde_01_dspsetup(bool force) {
                if ((bool)(this->numbertilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_01_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_01_currentInterval = this->numbertilde_01_currentIntervalInSamples;
                this->numbertilde_01_rampInSamples = this->mstosamps(this->numbertilde_01_ramp);
                this->numbertilde_01_setupDone = true;
                this->numbertilde_01_smooth_d_dspsetup();
            }
            
            number numbertilde_02_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_02_smooth_d_prev);
                this->numbertilde_02_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_02_smooth_d_dspsetup() {
                this->numbertilde_02_smooth_d_reset();
            }
            
            void numbertilde_02_smooth_d_reset() {
                this->numbertilde_02_smooth_d_prev = 0;
            }
            
            number numbertilde_02_smooth_next(number x, number up, number down) {
                if (this->numbertilde_02_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_02_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_02_smooth_index = _up;
                        this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _up;
                    } else if (x < this->numbertilde_02_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_02_smooth_index = _down;
                        this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_02_smooth_index > 0) {
                    this->numbertilde_02_smooth_prev += this->numbertilde_02_smooth_increment;
                    this->numbertilde_02_smooth_index -= 1;
                } else {
                    this->numbertilde_02_smooth_prev = x;
                }
            
                return this->numbertilde_02_smooth_prev;
            }
            
            void numbertilde_02_smooth_reset() {
                this->numbertilde_02_smooth_prev = 0;
                this->numbertilde_02_smooth_index = 0;
                this->numbertilde_02_smooth_increment = 0;
                this->numbertilde_02_smooth_d_reset();
            }
            
            void numbertilde_02_init() {
                this->numbertilde_02_currentMode = 1;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/Switch~/number~_obj-5"), 1, this->_currentTime);
            }
            
            void numbertilde_02_dspsetup(bool force) {
                if ((bool)(this->numbertilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_02_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_02_currentInterval = this->numbertilde_02_currentIntervalInSamples;
                this->numbertilde_02_rampInSamples = this->mstosamps(this->numbertilde_02_ramp);
                this->numbertilde_02_setupDone = true;
                this->numbertilde_02_smooth_d_dspsetup();
            }
            
            void numberobj_02_init() {
                this->numberobj_02_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/Switch~/number_obj-112"), 1, this->_currentTime);
            }
            
            void numberobj_02_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_02_value;
            }
            
            void numberobj_02_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_02_value_set(preset["value"]);
            }
            
            void message_01_init() {
                this->message_01_set_set({50});
            }
            
            void translate_01_onTempoChanged(number ) {}
            
            void translate_01_onSampleRateChanged(number samplerate) {
                RNBO_UNUSED(samplerate);
            
                {
                    this->translate_01_value_set(this->translate_01_value);
                }
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_11_in1 = 0;
                dspexpr_11_in2 = 0;
                dspexpr_11_in3 = 0;
                dspexpr_12_in1 = 0;
                dspexpr_12_in2 = 0;
                dspexpr_12_in3 = 0;
                rampsmooth_tilde_01_x = 0;
                rampsmooth_tilde_01_up = 0;
                rampsmooth_tilde_01_down = 0;
                dspexpr_13_in1 = 0;
                dspexpr_13_in2 = 0;
                numbertilde_01_input_number = 0;
                numbertilde_01_ramp = 0;
                numbertilde_02_input_number = 0;
                numbertilde_02_ramp = 0;
                numberobj_02_value = 0;
                numberobj_02_value_setter(numberobj_02_value);
                translate_01_value = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                rampsmooth_tilde_01_prev = 0;
                rampsmooth_tilde_01_index = 0;
                rampsmooth_tilde_01_increment = 0;
                rampsmooth_tilde_01_d_prev = 0;
                rampsmooth_tilde_01_setupDone = false;
                numbertilde_01_currentInterval = 0;
                numbertilde_01_currentIntervalInSamples = 0;
                numbertilde_01_lastValue = 0;
                numbertilde_01_outValue = 0;
                numbertilde_01_rampInSamples = 0;
                numbertilde_01_currentMode = 0;
                numbertilde_01_smooth_d_prev = 0;
                numbertilde_01_smooth_prev = 0;
                numbertilde_01_smooth_index = 0;
                numbertilde_01_smooth_increment = 0;
                numbertilde_01_setupDone = false;
                numbertilde_02_currentInterval = 0;
                numbertilde_02_currentIntervalInSamples = 0;
                numbertilde_02_lastValue = 0;
                numbertilde_02_outValue = 0;
                numbertilde_02_rampInSamples = 0;
                numbertilde_02_currentMode = 0;
                numbertilde_02_smooth_d_prev = 0;
                numbertilde_02_smooth_prev = 0;
                numbertilde_02_smooth_index = 0;
                numbertilde_02_smooth_increment = 0;
                numbertilde_02_setupDone = false;
                numberobj_02_currentFormat = 6;
                numberobj_02_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_11_in1;
                number dspexpr_11_in2;
                number dspexpr_11_in3;
                number dspexpr_12_in1;
                number dspexpr_12_in2;
                number dspexpr_12_in3;
                number rampsmooth_tilde_01_x;
                number rampsmooth_tilde_01_up;
                number rampsmooth_tilde_01_down;
                number dspexpr_13_in1;
                number dspexpr_13_in2;
                number numbertilde_01_input_number;
                number numbertilde_01_ramp;
                number numbertilde_02_input_number;
                number numbertilde_02_ramp;
                number numberobj_02_value;
                list message_01_set;
                number translate_01_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[2];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number rampsmooth_tilde_01_prev;
                number rampsmooth_tilde_01_index;
                number rampsmooth_tilde_01_increment;
                number rampsmooth_tilde_01_d_prev;
                bool rampsmooth_tilde_01_setupDone;
                SampleIndex numbertilde_01_currentInterval;
                SampleIndex numbertilde_01_currentIntervalInSamples;
                number numbertilde_01_lastValue;
                number numbertilde_01_outValue;
                number numbertilde_01_rampInSamples;
                Int numbertilde_01_currentMode;
                number numbertilde_01_smooth_d_prev;
                number numbertilde_01_smooth_prev;
                number numbertilde_01_smooth_index;
                number numbertilde_01_smooth_increment;
                bool numbertilde_01_setupDone;
                SampleIndex numbertilde_02_currentInterval;
                SampleIndex numbertilde_02_currentIntervalInSamples;
                number numbertilde_02_lastValue;
                number numbertilde_02_outValue;
                number numbertilde_02_rampInSamples;
                Int numbertilde_02_currentMode;
                number numbertilde_02_smooth_d_prev;
                number numbertilde_02_smooth_prev;
                number numbertilde_02_smooth_index;
                number numbertilde_02_smooth_increment;
                bool numbertilde_02_setupDone;
                Int numberobj_02_currentFormat;
                number numberobj_02_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_50 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_61;
            friend class RnboBubble;
            
            public:
            
            RNBOSubpatcher_50()
            {
            }
            
            ~RNBOSubpatcher_50()
            {
            }
            
            virtual RNBOSubpatcher_61* getPatcher() const {
                return static_cast<RNBOSubpatcher_61 *>(_parentPatcher);
            }
            
            RnboBubble* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Pitch/FreqCalc/number_obj-118") == objectId)
                        this->numberobj_03_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-107") == objectId)
                        this->numberobj_04_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-90") == objectId)
                        this->numberobj_05_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-81") == objectId)
                        this->numberobj_06_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-78") == objectId)
                        this->numberobj_07_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-71") == objectId)
                        this->numberobj_08_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-92") == objectId)
                        this->numberobj_09_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-119") == objectId)
                        this->numberobj_10_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-87") == objectId)
                        this->numberobj_11_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-77") == objectId)
                        this->numberobj_12_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-84") == objectId)
                        this->numberobj_13_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-70") == objectId)
                        this->numberobj_14_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-98") == objectId)
                        this->numberobj_15_valin_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-100") == objectId)
                        this->numberobj_16_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Pitch/FreqCalc/number_obj-118") == objectId)
                        this->numberobj_03_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-107") == objectId)
                        this->numberobj_04_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-90") == objectId)
                        this->numberobj_05_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-81") == objectId)
                        this->numberobj_06_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-78") == objectId)
                        this->numberobj_07_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-71") == objectId)
                        this->numberobj_08_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-92") == objectId)
                        this->numberobj_09_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-119") == objectId)
                        this->numberobj_10_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-87") == objectId)
                        this->numberobj_11_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-77") == objectId)
                        this->numberobj_12_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-84") == objectId)
                        this->numberobj_13_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-70") == objectId)
                        this->numberobj_14_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-98") == objectId)
                        this->numberobj_15_format_set(payload);
            
                    if (TAG("Pitch/FreqCalc/number_obj-100") == objectId)
                        this->numberobj_16_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Pitch/FreqCalc/message_obj-3") == objectId)
                        this->message_02_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Pitch/FreqCalc/message_obj-3") == objectId)
                        this->message_02_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Pitch/FreqCalc/message_obj-3") == objectId)
                        this->message_02_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Pitch/FreqCalc/number_obj-118"):
                    {
                    return "Pitch/FreqCalc/number_obj-118";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Pitch/FreqCalc/number_obj-107"):
                    {
                    return "Pitch/FreqCalc/number_obj-107";
                    }
                case TAG("Pitch/FreqCalc/number_obj-90"):
                    {
                    return "Pitch/FreqCalc/number_obj-90";
                    }
                case TAG("Pitch/FreqCalc/number_obj-81"):
                    {
                    return "Pitch/FreqCalc/number_obj-81";
                    }
                case TAG("Pitch/FreqCalc/number_obj-78"):
                    {
                    return "Pitch/FreqCalc/number_obj-78";
                    }
                case TAG("Pitch/FreqCalc/number_obj-71"):
                    {
                    return "Pitch/FreqCalc/number_obj-71";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Pitch/FreqCalc/message_obj-3"):
                    {
                    return "Pitch/FreqCalc/message_obj-3";
                    }
                case TAG("Pitch/FreqCalc/number_obj-92"):
                    {
                    return "Pitch/FreqCalc/number_obj-92";
                    }
                case TAG("Pitch/FreqCalc/number_obj-119"):
                    {
                    return "Pitch/FreqCalc/number_obj-119";
                    }
                case TAG("Pitch/FreqCalc/number_obj-87"):
                    {
                    return "Pitch/FreqCalc/number_obj-87";
                    }
                case TAG("Pitch/FreqCalc/number_obj-77"):
                    {
                    return "Pitch/FreqCalc/number_obj-77";
                    }
                case TAG("Pitch/FreqCalc/number_obj-84"):
                    {
                    return "Pitch/FreqCalc/number_obj-84";
                    }
                case TAG("Pitch/FreqCalc/number_obj-70"):
                    {
                    return "Pitch/FreqCalc/number_obj-70";
                    }
                case TAG("Pitch/FreqCalc/number_obj-98"):
                    {
                    return "Pitch/FreqCalc/number_obj-98";
                    }
                case TAG("Pitch/FreqCalc/number_obj-100"):
                    {
                    return "Pitch/FreqCalc/number_obj-100";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void numberobj_03_valin_set(number v) {
                this->numberobj_03_value_set(v);
            }
            
            void numberobj_03_format_set(number v) {
                this->numberobj_03_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_04_valin_set(number v) {
                this->numberobj_04_value_set(v);
            }
            
            void numberobj_04_format_set(number v) {
                this->numberobj_04_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_05_valin_set(number v) {
                this->numberobj_05_value_set(v);
            }
            
            void numberobj_05_format_set(number v) {
                this->numberobj_05_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_06_valin_set(number v) {
                this->numberobj_06_value_set(v);
            }
            
            void numberobj_06_format_set(number v) {
                this->numberobj_06_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_07_valin_set(number v) {
                this->numberobj_07_value_set(v);
            }
            
            void numberobj_07_format_set(number v) {
                this->numberobj_07_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_03_out1_bang_bang() {
                this->numberobj_08_value_bang();
            }
            
            void eventinlet_03_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_08_value_set(converted);
                }
            }
            
            void numberobj_08_valin_set(number v) {
                this->numberobj_08_value_set(v);
            }
            
            void numberobj_08_format_set(number v) {
                this->numberobj_08_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_02_listin_list_set(const list& v) {
                this->message_02_set_set(v);
            }
            
            void message_02_listin_number_set(number v) {
                this->message_02_set_set(v);
            }
            
            void message_02_listin_bang_bang() {
                this->message_02_trigger_bang();
            }
            
            void numberobj_09_valin_set(number v) {
                this->numberobj_09_value_set(v);
            }
            
            void numberobj_09_format_set(number v) {
                this->numberobj_09_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_10_valin_set(number v) {
                this->numberobj_10_value_set(v);
            }
            
            void numberobj_10_format_set(number v) {
                this->numberobj_10_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_11_valin_set(number v) {
                this->numberobj_11_value_set(v);
            }
            
            void numberobj_11_format_set(number v) {
                this->numberobj_11_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_12_valin_set(number v) {
                this->numberobj_12_value_set(v);
            }
            
            void numberobj_12_format_set(number v) {
                this->numberobj_12_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_13_valin_set(number v) {
                this->numberobj_13_value_set(v);
            }
            
            void numberobj_13_format_set(number v) {
                this->numberobj_13_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_04_out1_bang_bang() {
                this->numberobj_14_value_bang();
            }
            
            void eventinlet_04_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_14_value_set(converted);
                }
            }
            
            void numberobj_14_valin_set(number v) {
                this->numberobj_14_value_set(v);
            }
            
            void numberobj_14_format_set(number v) {
                this->numberobj_14_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_15_valin_set(number v) {
                this->numberobj_15_value_set(v);
            }
            
            void numberobj_15_format_set(number v) {
                this->numberobj_15_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_16_valin_set(number v) {
                this->numberobj_16_value_set(v);
            }
            
            void numberobj_16_format_set(number v) {
                this->numberobj_16_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_05_out1_bang_bang() {
                this->numberobj_16_value_bang();
            }
            
            void eventinlet_05_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_16_value_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->numberobj_03_init();
                this->numberobj_04_init();
                this->numberobj_05_init();
                this->numberobj_06_init();
                this->numberobj_07_init();
                this->numberobj_08_init();
                this->message_02_init();
                this->numberobj_09_init();
                this->numberobj_10_init();
                this->numberobj_11_init();
                this->numberobj_12_init();
                this->numberobj_13_init();
                this->numberobj_14_init();
                this->numberobj_15_init();
                this->numberobj_16_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void eventoutlet_02_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_02_out2_number_set(v);
            }
            
            void numberobj_09_output_set(number v) {
                this->eventoutlet_02_in1_number_set(v);
            }
            
            void numberobj_09_value_set(number v) {
                this->numberobj_09_value_setter(v);
                v = this->numberobj_09_value;
                number localvalue = v;
            
                if (this->numberobj_09_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-92"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_09_output_set(localvalue);
            }
            
            void message_02_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_09_value_set(converted);
                }
            }
            
            void message_02_trigger_bang() {
                this->message_02_out_set(this->message_02_set);
            }
            
            void select_01_match1_bang() {
                this->message_02_trigger_bang();
            }
            
            void select_01_nomatch_number_set(number v) {
                this->numberobj_09_value_set(v);
            }
            
            void select_01_input_number_set(number v) {
                if (v == this->select_01_test1)
                    this->select_01_match1_bang();
                else
                    this->select_01_nomatch_number_set(v);
            }
            
            void expr_09_out1_set(number v) {
                this->expr_09_out1 = v;
                this->select_01_input_number_set(this->expr_09_out1);
            }
            
            void expr_09_in1_set(number in1) {
                this->expr_09_in1 = in1;
            
                this->expr_09_out1_set(
                    (this->expr_09_in2 == 0 ? 0 : (this->expr_09_in2 == 0. ? 0. : this->expr_09_in1 / this->expr_09_in2))
                );//#map:Pitch/FreqCalc//_obj-93:1
            }
            
            void expr_09_in2_set(number v) {
                this->expr_09_in2 = v;
                this->expr_09_in1_set(this->expr_09_in1);
            }
            
            void numberobj_10_output_set(number v) {
                this->expr_09_in2_set(v);
            }
            
            void numberobj_10_value_set(number v) {
                this->numberobj_10_value_setter(v);
                v = this->numberobj_10_value;
                number localvalue = v;
            
                if (this->numberobj_10_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-119"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_10_output_set(localvalue);
            }
            
            void expr_10_out1_set(number v) {
                this->expr_10_out1 = v;
                this->numberobj_10_value_set(this->expr_10_out1);
            }
            
            void expr_10_in1_set(number in1) {
                this->expr_10_in1 = in1;
                this->expr_10_out1_set(this->expr_10_in2 - this->expr_10_in1);//#map:Pitch/FreqCalc/!-_obj-117:1
            }
            
            void numberobj_11_output_set(number v) {
                this->expr_10_in1_set(v);
            }
            
            void numberobj_11_value_set(number v) {
                this->numberobj_11_value_setter(v);
                v = this->numberobj_11_value;
                number localvalue = v;
            
                if (this->numberobj_11_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-87"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_11_output_set(localvalue);
            }
            
            void expr_11_out1_set(number v) {
                this->expr_11_out1 = v;
                this->numberobj_11_value_set(this->expr_11_out1);
            }
            
            void expr_11_in1_set(number in1) {
                this->expr_11_in1 = in1;
                this->expr_11_out1_set(fixnan(rnbo_pow(2, this->expr_11_in1 / (number)1200)));//#map:Pitch/FreqCalc/expr_obj-86:1
            }
            
            void numberobj_12_output_set(number v) {
                this->expr_11_in1_set(v);
            }
            
            void numberobj_12_value_set(number v) {
                this->numberobj_12_value_setter(v);
                v = this->numberobj_12_value;
                number localvalue = v;
            
                if (this->numberobj_12_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-77"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_12_output_set(localvalue);
            }
            
            void expr_12_out1_set(number v) {
                this->expr_12_out1 = v;
                this->numberobj_12_value_set(this->expr_12_out1);
            }
            
            void expr_12_in1_set(number in1) {
                this->expr_12_in1 = in1;
                this->expr_12_out1_set(this->expr_12_in1 + this->expr_12_in2);//#map:Pitch/FreqCalc/+_obj-79:1
            }
            
            void eventoutlet_01_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_02_out1_number_set(v);
            }
            
            void numberobj_04_output_set(number v) {
                this->eventoutlet_01_in1_number_set(v);
            }
            
            void numberobj_04_value_set(number v) {
                this->numberobj_04_value_setter(v);
                v = this->numberobj_04_value;
                number localvalue = v;
            
                if (this->numberobj_04_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-107"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_04_output_set(localvalue);
            }
            
            void expr_05_out1_set(number v) {
                this->expr_05_out1 = v;
                this->numberobj_04_value_set(this->expr_05_out1);
            }
            
            void expr_05_in1_set(number in1) {
                this->expr_05_in1 = in1;
            
                this->expr_05_out1_set(
                    (this->expr_05_in2 == 0 ? 0 : (this->expr_05_in2 == 0. ? 0. : this->expr_05_in1 / this->expr_05_in2))
                );//#map:Pitch/FreqCalc//_obj-108:1
            }
            
            void numberobj_03_output_set(number v) {
                this->expr_09_in1_set(v);
                this->expr_05_in1_set(v);
            }
            
            void numberobj_03_value_set(number v) {
                this->numberobj_03_value_setter(v);
                v = this->numberobj_03_value;
                number localvalue = v;
            
                if (this->numberobj_03_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-118"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_03_output_set(localvalue);
            }
            
            void expr_04_out1_set(number v) {
                this->expr_04_out1 = v;
                this->numberobj_03_value_set(this->expr_04_out1);
            }
            
            void expr_04_in1_set(number in1) {
                this->expr_04_in1 = in1;
                this->expr_04_out1_set(this->expr_04_in2 - this->expr_04_in1);//#map:Pitch/FreqCalc/!-_obj-115:1
            }
            
            void numberobj_05_output_set(number v) {
                this->expr_04_in1_set(v);
            }
            
            void numberobj_05_value_set(number v) {
                this->numberobj_05_value_setter(v);
                v = this->numberobj_05_value;
                number localvalue = v;
            
                if (this->numberobj_05_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-90"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_05_output_set(localvalue);
            }
            
            void expr_06_out1_set(number v) {
                this->expr_06_out1 = v;
                this->numberobj_05_value_set(this->expr_06_out1);
            }
            
            void expr_06_in1_set(number in1) {
                this->expr_06_in1 = in1;
                this->expr_06_out1_set(fixnan(rnbo_pow(2, this->expr_06_in1 / (number)1200)));//#map:Pitch/FreqCalc/expr_obj-89:1
            }
            
            void numberobj_07_output_set(number v) {
                this->expr_06_in1_set(v);
            }
            
            void numberobj_07_value_set(number v) {
                this->numberobj_07_value_setter(v);
                v = this->numberobj_07_value;
                number localvalue = v;
            
                if (this->numberobj_07_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-78"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_07_output_set(localvalue);
            }
            
            void expr_07_out1_set(number v) {
                this->expr_07_out1 = v;
                this->numberobj_07_value_set(this->expr_07_out1);
            }
            
            void expr_07_in1_set(number in1) {
                this->expr_07_in1 = in1;
                this->expr_07_out1_set(this->expr_07_in1 - this->expr_07_in2);//#map:Pitch/FreqCalc/-_obj-80:1
            }
            
            void numberobj_06_output_set(number v) {
                this->expr_12_in1_set(v);
                this->expr_07_in1_set(v);
            }
            
            void numberobj_06_value_set(number v) {
                this->numberobj_06_value_setter(v);
                v = this->numberobj_06_value;
                number localvalue = v;
            
                if (this->numberobj_06_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-81"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_06_output_set(localvalue);
            }
            
            void expr_08_out1_set(number v) {
                this->expr_08_out1 = v;
                this->numberobj_06_value_set(this->expr_08_out1);
            }
            
            void expr_08_in1_set(number in1) {
                this->expr_08_in1 = in1;
                this->expr_08_out1_set(this->expr_08_in1 * this->expr_08_in2);//#map:Pitch/FreqCalc/*_obj-76:1
            }
            
            void numberobj_08_output_set(number v) {
                this->expr_08_in1_set(v);
            }
            
            void numberobj_08_value_set(number v) {
                this->numberobj_08_value_setter(v);
                v = this->numberobj_08_value;
                number localvalue = v;
            
                if (this->numberobj_08_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-71"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_08_output_set(localvalue);
            }
            
            void eventinlet_03_out1_number_set(number v) {
                this->numberobj_08_value_set(v);
            }
            
            void expr_12_in2_set(number v) {
                this->expr_12_in2 = v;
                this->expr_12_in1_set(this->expr_12_in1);
            }
            
            void expr_07_in2_set(number v) {
                this->expr_07_in2 = v;
                this->expr_07_in1_set(this->expr_07_in1);
            }
            
            void numberobj_13_output_set(number v) {
                this->expr_12_in2_set(v);
                this->expr_07_in2_set(v);
            }
            
            void numberobj_13_value_set(number v) {
                this->numberobj_13_value_setter(v);
                v = this->numberobj_13_value;
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-84"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_13_output_set(localvalue);
            }
            
            void expr_13_out1_set(number v) {
                this->expr_13_out1 = v;
                this->numberobj_13_value_set(this->expr_13_out1);
            }
            
            void expr_13_in1_set(number in1) {
                this->expr_13_in1 = in1;
            
                this->expr_13_out1_set(
                    (this->expr_13_in2 == 0 ? 0 : (this->expr_13_in2 == 0. ? 0. : this->expr_13_in1 / this->expr_13_in2))
                );//#map:Pitch/FreqCalc//_obj-83:1
            }
            
            void numberobj_14_output_set(number v) {
                this->expr_13_in1_set(v);
            }
            
            void numberobj_14_value_set(number v) {
                this->numberobj_14_value_setter(v);
                v = this->numberobj_14_value;
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-70"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_14_output_set(localvalue);
            }
            
            void eventinlet_04_out1_number_set(number v) {
                this->numberobj_14_value_set(v);
            }
            
            void expr_05_in2_set(number v) {
                this->expr_05_in2 = v;
                this->expr_05_in1_set(this->expr_05_in1);
            }
            
            void numberobj_15_output_set(number v) {
                this->expr_05_in2_set(v);
            }
            
            void numberobj_15_value_set(number v) {
                this->numberobj_15_value_setter(v);
                v = this->numberobj_15_value;
                number localvalue = v;
            
                if (this->numberobj_15_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-98"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_15_output_set(localvalue);
            }
            
            void expr_14_out1_set(number v) {
                this->expr_14_out1 = v;
                this->numberobj_15_value_set(this->expr_14_out1);
            }
            
            void expr_14_in1_set(number in1) {
                this->expr_14_in1 = in1;
            
                this->expr_14_out1_set(
                    (this->expr_14_in2 == 0 ? 0 : (this->expr_14_in2 == 0. ? 0. : this->expr_14_in1 / this->expr_14_in2))
                );//#map:Pitch/FreqCalc//_obj-99:1
            }
            
            void numberobj_16_output_set(number v) {
                this->expr_14_in1_set(v);
            }
            
            void numberobj_16_value_set(number v) {
                this->numberobj_16_value_setter(v);
                v = this->numberobj_16_value;
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-100"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_16_output_set(localvalue);
            }
            
            void eventinlet_05_out1_number_set(number v) {
                this->numberobj_16_value_set(v);
            }
            
            void numberobj_08_value_bang() {
                number v = this->numberobj_08_value;
                number localvalue = v;
            
                if (this->numberobj_08_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-71"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_08_output_set(localvalue);
            }
            
            void message_02_set_set(const list& v) {
                this->message_02_set = jsCreateListCopy(v);
                this->getEngine()->sendListMessage(TAG("listout"), TAG("Pitch/FreqCalc/message_obj-3"), v, this->_currentTime);
            }
            
            void numberobj_14_value_bang() {
                number v = this->numberobj_14_value;
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-70"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_14_output_set(localvalue);
            }
            
            void numberobj_16_value_bang() {
                number v = this->numberobj_16_value;
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Pitch/FreqCalc/number_obj-100"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_16_output_set(localvalue);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_03_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_03_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_03_value = localvalue;
            }
            
            void numberobj_04_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_04_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_04_value = localvalue;
            }
            
            void numberobj_05_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_05_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_05_value = localvalue;
            }
            
            void numberobj_06_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_06_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_06_value = localvalue;
            }
            
            void numberobj_07_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_07_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_07_value = localvalue;
            }
            
            void numberobj_08_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_08_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_08_value = localvalue;
            }
            
            void numberobj_09_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_09_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_09_value = localvalue;
            }
            
            void numberobj_10_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_10_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_10_value = localvalue;
            }
            
            void numberobj_11_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_11_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_11_value = localvalue;
            }
            
            void numberobj_12_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_12_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_12_value = localvalue;
            }
            
            void numberobj_13_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_13_value = localvalue;
            }
            
            void numberobj_14_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_14_value = localvalue;
            }
            
            void numberobj_15_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_15_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_15_value = localvalue;
            }
            
            void numberobj_16_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_16_value = localvalue;
            }
            
            void numberobj_03_init() {
                this->numberobj_03_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-118"), 1, this->_currentTime);
            }
            
            void numberobj_03_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_03_value;
            }
            
            void numberobj_03_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_03_value_set(preset["value"]);
            }
            
            void numberobj_04_init() {
                this->numberobj_04_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-107"), 1, this->_currentTime);
            }
            
            void numberobj_04_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_04_value;
            }
            
            void numberobj_04_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_04_value_set(preset["value"]);
            }
            
            void numberobj_05_init() {
                this->numberobj_05_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-90"), 1, this->_currentTime);
            }
            
            void numberobj_05_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_05_value;
            }
            
            void numberobj_05_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_05_value_set(preset["value"]);
            }
            
            void numberobj_06_init() {
                this->numberobj_06_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-81"), 1, this->_currentTime);
            }
            
            void numberobj_06_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_06_value;
            }
            
            void numberobj_06_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_06_value_set(preset["value"]);
            }
            
            void numberobj_07_init() {
                this->numberobj_07_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-78"), 1, this->_currentTime);
            }
            
            void numberobj_07_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_07_value;
            }
            
            void numberobj_07_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_07_value_set(preset["value"]);
            }
            
            void numberobj_08_init() {
                this->numberobj_08_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-71"), 1, this->_currentTime);
            }
            
            void numberobj_08_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_08_value;
            }
            
            void numberobj_08_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_08_value_set(preset["value"]);
            }
            
            void message_02_init() {
                this->message_02_set_set({1});
            }
            
            void numberobj_09_init() {
                this->numberobj_09_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-92"), 1, this->_currentTime);
            }
            
            void numberobj_09_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_09_value;
            }
            
            void numberobj_09_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_09_value_set(preset["value"]);
            }
            
            void numberobj_10_init() {
                this->numberobj_10_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-119"), 1, this->_currentTime);
            }
            
            void numberobj_10_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_10_value;
            }
            
            void numberobj_10_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_10_value_set(preset["value"]);
            }
            
            void numberobj_11_init() {
                this->numberobj_11_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-87"), 1, this->_currentTime);
            }
            
            void numberobj_11_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_11_value;
            }
            
            void numberobj_11_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_11_value_set(preset["value"]);
            }
            
            void numberobj_12_init() {
                this->numberobj_12_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-77"), 1, this->_currentTime);
            }
            
            void numberobj_12_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_12_value;
            }
            
            void numberobj_12_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_12_value_set(preset["value"]);
            }
            
            void numberobj_13_init() {
                this->numberobj_13_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-84"), 1, this->_currentTime);
            }
            
            void numberobj_13_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_13_value;
            }
            
            void numberobj_13_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_13_value_set(preset["value"]);
            }
            
            void numberobj_14_init() {
                this->numberobj_14_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-70"), 1, this->_currentTime);
            }
            
            void numberobj_14_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_14_value;
            }
            
            void numberobj_14_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_14_value_set(preset["value"]);
            }
            
            void numberobj_15_init() {
                this->numberobj_15_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-98"), 1, this->_currentTime);
            }
            
            void numberobj_15_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_15_value;
            }
            
            void numberobj_15_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_15_value_set(preset["value"]);
            }
            
            void numberobj_16_init() {
                this->numberobj_16_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/FreqCalc/number_obj-100"), 1, this->_currentTime);
            }
            
            void numberobj_16_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_16_value;
            }
            
            void numberobj_16_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_16_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                numberobj_03_value = 0;
                numberobj_03_value_setter(numberobj_03_value);
                expr_04_in1 = 0;
                expr_04_in2 = 1;
                expr_04_out1 = 0;
                numberobj_04_value = 0;
                numberobj_04_value_setter(numberobj_04_value);
                expr_05_in1 = 0;
                expr_05_in2 = 1;
                expr_05_out1 = 0;
                expr_06_in1 = 0;
                expr_06_out1 = 0;
                numberobj_05_value = 0;
                numberobj_05_value_setter(numberobj_05_value);
                numberobj_06_value = 0;
                numberobj_06_value_setter(numberobj_06_value);
                numberobj_07_value = 0;
                numberobj_07_value_setter(numberobj_07_value);
                expr_07_in1 = 0;
                expr_07_in2 = 0;
                expr_07_out1 = 0;
                expr_08_in1 = 0;
                expr_08_in2 = 100;
                expr_08_out1 = 0;
                numberobj_08_value = 0;
                numberobj_08_value_setter(numberobj_08_value);
                select_01_test1 = 0;
                expr_09_in1 = 0;
                expr_09_in2 = 1;
                expr_09_out1 = 0;
                numberobj_09_value = 0;
                numberobj_09_value_setter(numberobj_09_value);
                numberobj_10_value = 0;
                numberobj_10_value_setter(numberobj_10_value);
                expr_10_in1 = 0;
                expr_10_in2 = 1;
                expr_10_out1 = 0;
                expr_11_in1 = 0;
                expr_11_out1 = 0;
                numberobj_11_value = 0;
                numberobj_11_value_setter(numberobj_11_value);
                numberobj_12_value = 0;
                numberobj_12_value_setter(numberobj_12_value);
                expr_12_in1 = 0;
                expr_12_in2 = 0;
                expr_12_out1 = 0;
                numberobj_13_value = 0;
                numberobj_13_value_setter(numberobj_13_value);
                expr_13_in1 = 0;
                expr_13_in2 = 2;
                expr_13_out1 = 0;
                numberobj_14_value = 0;
                numberobj_14_value_setter(numberobj_14_value);
                numberobj_15_value = 0;
                numberobj_15_value_setter(numberobj_15_value);
                expr_14_in1 = 0;
                expr_14_in2 = 1000;
                expr_14_out1 = 0;
                numberobj_16_value = 0;
                numberobj_16_value_setter(numberobj_16_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_03_currentFormat = 6;
                numberobj_03_lastValue = 0;
                numberobj_04_currentFormat = 6;
                numberobj_04_lastValue = 0;
                numberobj_05_currentFormat = 6;
                numberobj_05_lastValue = 0;
                numberobj_06_currentFormat = 6;
                numberobj_06_lastValue = 0;
                numberobj_07_currentFormat = 6;
                numberobj_07_lastValue = 0;
                numberobj_08_currentFormat = 6;
                numberobj_08_lastValue = 0;
                numberobj_09_currentFormat = 6;
                numberobj_09_lastValue = 0;
                numberobj_10_currentFormat = 6;
                numberobj_10_lastValue = 0;
                numberobj_11_currentFormat = 6;
                numberobj_11_lastValue = 0;
                numberobj_12_currentFormat = 6;
                numberobj_12_lastValue = 0;
                numberobj_13_currentFormat = 6;
                numberobj_13_lastValue = 0;
                numberobj_14_currentFormat = 6;
                numberobj_14_lastValue = 0;
                numberobj_15_currentFormat = 6;
                numberobj_15_lastValue = 0;
                numberobj_16_currentFormat = 6;
                numberobj_16_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number numberobj_03_value;
                number expr_04_in1;
                number expr_04_in2;
                number expr_04_out1;
                number numberobj_04_value;
                number expr_05_in1;
                number expr_05_in2;
                number expr_05_out1;
                number expr_06_in1;
                number expr_06_out1;
                number numberobj_05_value;
                number numberobj_06_value;
                number numberobj_07_value;
                number expr_07_in1;
                number expr_07_in2;
                number expr_07_out1;
                number expr_08_in1;
                number expr_08_in2;
                number expr_08_out1;
                number numberobj_08_value;
                list message_02_set;
                number select_01_test1;
                number expr_09_in1;
                number expr_09_in2;
                number expr_09_out1;
                number numberobj_09_value;
                number numberobj_10_value;
                number expr_10_in1;
                number expr_10_in2;
                number expr_10_out1;
                number expr_11_in1;
                number expr_11_out1;
                number numberobj_11_value;
                number numberobj_12_value;
                number expr_12_in1;
                number expr_12_in2;
                number expr_12_out1;
                number numberobj_13_value;
                number expr_13_in1;
                number expr_13_in2;
                number expr_13_out1;
                number numberobj_14_value;
                number numberobj_15_value;
                number expr_14_in1;
                number expr_14_in2;
                number expr_14_out1;
                number numberobj_16_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_03_currentFormat;
                number numberobj_03_lastValue;
                Int numberobj_04_currentFormat;
                number numberobj_04_lastValue;
                Int numberobj_05_currentFormat;
                number numberobj_05_lastValue;
                Int numberobj_06_currentFormat;
                number numberobj_06_lastValue;
                Int numberobj_07_currentFormat;
                number numberobj_07_lastValue;
                Int numberobj_08_currentFormat;
                number numberobj_08_lastValue;
                Int numberobj_09_currentFormat;
                number numberobj_09_lastValue;
                Int numberobj_10_currentFormat;
                number numberobj_10_lastValue;
                Int numberobj_11_currentFormat;
                number numberobj_11_lastValue;
                Int numberobj_12_currentFormat;
                number numberobj_12_lastValue;
                Int numberobj_13_currentFormat;
                number numberobj_13_lastValue;
                Int numberobj_14_currentFormat;
                number numberobj_14_lastValue;
                Int numberobj_15_currentFormat;
                number numberobj_15_lastValue;
                Int numberobj_16_currentFormat;
                number numberobj_16_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_51 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_61;
            friend class RnboBubble;
            
            public:
            
            RNBOSubpatcher_51()
            {
            }
            
            ~RNBOSubpatcher_51()
            {
            }
            
            virtual RNBOSubpatcher_61* getPatcher() const {
                return static_cast<RNBOSubpatcher_61 *>(_parentPatcher);
            }
            
            RnboBubble* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -1494586265, false);
                getEngine()->flushClockEvents(this, 2098551528, false);
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                this->scopetilde_01_perform(in2, this->zeroBuffer, n);
                this->welch_tilde_01_perform(in2, this->signals[0], n);
                this->scopetilde_03_perform(this->signals[0], this->zeroBuffer, n);
                this->dspexpr_19_perform(in2, this->dspexpr_19_in2, this->signals[1], n);
            
                this->wrap_tilde_01_perform(
                    this->signals[1],
                    this->wrap_tilde_01_low,
                    this->wrap_tilde_01_high,
                    this->signals[2],
                    n
                );
            
                this->welch_tilde_02_perform(this->signals[2], this->signals[1], n);
                this->scopetilde_02_perform(this->signals[1], this->zeroBuffer, n);
                this->dspexpr_18_perform(this->signals[2], in3, this->signals[3], n);
                this->numbertilde_04_perform(this->signals[3], this->dummyBuffer, n);
                this->delaytilde_02_perform(this->signals[3], in1, this->signals[2], n);
                this->dspexpr_17_perform(this->signals[2], this->signals[1], this->signals[3], n);
                this->dspexpr_16_perform(in2, in3, this->signals[1], n);
                this->numbertilde_03_perform(this->signals[1], this->dummyBuffer, n);
                this->delaytilde_01_perform(this->signals[1], in1, this->signals[2], n);
                this->dspexpr_15_perform(this->signals[2], this->signals[0], this->signals[1], n);
                this->dspexpr_14_perform(this->signals[1], this->signals[3], out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 4; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->scopetilde_01_dspsetup(forceDSPSetup);
                this->scopetilde_03_dspsetup(forceDSPSetup);
                this->scopetilde_02_dspsetup(forceDSPSetup);
                this->numbertilde_04_dspsetup(forceDSPSetup);
                this->delaytilde_02_dspsetup(forceDSPSetup);
                this->numbertilde_03_dspsetup(forceDSPSetup);
                this->delaytilde_01_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -1494586265:
                    {
                    this->numbertilde_04_value_set(value);
                    break;
                    }
                case 2098551528:
                    {
                    this->numbertilde_03_value_set(value);
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("Pitch/PitchShift~[1]/number~_obj-64") == objectId)
                        this->numbertilde_03_sig_number_set(payload);
            
                    if (TAG("Pitch/PitchShift~[1]/number~_obj-65") == objectId)
                        this->numbertilde_04_sig_number_set(payload);
            
                    break;
                    }
                case TAG("mode"):
                    {
                    if (TAG("Pitch/PitchShift~[1]/number~_obj-64") == objectId)
                        this->numbertilde_03_mode_set(payload);
            
                    if (TAG("Pitch/PitchShift~[1]/number~_obj-65") == objectId)
                        this->numbertilde_04_mode_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("Pitch/PitchShift~[1]/number~_obj-64") == objectId)
                        this->numbertilde_03_sig_list_set(payload);
            
                    if (TAG("Pitch/PitchShift~[1]/number~_obj-65") == objectId)
                        this->numbertilde_04_sig_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("monitor"):
                    {
                    return "monitor";
                    }
                case TAG("Pitch/PitchShift~[1]/number~_obj-64"):
                    {
                    return "Pitch/PitchShift~[1]/number~_obj-64";
                    }
                case TAG("assign"):
                    {
                    return "assign";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Pitch/PitchShift~[1]/scope~_obj-62"):
                    {
                    return "Pitch/PitchShift~[1]/scope~_obj-62";
                    }
                case TAG("Pitch/PitchShift~[1]/number~_obj-65"):
                    {
                    return "Pitch/PitchShift~[1]/number~_obj-65";
                    }
                case TAG("Pitch/PitchShift~[1]/scope~_obj-60"):
                    {
                    return "Pitch/PitchShift~[1]/scope~_obj-60";
                    }
                case TAG("Pitch/PitchShift~[1]/scope~_obj-61"):
                    {
                    return "Pitch/PitchShift~[1]/scope~_obj-61";
                    }
                case TAG("sig"):
                    {
                    return "sig";
                    }
                case TAG("mode"):
                    {
                    return "mode";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 0:
                    {
                    return addressOf(this->delaytilde_01_del_bufferobj);
                    break;
                    }
                case 1:
                    {
                    return addressOf(this->delaytilde_02_del_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 2;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
                }
            
                if (index == 1) {
                    this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
                }
            }
            
            void initialize() {
                this->delaytilde_01_del_bufferobj = initDataRef("delaytilde_01_del_bufferobj", true, nullptr, "buffer~");
                this->delaytilde_02_del_bufferobj = initDataRef("delaytilde_02_del_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->delaytilde_01_del_bufferobj->setIndex(0);
                this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
                this->delaytilde_02_del_bufferobj->setIndex(1);
                this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
            }
            
            protected:
            
            void numbertilde_03_sig_number_set(number v) {
                this->numbertilde_03_outValue = v;
            }
            
            void numbertilde_03_sig_list_set(const list& v) {
                this->numbertilde_03_outValue = v[0];
            }
            
            void numbertilde_03_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_03_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_03_currentMode = 1;
                }
            }
            
            void numbertilde_04_sig_number_set(number v) {
                this->numbertilde_04_outValue = v;
            }
            
            void numbertilde_04_sig_list_set(const list& v) {
                this->numbertilde_04_outValue = v[0];
            }
            
            void numbertilde_04_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_04_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_04_currentMode = 1;
                }
            }
            
            void numbertilde_04_value_set(number ) {}
            
            void numbertilde_03_value_set(number ) {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 3;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->delaytilde_01_del_init();
                this->numbertilde_03_init();
                this->delaytilde_02_del_init();
                this->numbertilde_04_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->delaytilde_01_del_buffer = this->delaytilde_01_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_01_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_01_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_01_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(0);
                }
            
                this->delaytilde_02_del_buffer = this->delaytilde_02_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_02_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_02_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_02_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(1);
                }
            }
            
            void scopetilde_01_perform(const SampleValue * x, const SampleValue * y, Index n) {
                auto __scopetilde_01_ysign = this->scopetilde_01_ysign;
                auto __scopetilde_01_ymonitorvalue = this->scopetilde_01_ymonitorvalue;
                auto __scopetilde_01_xsign = this->scopetilde_01_xsign;
                auto __scopetilde_01_xmonitorvalue = this->scopetilde_01_xmonitorvalue;
                auto __scopetilde_01_mode = this->scopetilde_01_mode;
            
                for (Index i = 0; i < n; i++) {
                    number xval = x[(Index)i];
                    number yval = y[(Index)i];
            
                    if (__scopetilde_01_mode == 1) {
                        number xabsval = rnbo_abs(xval);
            
                        if (xabsval > __scopetilde_01_xmonitorvalue) {
                            __scopetilde_01_xmonitorvalue = xabsval;
                            __scopetilde_01_xsign = (xval < 0 ? -1 : 1);
                        }
            
                        number yabsval = rnbo_abs(yval);
            
                        if (yabsval > __scopetilde_01_ymonitorvalue) {
                            __scopetilde_01_ymonitorvalue = yabsval;
                            __scopetilde_01_ysign = (yval < 0 ? -1 : 1);
                        }
                    } else {
                        __scopetilde_01_xmonitorvalue = xval;
                        __scopetilde_01_xsign = 1;
                        __scopetilde_01_ymonitorvalue = yval;
                        __scopetilde_01_ysign = 1;
                    }
            
                    this->scopetilde_01_effectiveCount--;
            
                    if (this->scopetilde_01_effectiveCount <= 0) {
                        this->scopetilde_01_updateEffectiveCount();
                        this->scopetilde_01_monitorbuffer->push(__scopetilde_01_xmonitorvalue * __scopetilde_01_xsign);
            
                        if (__scopetilde_01_mode == 1)
                            __scopetilde_01_xmonitorvalue = 0;
            
                        if (this->scopetilde_01_monitorbuffer->length >= 128 * (1 + 0)) {
                            this->getEngine()->sendListMessage(
                                TAG("monitor"),
                                TAG("Pitch/PitchShift~[1]/scope~_obj-62"),
                                this->scopetilde_01_monitorbuffer,
                                this->_currentTime
                            );;
            
                            this->scopetilde_01_monitorbuffer->length = 0;
                        }
                    }
                }
            
                this->scopetilde_01_xmonitorvalue = __scopetilde_01_xmonitorvalue;
                this->scopetilde_01_xsign = __scopetilde_01_xsign;
                this->scopetilde_01_ymonitorvalue = __scopetilde_01_ymonitorvalue;
                this->scopetilde_01_ysign = __scopetilde_01_ysign;
            }
            
            void welch_tilde_01_perform(const Sample * x, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __x = x[(Index)i];
                    __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                    number w = (__x - 0.5) * 2;
                    out1[(Index)i] = 1 - w * w;
                }
            }
            
            void scopetilde_03_perform(const SampleValue * x, const SampleValue * y, Index n) {
                auto __scopetilde_03_ysign = this->scopetilde_03_ysign;
                auto __scopetilde_03_ymonitorvalue = this->scopetilde_03_ymonitorvalue;
                auto __scopetilde_03_xsign = this->scopetilde_03_xsign;
                auto __scopetilde_03_xmonitorvalue = this->scopetilde_03_xmonitorvalue;
                auto __scopetilde_03_mode = this->scopetilde_03_mode;
            
                for (Index i = 0; i < n; i++) {
                    number xval = x[(Index)i];
                    number yval = y[(Index)i];
            
                    if (__scopetilde_03_mode == 1) {
                        number xabsval = rnbo_abs(xval);
            
                        if (xabsval > __scopetilde_03_xmonitorvalue) {
                            __scopetilde_03_xmonitorvalue = xabsval;
                            __scopetilde_03_xsign = (xval < 0 ? -1 : 1);
                        }
            
                        number yabsval = rnbo_abs(yval);
            
                        if (yabsval > __scopetilde_03_ymonitorvalue) {
                            __scopetilde_03_ymonitorvalue = yabsval;
                            __scopetilde_03_ysign = (yval < 0 ? -1 : 1);
                        }
                    } else {
                        __scopetilde_03_xmonitorvalue = xval;
                        __scopetilde_03_xsign = 1;
                        __scopetilde_03_ymonitorvalue = yval;
                        __scopetilde_03_ysign = 1;
                    }
            
                    this->scopetilde_03_effectiveCount--;
            
                    if (this->scopetilde_03_effectiveCount <= 0) {
                        this->scopetilde_03_updateEffectiveCount();
                        this->scopetilde_03_monitorbuffer->push(__scopetilde_03_xmonitorvalue * __scopetilde_03_xsign);
            
                        if (__scopetilde_03_mode == 1)
                            __scopetilde_03_xmonitorvalue = 0;
            
                        if (this->scopetilde_03_monitorbuffer->length >= 128 * (1 + 0)) {
                            this->getEngine()->sendListMessage(
                                TAG("monitor"),
                                TAG("Pitch/PitchShift~[1]/scope~_obj-61"),
                                this->scopetilde_03_monitorbuffer,
                                this->_currentTime
                            );;
            
                            this->scopetilde_03_monitorbuffer->length = 0;
                        }
                    }
                }
            
                this->scopetilde_03_xmonitorvalue = __scopetilde_03_xmonitorvalue;
                this->scopetilde_03_xsign = __scopetilde_03_xsign;
                this->scopetilde_03_ymonitorvalue = __scopetilde_03_ymonitorvalue;
                this->scopetilde_03_ysign = __scopetilde_03_ysign;
            }
            
            void dspexpr_19_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + -0.5;//#map:_###_obj_###_:1
                }
            }
            
            void wrap_tilde_01_perform(const Sample * x, number low, number high, SampleValue * out1, Index n) {
                RNBO_UNUSED(high);
                RNBO_UNUSED(low);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number lo;
                    number hi;
                    lo = 0;
                    hi = 1;
                    number range = hi - lo;
            
                    if (x[(Index)i] >= lo && x[(Index)i] < hi) {
                        out1[(Index)i] = x[(Index)i];
                        continue;
                    }
            
                    if (range <= 0.000000001) {
                        out1[(Index)i] = lo;
                        continue;
                    }
            
                    long numWraps = (long)(trunc((x[(Index)i] - lo) / range));
                    numWraps = numWraps - ((x[(Index)i] < lo ? 1 : 0));
                    number result = x[(Index)i] - range * numWraps;
            
                    if (result >= hi) {
                        out1[(Index)i] = result - range;
                        continue;
                    } else {
                        out1[(Index)i] = result;
                        continue;
                    }
                }
            }
            
            void welch_tilde_02_perform(const Sample * x, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __x = x[(Index)i];
                    __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                    number w = (__x - 0.5) * 2;
                    out1[(Index)i] = 1 - w * w;
                }
            }
            
            void scopetilde_02_perform(const SampleValue * x, const SampleValue * y, Index n) {
                auto __scopetilde_02_ysign = this->scopetilde_02_ysign;
                auto __scopetilde_02_ymonitorvalue = this->scopetilde_02_ymonitorvalue;
                auto __scopetilde_02_xsign = this->scopetilde_02_xsign;
                auto __scopetilde_02_xmonitorvalue = this->scopetilde_02_xmonitorvalue;
                auto __scopetilde_02_mode = this->scopetilde_02_mode;
            
                for (Index i = 0; i < n; i++) {
                    number xval = x[(Index)i];
                    number yval = y[(Index)i];
            
                    if (__scopetilde_02_mode == 1) {
                        number xabsval = rnbo_abs(xval);
            
                        if (xabsval > __scopetilde_02_xmonitorvalue) {
                            __scopetilde_02_xmonitorvalue = xabsval;
                            __scopetilde_02_xsign = (xval < 0 ? -1 : 1);
                        }
            
                        number yabsval = rnbo_abs(yval);
            
                        if (yabsval > __scopetilde_02_ymonitorvalue) {
                            __scopetilde_02_ymonitorvalue = yabsval;
                            __scopetilde_02_ysign = (yval < 0 ? -1 : 1);
                        }
                    } else {
                        __scopetilde_02_xmonitorvalue = xval;
                        __scopetilde_02_xsign = 1;
                        __scopetilde_02_ymonitorvalue = yval;
                        __scopetilde_02_ysign = 1;
                    }
            
                    this->scopetilde_02_effectiveCount--;
            
                    if (this->scopetilde_02_effectiveCount <= 0) {
                        this->scopetilde_02_updateEffectiveCount();
                        this->scopetilde_02_monitorbuffer->push(__scopetilde_02_xmonitorvalue * __scopetilde_02_xsign);
            
                        if (__scopetilde_02_mode == 1)
                            __scopetilde_02_xmonitorvalue = 0;
            
                        if (this->scopetilde_02_monitorbuffer->length >= 128 * (1 + 0)) {
                            this->getEngine()->sendListMessage(
                                TAG("monitor"),
                                TAG("Pitch/PitchShift~[1]/scope~_obj-60"),
                                this->scopetilde_02_monitorbuffer,
                                this->_currentTime
                            );;
            
                            this->scopetilde_02_monitorbuffer->length = 0;
                        }
                    }
                }
            
                this->scopetilde_02_xmonitorvalue = __scopetilde_02_xmonitorvalue;
                this->scopetilde_02_xsign = __scopetilde_02_xsign;
                this->scopetilde_02_ymonitorvalue = __scopetilde_02_ymonitorvalue;
                this->scopetilde_02_ysign = __scopetilde_02_ysign;
            }
            
            void dspexpr_18_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void numbertilde_04_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_04_currentIntervalInSamples = this->numbertilde_04_currentIntervalInSamples;
                auto __numbertilde_04_lastValue = this->numbertilde_04_lastValue;
                auto __numbertilde_04_currentInterval = this->numbertilde_04_currentInterval;
                auto __numbertilde_04_rampInSamples = this->numbertilde_04_rampInSamples;
                auto __numbertilde_04_outValue = this->numbertilde_04_outValue;
                auto __numbertilde_04_currentMode = this->numbertilde_04_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_04_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_04_smooth_next(
                            __numbertilde_04_outValue,
                            __numbertilde_04_rampInSamples,
                            __numbertilde_04_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_04_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_04_lastValue && __numbertilde_04_currentInterval <= 0) {
                    __numbertilde_04_currentInterval = __numbertilde_04_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1494586265,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_04_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Pitch/PitchShift~[1]/number~_obj-65"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_04_currentInterval = __numbertilde_04_currentInterval;
                this->numbertilde_04_lastValue = __numbertilde_04_lastValue;
            }
            
            void delaytilde_02_perform(
                const Sample * delay,
                const SampleValue * input,
                SampleValue * output,
                Index n
            ) {
                auto __delaytilde_02_crossfadeDelay = this->delaytilde_02_crossfadeDelay;
                auto __delaytilde_02_rampInSamples = this->delaytilde_02_rampInSamples;
                auto __delaytilde_02_ramp = this->delaytilde_02_ramp;
                auto __delaytilde_02_lastDelay = this->delaytilde_02_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_02_lastDelay == -1) {
                        __delaytilde_02_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_02_ramp > 0) {
                        number factor = __delaytilde_02_ramp / __delaytilde_02_rampInSamples;
                        output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0) * factor + this->delaytilde_02_del_read(__delaytilde_02_lastDelay, 0) * (1. - factor);
                        __delaytilde_02_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_02_lastDelay) {
                            __delaytilde_02_ramp = __delaytilde_02_rampInSamples;
                            __delaytilde_02_crossfadeDelay = __delaytilde_02_lastDelay;
                            __delaytilde_02_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0);
                            __delaytilde_02_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_02_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_02_del_write(input[(Index)i]);
                    this->delaytilde_02_del_step();
                }
            
                this->delaytilde_02_lastDelay = __delaytilde_02_lastDelay;
                this->delaytilde_02_ramp = __delaytilde_02_ramp;
                this->delaytilde_02_crossfadeDelay = __delaytilde_02_crossfadeDelay;
            }
            
            void dspexpr_17_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_16_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void numbertilde_03_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_03_currentIntervalInSamples = this->numbertilde_03_currentIntervalInSamples;
                auto __numbertilde_03_lastValue = this->numbertilde_03_lastValue;
                auto __numbertilde_03_currentInterval = this->numbertilde_03_currentInterval;
                auto __numbertilde_03_rampInSamples = this->numbertilde_03_rampInSamples;
                auto __numbertilde_03_outValue = this->numbertilde_03_outValue;
                auto __numbertilde_03_currentMode = this->numbertilde_03_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_03_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_03_smooth_next(
                            __numbertilde_03_outValue,
                            __numbertilde_03_rampInSamples,
                            __numbertilde_03_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_03_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_03_lastValue && __numbertilde_03_currentInterval <= 0) {
                    __numbertilde_03_currentInterval = __numbertilde_03_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        2098551528,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_03_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Pitch/PitchShift~[1]/number~_obj-64"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_03_currentInterval = __numbertilde_03_currentInterval;
                this->numbertilde_03_lastValue = __numbertilde_03_lastValue;
            }
            
            void delaytilde_01_perform(
                const Sample * delay,
                const SampleValue * input,
                SampleValue * output,
                Index n
            ) {
                auto __delaytilde_01_crossfadeDelay = this->delaytilde_01_crossfadeDelay;
                auto __delaytilde_01_rampInSamples = this->delaytilde_01_rampInSamples;
                auto __delaytilde_01_ramp = this->delaytilde_01_ramp;
                auto __delaytilde_01_lastDelay = this->delaytilde_01_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_01_lastDelay == -1) {
                        __delaytilde_01_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_01_ramp > 0) {
                        number factor = __delaytilde_01_ramp / __delaytilde_01_rampInSamples;
                        output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0) * factor + this->delaytilde_01_del_read(__delaytilde_01_lastDelay, 0) * (1. - factor);
                        __delaytilde_01_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_01_lastDelay) {
                            __delaytilde_01_ramp = __delaytilde_01_rampInSamples;
                            __delaytilde_01_crossfadeDelay = __delaytilde_01_lastDelay;
                            __delaytilde_01_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0);
                            __delaytilde_01_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_01_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_01_del_write(input[(Index)i]);
                    this->delaytilde_01_del_step();
                }
            
                this->delaytilde_01_lastDelay = __delaytilde_01_lastDelay;
                this->delaytilde_01_ramp = __delaytilde_01_ramp;
                this->delaytilde_01_crossfadeDelay = __delaytilde_01_crossfadeDelay;
            }
            
            void dspexpr_15_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_14_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void delaytilde_01_del_step() {
                this->delaytilde_01_del_reader++;
            
                if (this->delaytilde_01_del_reader >= (int)(this->delaytilde_01_del_buffer->getSize()))
                    this->delaytilde_01_del_reader = 0;
            }
            
            number delaytilde_01_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_01_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                );
            }
            
            void delaytilde_01_del_write(number v) {
                this->delaytilde_01_del_writer = this->delaytilde_01_del_reader;
                this->delaytilde_01_del_buffer[(Index)this->delaytilde_01_del_writer] = v;
            }
            
            number delaytilde_01_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_01_del__maxdelay : size);
                number val = this->delaytilde_01_del_read(effectiveSize, 0);
                this->delaytilde_01_del_write(v);
                this->delaytilde_01_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_01_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_01_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_01_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_01_del_init() {
                auto result = this->delaytilde_01_del_calcSizeInSamples();
                this->delaytilde_01_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_01_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_01_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_01_del_clear() {
                this->delaytilde_01_del_buffer->setZero();
            }
            
            void delaytilde_01_del_reset() {
                auto result = this->delaytilde_01_del_calcSizeInSamples();
                this->delaytilde_01_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_01_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_01_del_buffer);
                this->delaytilde_01_del_wrap = this->delaytilde_01_del_buffer->getSize() - 1;
                this->delaytilde_01_del_clear();
            
                if (this->delaytilde_01_del_reader >= this->delaytilde_01_del__maxdelay || this->delaytilde_01_del_writer >= this->delaytilde_01_del__maxdelay) {
                    this->delaytilde_01_del_reader = 0;
                    this->delaytilde_01_del_writer = 0;
                }
            }
            
            void delaytilde_01_del_dspsetup() {
                this->delaytilde_01_del_reset();
            }
            
            number delaytilde_01_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                return samplerate;
            }
            
            number delaytilde_01_del_size() {
                return this->delaytilde_01_del__maxdelay;
            }
            
            void delaytilde_01_dspsetup(bool force) {
                if ((bool)(this->delaytilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_01_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_01_lastDelay = -1;
                this->delaytilde_01_setupDone = true;
                this->delaytilde_01_del_dspsetup();
            }
            
            number numbertilde_03_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_03_smooth_d_prev);
                this->numbertilde_03_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_03_smooth_d_dspsetup() {
                this->numbertilde_03_smooth_d_reset();
            }
            
            void numbertilde_03_smooth_d_reset() {
                this->numbertilde_03_smooth_d_prev = 0;
            }
            
            number numbertilde_03_smooth_next(number x, number up, number down) {
                if (this->numbertilde_03_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_03_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_03_smooth_index = _up;
                        this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _up;
                    } else if (x < this->numbertilde_03_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_03_smooth_index = _down;
                        this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_03_smooth_index > 0) {
                    this->numbertilde_03_smooth_prev += this->numbertilde_03_smooth_increment;
                    this->numbertilde_03_smooth_index -= 1;
                } else {
                    this->numbertilde_03_smooth_prev = x;
                }
            
                return this->numbertilde_03_smooth_prev;
            }
            
            void numbertilde_03_smooth_reset() {
                this->numbertilde_03_smooth_prev = 0;
                this->numbertilde_03_smooth_index = 0;
                this->numbertilde_03_smooth_increment = 0;
                this->numbertilde_03_smooth_d_reset();
            }
            
            void numbertilde_03_init() {
                this->numbertilde_03_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Pitch/PitchShift~[1]/number~_obj-64"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_03_dspsetup(bool force) {
                if ((bool)(this->numbertilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_03_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_03_currentInterval = this->numbertilde_03_currentIntervalInSamples;
                this->numbertilde_03_rampInSamples = this->mstosamps(this->numbertilde_03_ramp);
                this->numbertilde_03_setupDone = true;
                this->numbertilde_03_smooth_d_dspsetup();
            }
            
            void scopetilde_01_updateEffectiveCount() {
                number effectiveCount = 256 * 1 + 256 * 0;
                this->scopetilde_01_effectiveCount = this->maximum(effectiveCount, 256);
            }
            
            void scopetilde_01_dspsetup(bool force) {
                if ((bool)(this->scopetilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                {
                    this->scopetilde_01_mode = 1;
                }
            
                this->getEngine()->sendListMessage(
                    TAG("setup"),
                    TAG("Pitch/PitchShift~[1]/scope~_obj-62"),
                    {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_01_mode},
                    this->_currentTime
                );;
            
                this->scopetilde_01_updateEffectiveCount();
                this->scopetilde_01_setupDone = true;
            }
            
            void delaytilde_02_del_step() {
                this->delaytilde_02_del_reader++;
            
                if (this->delaytilde_02_del_reader >= (int)(this->delaytilde_02_del_buffer->getSize()))
                    this->delaytilde_02_del_reader = 0;
            }
            
            number delaytilde_02_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_02_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                );
            }
            
            void delaytilde_02_del_write(number v) {
                this->delaytilde_02_del_writer = this->delaytilde_02_del_reader;
                this->delaytilde_02_del_buffer[(Index)this->delaytilde_02_del_writer] = v;
            }
            
            number delaytilde_02_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_02_del__maxdelay : size);
                number val = this->delaytilde_02_del_read(effectiveSize, 0);
                this->delaytilde_02_del_write(v);
                this->delaytilde_02_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_02_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_02_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_02_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_02_del_init() {
                auto result = this->delaytilde_02_del_calcSizeInSamples();
                this->delaytilde_02_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_02_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_02_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_02_del_clear() {
                this->delaytilde_02_del_buffer->setZero();
            }
            
            void delaytilde_02_del_reset() {
                auto result = this->delaytilde_02_del_calcSizeInSamples();
                this->delaytilde_02_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_02_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_02_del_buffer);
                this->delaytilde_02_del_wrap = this->delaytilde_02_del_buffer->getSize() - 1;
                this->delaytilde_02_del_clear();
            
                if (this->delaytilde_02_del_reader >= this->delaytilde_02_del__maxdelay || this->delaytilde_02_del_writer >= this->delaytilde_02_del__maxdelay) {
                    this->delaytilde_02_del_reader = 0;
                    this->delaytilde_02_del_writer = 0;
                }
            }
            
            void delaytilde_02_del_dspsetup() {
                this->delaytilde_02_del_reset();
            }
            
            number delaytilde_02_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                return samplerate;
            }
            
            number delaytilde_02_del_size() {
                return this->delaytilde_02_del__maxdelay;
            }
            
            void delaytilde_02_dspsetup(bool force) {
                if ((bool)(this->delaytilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_02_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_02_lastDelay = -1;
                this->delaytilde_02_setupDone = true;
                this->delaytilde_02_del_dspsetup();
            }
            
            number numbertilde_04_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_04_smooth_d_prev);
                this->numbertilde_04_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_04_smooth_d_dspsetup() {
                this->numbertilde_04_smooth_d_reset();
            }
            
            void numbertilde_04_smooth_d_reset() {
                this->numbertilde_04_smooth_d_prev = 0;
            }
            
            number numbertilde_04_smooth_next(number x, number up, number down) {
                if (this->numbertilde_04_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_04_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_04_smooth_index = _up;
                        this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _up;
                    } else if (x < this->numbertilde_04_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_04_smooth_index = _down;
                        this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_04_smooth_index > 0) {
                    this->numbertilde_04_smooth_prev += this->numbertilde_04_smooth_increment;
                    this->numbertilde_04_smooth_index -= 1;
                } else {
                    this->numbertilde_04_smooth_prev = x;
                }
            
                return this->numbertilde_04_smooth_prev;
            }
            
            void numbertilde_04_smooth_reset() {
                this->numbertilde_04_smooth_prev = 0;
                this->numbertilde_04_smooth_index = 0;
                this->numbertilde_04_smooth_increment = 0;
                this->numbertilde_04_smooth_d_reset();
            }
            
            void numbertilde_04_init() {
                this->numbertilde_04_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Pitch/PitchShift~[1]/number~_obj-65"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_04_dspsetup(bool force) {
                if ((bool)(this->numbertilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_04_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_04_currentInterval = this->numbertilde_04_currentIntervalInSamples;
                this->numbertilde_04_rampInSamples = this->mstosamps(this->numbertilde_04_ramp);
                this->numbertilde_04_setupDone = true;
                this->numbertilde_04_smooth_d_dspsetup();
            }
            
            void scopetilde_02_updateEffectiveCount() {
                number effectiveCount = 256 * 1 + 256 * 0;
                this->scopetilde_02_effectiveCount = this->maximum(effectiveCount, 256);
            }
            
            void scopetilde_02_dspsetup(bool force) {
                if ((bool)(this->scopetilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                {
                    this->scopetilde_02_mode = 1;
                }
            
                this->getEngine()->sendListMessage(
                    TAG("setup"),
                    TAG("Pitch/PitchShift~[1]/scope~_obj-60"),
                    {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_02_mode},
                    this->_currentTime
                );;
            
                this->scopetilde_02_updateEffectiveCount();
                this->scopetilde_02_setupDone = true;
            }
            
            void scopetilde_03_updateEffectiveCount() {
                number effectiveCount = 256 * 1 + 256 * 0;
                this->scopetilde_03_effectiveCount = this->maximum(effectiveCount, 256);
            }
            
            void scopetilde_03_dspsetup(bool force) {
                if ((bool)(this->scopetilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                {
                    this->scopetilde_03_mode = 1;
                }
            
                this->getEngine()->sendListMessage(
                    TAG("setup"),
                    TAG("Pitch/PitchShift~[1]/scope~_obj-61"),
                    {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_03_mode},
                    this->_currentTime
                );;
            
                this->scopetilde_03_updateEffectiveCount();
                this->scopetilde_03_setupDone = true;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_14_in1 = 0;
                dspexpr_14_in2 = 0;
                dspexpr_15_in1 = 0;
                dspexpr_15_in2 = 0;
                delaytilde_01_delay = 0;
                numbertilde_03_input_number = 0;
                numbertilde_03_ramp = 0;
                dspexpr_16_in1 = 0;
                dspexpr_16_in2 = 0;
                welch_tilde_01_x = 0;
                dspexpr_17_in1 = 0;
                dspexpr_17_in2 = 0;
                delaytilde_02_delay = 0;
                numbertilde_04_input_number = 0;
                numbertilde_04_ramp = 0;
                dspexpr_18_in1 = 0;
                dspexpr_18_in2 = 0;
                welch_tilde_02_x = 0;
                wrap_tilde_01_x = 0;
                wrap_tilde_01_low = 0;
                wrap_tilde_01_high = 1;
                dspexpr_19_in1 = 0;
                dspexpr_19_in2 = -0.5;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                delaytilde_01_lastDelay = -1;
                delaytilde_01_crossfadeDelay = 0;
                delaytilde_01_ramp = 0;
                delaytilde_01_rampInSamples = 0;
                delaytilde_01_del__maxdelay = 0;
                delaytilde_01_del_sizemode = 0;
                delaytilde_01_del_wrap = 0;
                delaytilde_01_del_reader = 0;
                delaytilde_01_del_writer = 0;
                delaytilde_01_setupDone = false;
                numbertilde_03_currentInterval = 0;
                numbertilde_03_currentIntervalInSamples = 0;
                numbertilde_03_lastValue = 0;
                numbertilde_03_outValue = 0;
                numbertilde_03_rampInSamples = 0;
                numbertilde_03_currentMode = 0;
                numbertilde_03_smooth_d_prev = 0;
                numbertilde_03_smooth_prev = 0;
                numbertilde_03_smooth_index = 0;
                numbertilde_03_smooth_increment = 0;
                numbertilde_03_setupDone = false;
                scopetilde_01_lastValue = 0;
                scopetilde_01_effectiveCount = 256;
                scopetilde_01_xsign = 1;
                scopetilde_01_ysign = 1;
                scopetilde_01_mode = 0;
                scopetilde_01_setupDone = false;
                delaytilde_02_lastDelay = -1;
                delaytilde_02_crossfadeDelay = 0;
                delaytilde_02_ramp = 0;
                delaytilde_02_rampInSamples = 0;
                delaytilde_02_del__maxdelay = 0;
                delaytilde_02_del_sizemode = 0;
                delaytilde_02_del_wrap = 0;
                delaytilde_02_del_reader = 0;
                delaytilde_02_del_writer = 0;
                delaytilde_02_setupDone = false;
                numbertilde_04_currentInterval = 0;
                numbertilde_04_currentIntervalInSamples = 0;
                numbertilde_04_lastValue = 0;
                numbertilde_04_outValue = 0;
                numbertilde_04_rampInSamples = 0;
                numbertilde_04_currentMode = 0;
                numbertilde_04_smooth_d_prev = 0;
                numbertilde_04_smooth_prev = 0;
                numbertilde_04_smooth_index = 0;
                numbertilde_04_smooth_increment = 0;
                numbertilde_04_setupDone = false;
                scopetilde_02_lastValue = 0;
                scopetilde_02_effectiveCount = 256;
                scopetilde_02_xsign = 1;
                scopetilde_02_ysign = 1;
                scopetilde_02_mode = 0;
                scopetilde_02_setupDone = false;
                scopetilde_03_lastValue = 0;
                scopetilde_03_effectiveCount = 256;
                scopetilde_03_xsign = 1;
                scopetilde_03_ysign = 1;
                scopetilde_03_mode = 0;
                scopetilde_03_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_14_in1;
                number dspexpr_14_in2;
                number dspexpr_15_in1;
                number dspexpr_15_in2;
                number delaytilde_01_delay;
                number numbertilde_03_input_number;
                number numbertilde_03_ramp;
                number dspexpr_16_in1;
                number dspexpr_16_in2;
                number welch_tilde_01_x;
                number dspexpr_17_in1;
                number dspexpr_17_in2;
                number delaytilde_02_delay;
                number numbertilde_04_input_number;
                number numbertilde_04_ramp;
                number dspexpr_18_in1;
                number dspexpr_18_in2;
                number welch_tilde_02_x;
                number wrap_tilde_01_x;
                number wrap_tilde_01_low;
                number wrap_tilde_01_high;
                number dspexpr_19_in1;
                number dspexpr_19_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[4];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number delaytilde_01_lastDelay;
                number delaytilde_01_crossfadeDelay;
                number delaytilde_01_ramp;
                long delaytilde_01_rampInSamples;
                Float64BufferRef delaytilde_01_del_buffer;
                Index delaytilde_01_del__maxdelay;
                Int delaytilde_01_del_sizemode;
                Index delaytilde_01_del_wrap;
                Int delaytilde_01_del_reader;
                Int delaytilde_01_del_writer;
                bool delaytilde_01_setupDone;
                SampleIndex numbertilde_03_currentInterval;
                SampleIndex numbertilde_03_currentIntervalInSamples;
                number numbertilde_03_lastValue;
                number numbertilde_03_outValue;
                number numbertilde_03_rampInSamples;
                Int numbertilde_03_currentMode;
                number numbertilde_03_smooth_d_prev;
                number numbertilde_03_smooth_prev;
                number numbertilde_03_smooth_index;
                number numbertilde_03_smooth_increment;
                bool numbertilde_03_setupDone;
                number scopetilde_01_lastValue;
                number scopetilde_01_effectiveCount;
                number scopetilde_01_xmonitorvalue;
                number scopetilde_01_ymonitorvalue;
                list scopetilde_01_monitorbuffer;
                number scopetilde_01_xsign;
                number scopetilde_01_ysign;
                Int scopetilde_01_mode;
                bool scopetilde_01_setupDone;
                number delaytilde_02_lastDelay;
                number delaytilde_02_crossfadeDelay;
                number delaytilde_02_ramp;
                long delaytilde_02_rampInSamples;
                Float64BufferRef delaytilde_02_del_buffer;
                Index delaytilde_02_del__maxdelay;
                Int delaytilde_02_del_sizemode;
                Index delaytilde_02_del_wrap;
                Int delaytilde_02_del_reader;
                Int delaytilde_02_del_writer;
                bool delaytilde_02_setupDone;
                SampleIndex numbertilde_04_currentInterval;
                SampleIndex numbertilde_04_currentIntervalInSamples;
                number numbertilde_04_lastValue;
                number numbertilde_04_outValue;
                number numbertilde_04_rampInSamples;
                Int numbertilde_04_currentMode;
                number numbertilde_04_smooth_d_prev;
                number numbertilde_04_smooth_prev;
                number numbertilde_04_smooth_index;
                number numbertilde_04_smooth_increment;
                bool numbertilde_04_setupDone;
                number scopetilde_02_lastValue;
                number scopetilde_02_effectiveCount;
                number scopetilde_02_xmonitorvalue;
                number scopetilde_02_ymonitorvalue;
                list scopetilde_02_monitorbuffer;
                number scopetilde_02_xsign;
                number scopetilde_02_ysign;
                Int scopetilde_02_mode;
                bool scopetilde_02_setupDone;
                number scopetilde_03_lastValue;
                number scopetilde_03_effectiveCount;
                number scopetilde_03_xmonitorvalue;
                number scopetilde_03_ymonitorvalue;
                list scopetilde_03_monitorbuffer;
                number scopetilde_03_xsign;
                number scopetilde_03_ysign;
                Int scopetilde_03_mode;
                bool scopetilde_03_setupDone;
                number stackprotect_count;
                DataRef delaytilde_01_del_bufferobj;
                DataRef delaytilde_02_del_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_52 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_61;
            friend class RnboBubble;
            
            public:
            
            RNBOSubpatcher_52()
            {
            }
            
            ~RNBOSubpatcher_52()
            {
            }
            
            virtual RNBOSubpatcher_61* getPatcher() const {
                return static_cast<RNBOSubpatcher_61 *>(_parentPatcher);
            }
            
            RnboBubble* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -1494586265, false);
                getEngine()->flushClockEvents(this, 2098551528, false);
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                this->scopetilde_04_perform(in2, this->zeroBuffer, n);
                this->welch_tilde_03_perform(in2, this->signals[0], n);
                this->scopetilde_06_perform(this->signals[0], this->zeroBuffer, n);
                this->dspexpr_25_perform(in2, this->dspexpr_25_in2, this->signals[1], n);
            
                this->wrap_tilde_02_perform(
                    this->signals[1],
                    this->wrap_tilde_02_low,
                    this->wrap_tilde_02_high,
                    this->signals[2],
                    n
                );
            
                this->welch_tilde_04_perform(this->signals[2], this->signals[1], n);
                this->scopetilde_05_perform(this->signals[1], this->zeroBuffer, n);
                this->dspexpr_24_perform(this->signals[2], in3, this->signals[3], n);
                this->numbertilde_06_perform(this->signals[3], this->dummyBuffer, n);
                this->delaytilde_04_perform(this->signals[3], in1, this->signals[2], n);
                this->dspexpr_23_perform(this->signals[2], this->signals[1], this->signals[3], n);
                this->dspexpr_22_perform(in2, in3, this->signals[1], n);
                this->numbertilde_05_perform(this->signals[1], this->dummyBuffer, n);
                this->delaytilde_03_perform(this->signals[1], in1, this->signals[2], n);
                this->dspexpr_21_perform(this->signals[2], this->signals[0], this->signals[1], n);
                this->dspexpr_20_perform(this->signals[1], this->signals[3], out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 4; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->scopetilde_04_dspsetup(forceDSPSetup);
                this->scopetilde_06_dspsetup(forceDSPSetup);
                this->scopetilde_05_dspsetup(forceDSPSetup);
                this->numbertilde_06_dspsetup(forceDSPSetup);
                this->delaytilde_04_dspsetup(forceDSPSetup);
                this->numbertilde_05_dspsetup(forceDSPSetup);
                this->delaytilde_03_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -1494586265:
                    {
                    this->numbertilde_06_value_set(value);
                    break;
                    }
                case 2098551528:
                    {
                    this->numbertilde_05_value_set(value);
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("Pitch/PitchShift~/number~_obj-64") == objectId)
                        this->numbertilde_05_sig_number_set(payload);
            
                    if (TAG("Pitch/PitchShift~/number~_obj-65") == objectId)
                        this->numbertilde_06_sig_number_set(payload);
            
                    break;
                    }
                case TAG("mode"):
                    {
                    if (TAG("Pitch/PitchShift~/number~_obj-64") == objectId)
                        this->numbertilde_05_mode_set(payload);
            
                    if (TAG("Pitch/PitchShift~/number~_obj-65") == objectId)
                        this->numbertilde_06_mode_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("sig"):
                    {
                    if (TAG("Pitch/PitchShift~/number~_obj-64") == objectId)
                        this->numbertilde_05_sig_list_set(payload);
            
                    if (TAG("Pitch/PitchShift~/number~_obj-65") == objectId)
                        this->numbertilde_06_sig_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("monitor"):
                    {
                    return "monitor";
                    }
                case TAG("Pitch/PitchShift~/number~_obj-64"):
                    {
                    return "Pitch/PitchShift~/number~_obj-64";
                    }
                case TAG("assign"):
                    {
                    return "assign";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Pitch/PitchShift~/scope~_obj-62"):
                    {
                    return "Pitch/PitchShift~/scope~_obj-62";
                    }
                case TAG("Pitch/PitchShift~/number~_obj-65"):
                    {
                    return "Pitch/PitchShift~/number~_obj-65";
                    }
                case TAG("Pitch/PitchShift~/scope~_obj-60"):
                    {
                    return "Pitch/PitchShift~/scope~_obj-60";
                    }
                case TAG("Pitch/PitchShift~/scope~_obj-61"):
                    {
                    return "Pitch/PitchShift~/scope~_obj-61";
                    }
                case TAG("sig"):
                    {
                    return "sig";
                    }
                case TAG("mode"):
                    {
                    return "mode";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 0:
                    {
                    return addressOf(this->delaytilde_03_del_bufferobj);
                    break;
                    }
                case 1:
                    {
                    return addressOf(this->delaytilde_04_del_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 2;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->delaytilde_03_del_buffer = new Float64Buffer(this->delaytilde_03_del_bufferobj);
                }
            
                if (index == 1) {
                    this->delaytilde_04_del_buffer = new Float64Buffer(this->delaytilde_04_del_bufferobj);
                }
            }
            
            void initialize() {
                this->delaytilde_03_del_bufferobj = initDataRef("delaytilde_03_del_bufferobj", true, nullptr, "buffer~");
                this->delaytilde_04_del_bufferobj = initDataRef("delaytilde_04_del_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->delaytilde_03_del_bufferobj->setIndex(0);
                this->delaytilde_03_del_buffer = new Float64Buffer(this->delaytilde_03_del_bufferobj);
                this->delaytilde_04_del_bufferobj->setIndex(1);
                this->delaytilde_04_del_buffer = new Float64Buffer(this->delaytilde_04_del_bufferobj);
            }
            
            protected:
            
            void numbertilde_05_sig_number_set(number v) {
                this->numbertilde_05_outValue = v;
            }
            
            void numbertilde_05_sig_list_set(const list& v) {
                this->numbertilde_05_outValue = v[0];
            }
            
            void numbertilde_05_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_05_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_05_currentMode = 1;
                }
            }
            
            void numbertilde_06_sig_number_set(number v) {
                this->numbertilde_06_outValue = v;
            }
            
            void numbertilde_06_sig_list_set(const list& v) {
                this->numbertilde_06_outValue = v[0];
            }
            
            void numbertilde_06_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_06_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_06_currentMode = 1;
                }
            }
            
            void numbertilde_06_value_set(number ) {}
            
            void numbertilde_05_value_set(number ) {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 3;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->delaytilde_03_del_init();
                this->numbertilde_05_init();
                this->delaytilde_04_del_init();
                this->numbertilde_06_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->delaytilde_03_del_buffer = this->delaytilde_03_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_03_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_03_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_03_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(0);
                }
            
                this->delaytilde_04_del_buffer = this->delaytilde_04_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_04_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_04_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_04_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(1);
                }
            }
            
            void scopetilde_04_perform(const SampleValue * x, const SampleValue * y, Index n) {
                auto __scopetilde_04_ysign = this->scopetilde_04_ysign;
                auto __scopetilde_04_ymonitorvalue = this->scopetilde_04_ymonitorvalue;
                auto __scopetilde_04_xsign = this->scopetilde_04_xsign;
                auto __scopetilde_04_xmonitorvalue = this->scopetilde_04_xmonitorvalue;
                auto __scopetilde_04_mode = this->scopetilde_04_mode;
            
                for (Index i = 0; i < n; i++) {
                    number xval = x[(Index)i];
                    number yval = y[(Index)i];
            
                    if (__scopetilde_04_mode == 1) {
                        number xabsval = rnbo_abs(xval);
            
                        if (xabsval > __scopetilde_04_xmonitorvalue) {
                            __scopetilde_04_xmonitorvalue = xabsval;
                            __scopetilde_04_xsign = (xval < 0 ? -1 : 1);
                        }
            
                        number yabsval = rnbo_abs(yval);
            
                        if (yabsval > __scopetilde_04_ymonitorvalue) {
                            __scopetilde_04_ymonitorvalue = yabsval;
                            __scopetilde_04_ysign = (yval < 0 ? -1 : 1);
                        }
                    } else {
                        __scopetilde_04_xmonitorvalue = xval;
                        __scopetilde_04_xsign = 1;
                        __scopetilde_04_ymonitorvalue = yval;
                        __scopetilde_04_ysign = 1;
                    }
            
                    this->scopetilde_04_effectiveCount--;
            
                    if (this->scopetilde_04_effectiveCount <= 0) {
                        this->scopetilde_04_updateEffectiveCount();
                        this->scopetilde_04_monitorbuffer->push(__scopetilde_04_xmonitorvalue * __scopetilde_04_xsign);
            
                        if (__scopetilde_04_mode == 1)
                            __scopetilde_04_xmonitorvalue = 0;
            
                        if (this->scopetilde_04_monitorbuffer->length >= 128 * (1 + 0)) {
                            this->getEngine()->sendListMessage(
                                TAG("monitor"),
                                TAG("Pitch/PitchShift~/scope~_obj-62"),
                                this->scopetilde_04_monitorbuffer,
                                this->_currentTime
                            );;
            
                            this->scopetilde_04_monitorbuffer->length = 0;
                        }
                    }
                }
            
                this->scopetilde_04_xmonitorvalue = __scopetilde_04_xmonitorvalue;
                this->scopetilde_04_xsign = __scopetilde_04_xsign;
                this->scopetilde_04_ymonitorvalue = __scopetilde_04_ymonitorvalue;
                this->scopetilde_04_ysign = __scopetilde_04_ysign;
            }
            
            void welch_tilde_03_perform(const Sample * x, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __x = x[(Index)i];
                    __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                    number w = (__x - 0.5) * 2;
                    out1[(Index)i] = 1 - w * w;
                }
            }
            
            void scopetilde_06_perform(const SampleValue * x, const SampleValue * y, Index n) {
                auto __scopetilde_06_ysign = this->scopetilde_06_ysign;
                auto __scopetilde_06_ymonitorvalue = this->scopetilde_06_ymonitorvalue;
                auto __scopetilde_06_xsign = this->scopetilde_06_xsign;
                auto __scopetilde_06_xmonitorvalue = this->scopetilde_06_xmonitorvalue;
                auto __scopetilde_06_mode = this->scopetilde_06_mode;
            
                for (Index i = 0; i < n; i++) {
                    number xval = x[(Index)i];
                    number yval = y[(Index)i];
            
                    if (__scopetilde_06_mode == 1) {
                        number xabsval = rnbo_abs(xval);
            
                        if (xabsval > __scopetilde_06_xmonitorvalue) {
                            __scopetilde_06_xmonitorvalue = xabsval;
                            __scopetilde_06_xsign = (xval < 0 ? -1 : 1);
                        }
            
                        number yabsval = rnbo_abs(yval);
            
                        if (yabsval > __scopetilde_06_ymonitorvalue) {
                            __scopetilde_06_ymonitorvalue = yabsval;
                            __scopetilde_06_ysign = (yval < 0 ? -1 : 1);
                        }
                    } else {
                        __scopetilde_06_xmonitorvalue = xval;
                        __scopetilde_06_xsign = 1;
                        __scopetilde_06_ymonitorvalue = yval;
                        __scopetilde_06_ysign = 1;
                    }
            
                    this->scopetilde_06_effectiveCount--;
            
                    if (this->scopetilde_06_effectiveCount <= 0) {
                        this->scopetilde_06_updateEffectiveCount();
                        this->scopetilde_06_monitorbuffer->push(__scopetilde_06_xmonitorvalue * __scopetilde_06_xsign);
            
                        if (__scopetilde_06_mode == 1)
                            __scopetilde_06_xmonitorvalue = 0;
            
                        if (this->scopetilde_06_monitorbuffer->length >= 128 * (1 + 0)) {
                            this->getEngine()->sendListMessage(
                                TAG("monitor"),
                                TAG("Pitch/PitchShift~/scope~_obj-61"),
                                this->scopetilde_06_monitorbuffer,
                                this->_currentTime
                            );;
            
                            this->scopetilde_06_monitorbuffer->length = 0;
                        }
                    }
                }
            
                this->scopetilde_06_xmonitorvalue = __scopetilde_06_xmonitorvalue;
                this->scopetilde_06_xsign = __scopetilde_06_xsign;
                this->scopetilde_06_ymonitorvalue = __scopetilde_06_ymonitorvalue;
                this->scopetilde_06_ysign = __scopetilde_06_ysign;
            }
            
            void dspexpr_25_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + -0.5;//#map:_###_obj_###_:1
                }
            }
            
            void wrap_tilde_02_perform(const Sample * x, number low, number high, SampleValue * out1, Index n) {
                RNBO_UNUSED(high);
                RNBO_UNUSED(low);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number lo;
                    number hi;
                    lo = 0;
                    hi = 1;
                    number range = hi - lo;
            
                    if (x[(Index)i] >= lo && x[(Index)i] < hi) {
                        out1[(Index)i] = x[(Index)i];
                        continue;
                    }
            
                    if (range <= 0.000000001) {
                        out1[(Index)i] = lo;
                        continue;
                    }
            
                    long numWraps = (long)(trunc((x[(Index)i] - lo) / range));
                    numWraps = numWraps - ((x[(Index)i] < lo ? 1 : 0));
                    number result = x[(Index)i] - range * numWraps;
            
                    if (result >= hi) {
                        out1[(Index)i] = result - range;
                        continue;
                    } else {
                        out1[(Index)i] = result;
                        continue;
                    }
                }
            }
            
            void welch_tilde_04_perform(const Sample * x, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __x = x[(Index)i];
                    __x = (__x > 1 ? 1 : (__x < 0 ? 0 : __x));
                    number w = (__x - 0.5) * 2;
                    out1[(Index)i] = 1 - w * w;
                }
            }
            
            void scopetilde_05_perform(const SampleValue * x, const SampleValue * y, Index n) {
                auto __scopetilde_05_ysign = this->scopetilde_05_ysign;
                auto __scopetilde_05_ymonitorvalue = this->scopetilde_05_ymonitorvalue;
                auto __scopetilde_05_xsign = this->scopetilde_05_xsign;
                auto __scopetilde_05_xmonitorvalue = this->scopetilde_05_xmonitorvalue;
                auto __scopetilde_05_mode = this->scopetilde_05_mode;
            
                for (Index i = 0; i < n; i++) {
                    number xval = x[(Index)i];
                    number yval = y[(Index)i];
            
                    if (__scopetilde_05_mode == 1) {
                        number xabsval = rnbo_abs(xval);
            
                        if (xabsval > __scopetilde_05_xmonitorvalue) {
                            __scopetilde_05_xmonitorvalue = xabsval;
                            __scopetilde_05_xsign = (xval < 0 ? -1 : 1);
                        }
            
                        number yabsval = rnbo_abs(yval);
            
                        if (yabsval > __scopetilde_05_ymonitorvalue) {
                            __scopetilde_05_ymonitorvalue = yabsval;
                            __scopetilde_05_ysign = (yval < 0 ? -1 : 1);
                        }
                    } else {
                        __scopetilde_05_xmonitorvalue = xval;
                        __scopetilde_05_xsign = 1;
                        __scopetilde_05_ymonitorvalue = yval;
                        __scopetilde_05_ysign = 1;
                    }
            
                    this->scopetilde_05_effectiveCount--;
            
                    if (this->scopetilde_05_effectiveCount <= 0) {
                        this->scopetilde_05_updateEffectiveCount();
                        this->scopetilde_05_monitorbuffer->push(__scopetilde_05_xmonitorvalue * __scopetilde_05_xsign);
            
                        if (__scopetilde_05_mode == 1)
                            __scopetilde_05_xmonitorvalue = 0;
            
                        if (this->scopetilde_05_monitorbuffer->length >= 128 * (1 + 0)) {
                            this->getEngine()->sendListMessage(
                                TAG("monitor"),
                                TAG("Pitch/PitchShift~/scope~_obj-60"),
                                this->scopetilde_05_monitorbuffer,
                                this->_currentTime
                            );;
            
                            this->scopetilde_05_monitorbuffer->length = 0;
                        }
                    }
                }
            
                this->scopetilde_05_xmonitorvalue = __scopetilde_05_xmonitorvalue;
                this->scopetilde_05_xsign = __scopetilde_05_xsign;
                this->scopetilde_05_ymonitorvalue = __scopetilde_05_ymonitorvalue;
                this->scopetilde_05_ysign = __scopetilde_05_ysign;
            }
            
            void dspexpr_24_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void numbertilde_06_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_06_currentIntervalInSamples = this->numbertilde_06_currentIntervalInSamples;
                auto __numbertilde_06_lastValue = this->numbertilde_06_lastValue;
                auto __numbertilde_06_currentInterval = this->numbertilde_06_currentInterval;
                auto __numbertilde_06_rampInSamples = this->numbertilde_06_rampInSamples;
                auto __numbertilde_06_outValue = this->numbertilde_06_outValue;
                auto __numbertilde_06_currentMode = this->numbertilde_06_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_06_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_06_smooth_next(
                            __numbertilde_06_outValue,
                            __numbertilde_06_rampInSamples,
                            __numbertilde_06_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_06_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_06_lastValue && __numbertilde_06_currentInterval <= 0) {
                    __numbertilde_06_currentInterval = __numbertilde_06_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1494586265,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_06_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Pitch/PitchShift~/number~_obj-65"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_06_currentInterval = __numbertilde_06_currentInterval;
                this->numbertilde_06_lastValue = __numbertilde_06_lastValue;
            }
            
            void delaytilde_04_perform(
                const Sample * delay,
                const SampleValue * input,
                SampleValue * output,
                Index n
            ) {
                auto __delaytilde_04_crossfadeDelay = this->delaytilde_04_crossfadeDelay;
                auto __delaytilde_04_rampInSamples = this->delaytilde_04_rampInSamples;
                auto __delaytilde_04_ramp = this->delaytilde_04_ramp;
                auto __delaytilde_04_lastDelay = this->delaytilde_04_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_04_lastDelay == -1) {
                        __delaytilde_04_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_04_ramp > 0) {
                        number factor = __delaytilde_04_ramp / __delaytilde_04_rampInSamples;
                        output[(Index)i] = this->delaytilde_04_del_read(__delaytilde_04_crossfadeDelay, 0) * factor + this->delaytilde_04_del_read(__delaytilde_04_lastDelay, 0) * (1. - factor);
                        __delaytilde_04_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_04_lastDelay) {
                            __delaytilde_04_ramp = __delaytilde_04_rampInSamples;
                            __delaytilde_04_crossfadeDelay = __delaytilde_04_lastDelay;
                            __delaytilde_04_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_04_del_read(__delaytilde_04_crossfadeDelay, 0);
                            __delaytilde_04_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_04_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_04_del_write(input[(Index)i]);
                    this->delaytilde_04_del_step();
                }
            
                this->delaytilde_04_lastDelay = __delaytilde_04_lastDelay;
                this->delaytilde_04_ramp = __delaytilde_04_ramp;
                this->delaytilde_04_crossfadeDelay = __delaytilde_04_crossfadeDelay;
            }
            
            void dspexpr_23_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_22_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void numbertilde_05_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_05_currentIntervalInSamples = this->numbertilde_05_currentIntervalInSamples;
                auto __numbertilde_05_lastValue = this->numbertilde_05_lastValue;
                auto __numbertilde_05_currentInterval = this->numbertilde_05_currentInterval;
                auto __numbertilde_05_rampInSamples = this->numbertilde_05_rampInSamples;
                auto __numbertilde_05_outValue = this->numbertilde_05_outValue;
                auto __numbertilde_05_currentMode = this->numbertilde_05_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_05_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_05_smooth_next(
                            __numbertilde_05_outValue,
                            __numbertilde_05_rampInSamples,
                            __numbertilde_05_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_05_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_05_lastValue && __numbertilde_05_currentInterval <= 0) {
                    __numbertilde_05_currentInterval = __numbertilde_05_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        2098551528,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_05_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Pitch/PitchShift~/number~_obj-64"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_05_currentInterval = __numbertilde_05_currentInterval;
                this->numbertilde_05_lastValue = __numbertilde_05_lastValue;
            }
            
            void delaytilde_03_perform(
                const Sample * delay,
                const SampleValue * input,
                SampleValue * output,
                Index n
            ) {
                auto __delaytilde_03_crossfadeDelay = this->delaytilde_03_crossfadeDelay;
                auto __delaytilde_03_rampInSamples = this->delaytilde_03_rampInSamples;
                auto __delaytilde_03_ramp = this->delaytilde_03_ramp;
                auto __delaytilde_03_lastDelay = this->delaytilde_03_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_03_lastDelay == -1) {
                        __delaytilde_03_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_03_ramp > 0) {
                        number factor = __delaytilde_03_ramp / __delaytilde_03_rampInSamples;
                        output[(Index)i] = this->delaytilde_03_del_read(__delaytilde_03_crossfadeDelay, 0) * factor + this->delaytilde_03_del_read(__delaytilde_03_lastDelay, 0) * (1. - factor);
                        __delaytilde_03_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_03_lastDelay) {
                            __delaytilde_03_ramp = __delaytilde_03_rampInSamples;
                            __delaytilde_03_crossfadeDelay = __delaytilde_03_lastDelay;
                            __delaytilde_03_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_03_del_read(__delaytilde_03_crossfadeDelay, 0);
                            __delaytilde_03_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_03_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_03_del_write(input[(Index)i]);
                    this->delaytilde_03_del_step();
                }
            
                this->delaytilde_03_lastDelay = __delaytilde_03_lastDelay;
                this->delaytilde_03_ramp = __delaytilde_03_ramp;
                this->delaytilde_03_crossfadeDelay = __delaytilde_03_crossfadeDelay;
            }
            
            void dspexpr_21_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_20_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void delaytilde_03_del_step() {
                this->delaytilde_03_del_reader++;
            
                if (this->delaytilde_03_del_reader >= (int)(this->delaytilde_03_del_buffer->getSize()))
                    this->delaytilde_03_del_reader = 0;
            }
            
            number delaytilde_03_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? 1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? 1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? 1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? 1 + this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ), this->delaytilde_03_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_03_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_03_del_buffer->getSize()) + this->delaytilde_03_del_reader - ((size > this->delaytilde_03_del__maxdelay ? this->delaytilde_03_del__maxdelay : (size < (this->delaytilde_03_del_reader != this->delaytilde_03_del_writer) ? this->delaytilde_03_del_reader != this->delaytilde_03_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_03_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_03_del_wrap))
                );
            }
            
            void delaytilde_03_del_write(number v) {
                this->delaytilde_03_del_writer = this->delaytilde_03_del_reader;
                this->delaytilde_03_del_buffer[(Index)this->delaytilde_03_del_writer] = v;
            }
            
            number delaytilde_03_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_03_del__maxdelay : size);
                number val = this->delaytilde_03_del_read(effectiveSize, 0);
                this->delaytilde_03_del_write(v);
                this->delaytilde_03_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_03_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_03_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_03_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_03_del_init() {
                auto result = this->delaytilde_03_del_calcSizeInSamples();
                this->delaytilde_03_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_03_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_03_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_03_del_clear() {
                this->delaytilde_03_del_buffer->setZero();
            }
            
            void delaytilde_03_del_reset() {
                auto result = this->delaytilde_03_del_calcSizeInSamples();
                this->delaytilde_03_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_03_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_03_del_buffer);
                this->delaytilde_03_del_wrap = this->delaytilde_03_del_buffer->getSize() - 1;
                this->delaytilde_03_del_clear();
            
                if (this->delaytilde_03_del_reader >= this->delaytilde_03_del__maxdelay || this->delaytilde_03_del_writer >= this->delaytilde_03_del__maxdelay) {
                    this->delaytilde_03_del_reader = 0;
                    this->delaytilde_03_del_writer = 0;
                }
            }
            
            void delaytilde_03_del_dspsetup() {
                this->delaytilde_03_del_reset();
            }
            
            number delaytilde_03_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                return samplerate;
            }
            
            number delaytilde_03_del_size() {
                return this->delaytilde_03_del__maxdelay;
            }
            
            void delaytilde_03_dspsetup(bool force) {
                if ((bool)(this->delaytilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_03_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_03_lastDelay = -1;
                this->delaytilde_03_setupDone = true;
                this->delaytilde_03_del_dspsetup();
            }
            
            number numbertilde_05_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_05_smooth_d_prev);
                this->numbertilde_05_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_05_smooth_d_dspsetup() {
                this->numbertilde_05_smooth_d_reset();
            }
            
            void numbertilde_05_smooth_d_reset() {
                this->numbertilde_05_smooth_d_prev = 0;
            }
            
            number numbertilde_05_smooth_next(number x, number up, number down) {
                if (this->numbertilde_05_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_05_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_05_smooth_index = _up;
                        this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _up;
                    } else if (x < this->numbertilde_05_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_05_smooth_index = _down;
                        this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_05_smooth_index > 0) {
                    this->numbertilde_05_smooth_prev += this->numbertilde_05_smooth_increment;
                    this->numbertilde_05_smooth_index -= 1;
                } else {
                    this->numbertilde_05_smooth_prev = x;
                }
            
                return this->numbertilde_05_smooth_prev;
            }
            
            void numbertilde_05_smooth_reset() {
                this->numbertilde_05_smooth_prev = 0;
                this->numbertilde_05_smooth_index = 0;
                this->numbertilde_05_smooth_increment = 0;
                this->numbertilde_05_smooth_d_reset();
            }
            
            void numbertilde_05_init() {
                this->numbertilde_05_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Pitch/PitchShift~/number~_obj-64"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_05_dspsetup(bool force) {
                if ((bool)(this->numbertilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_05_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_05_currentInterval = this->numbertilde_05_currentIntervalInSamples;
                this->numbertilde_05_rampInSamples = this->mstosamps(this->numbertilde_05_ramp);
                this->numbertilde_05_setupDone = true;
                this->numbertilde_05_smooth_d_dspsetup();
            }
            
            void scopetilde_04_updateEffectiveCount() {
                number effectiveCount = 256 * 1 + 256 * 0;
                this->scopetilde_04_effectiveCount = this->maximum(effectiveCount, 256);
            }
            
            void scopetilde_04_dspsetup(bool force) {
                if ((bool)(this->scopetilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                {
                    this->scopetilde_04_mode = 1;
                }
            
                this->getEngine()->sendListMessage(
                    TAG("setup"),
                    TAG("Pitch/PitchShift~/scope~_obj-62"),
                    {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_04_mode},
                    this->_currentTime
                );;
            
                this->scopetilde_04_updateEffectiveCount();
                this->scopetilde_04_setupDone = true;
            }
            
            void delaytilde_04_del_step() {
                this->delaytilde_04_del_reader++;
            
                if (this->delaytilde_04_del_reader >= (int)(this->delaytilde_04_del_buffer->getSize()))
                    this->delaytilde_04_del_reader = 0;
            }
            
            number delaytilde_04_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? 1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? 1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? 1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? 1 + this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ), this->delaytilde_04_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_04_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_04_del_buffer->getSize()) + this->delaytilde_04_del_reader - ((size > this->delaytilde_04_del__maxdelay ? this->delaytilde_04_del__maxdelay : (size < (this->delaytilde_04_del_reader != this->delaytilde_04_del_writer) ? this->delaytilde_04_del_reader != this->delaytilde_04_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_04_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_04_del_wrap))
                );
            }
            
            void delaytilde_04_del_write(number v) {
                this->delaytilde_04_del_writer = this->delaytilde_04_del_reader;
                this->delaytilde_04_del_buffer[(Index)this->delaytilde_04_del_writer] = v;
            }
            
            number delaytilde_04_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_04_del__maxdelay : size);
                number val = this->delaytilde_04_del_read(effectiveSize, 0);
                this->delaytilde_04_del_write(v);
                this->delaytilde_04_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_04_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_04_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_04_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_04_del_init() {
                auto result = this->delaytilde_04_del_calcSizeInSamples();
                this->delaytilde_04_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_04_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_04_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_04_del_clear() {
                this->delaytilde_04_del_buffer->setZero();
            }
            
            void delaytilde_04_del_reset() {
                auto result = this->delaytilde_04_del_calcSizeInSamples();
                this->delaytilde_04_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_04_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_04_del_buffer);
                this->delaytilde_04_del_wrap = this->delaytilde_04_del_buffer->getSize() - 1;
                this->delaytilde_04_del_clear();
            
                if (this->delaytilde_04_del_reader >= this->delaytilde_04_del__maxdelay || this->delaytilde_04_del_writer >= this->delaytilde_04_del__maxdelay) {
                    this->delaytilde_04_del_reader = 0;
                    this->delaytilde_04_del_writer = 0;
                }
            }
            
            void delaytilde_04_del_dspsetup() {
                this->delaytilde_04_del_reset();
            }
            
            number delaytilde_04_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                return samplerate;
            }
            
            number delaytilde_04_del_size() {
                return this->delaytilde_04_del__maxdelay;
            }
            
            void delaytilde_04_dspsetup(bool force) {
                if ((bool)(this->delaytilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_04_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_04_lastDelay = -1;
                this->delaytilde_04_setupDone = true;
                this->delaytilde_04_del_dspsetup();
            }
            
            number numbertilde_06_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_06_smooth_d_prev);
                this->numbertilde_06_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_06_smooth_d_dspsetup() {
                this->numbertilde_06_smooth_d_reset();
            }
            
            void numbertilde_06_smooth_d_reset() {
                this->numbertilde_06_smooth_d_prev = 0;
            }
            
            number numbertilde_06_smooth_next(number x, number up, number down) {
                if (this->numbertilde_06_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_06_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_06_smooth_index = _up;
                        this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _up;
                    } else if (x < this->numbertilde_06_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_06_smooth_index = _down;
                        this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_06_smooth_index > 0) {
                    this->numbertilde_06_smooth_prev += this->numbertilde_06_smooth_increment;
                    this->numbertilde_06_smooth_index -= 1;
                } else {
                    this->numbertilde_06_smooth_prev = x;
                }
            
                return this->numbertilde_06_smooth_prev;
            }
            
            void numbertilde_06_smooth_reset() {
                this->numbertilde_06_smooth_prev = 0;
                this->numbertilde_06_smooth_index = 0;
                this->numbertilde_06_smooth_increment = 0;
                this->numbertilde_06_smooth_d_reset();
            }
            
            void numbertilde_06_init() {
                this->numbertilde_06_currentMode = 1;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Pitch/PitchShift~/number~_obj-65"),
                    1,
                    this->_currentTime
                );
            }
            
            void numbertilde_06_dspsetup(bool force) {
                if ((bool)(this->numbertilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_06_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_06_currentInterval = this->numbertilde_06_currentIntervalInSamples;
                this->numbertilde_06_rampInSamples = this->mstosamps(this->numbertilde_06_ramp);
                this->numbertilde_06_setupDone = true;
                this->numbertilde_06_smooth_d_dspsetup();
            }
            
            void scopetilde_05_updateEffectiveCount() {
                number effectiveCount = 256 * 1 + 256 * 0;
                this->scopetilde_05_effectiveCount = this->maximum(effectiveCount, 256);
            }
            
            void scopetilde_05_dspsetup(bool force) {
                if ((bool)(this->scopetilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                {
                    this->scopetilde_05_mode = 1;
                }
            
                this->getEngine()->sendListMessage(
                    TAG("setup"),
                    TAG("Pitch/PitchShift~/scope~_obj-60"),
                    {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_05_mode},
                    this->_currentTime
                );;
            
                this->scopetilde_05_updateEffectiveCount();
                this->scopetilde_05_setupDone = true;
            }
            
            void scopetilde_06_updateEffectiveCount() {
                number effectiveCount = 256 * 1 + 256 * 0;
                this->scopetilde_06_effectiveCount = this->maximum(effectiveCount, 256);
            }
            
            void scopetilde_06_dspsetup(bool force) {
                if ((bool)(this->scopetilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                {
                    this->scopetilde_06_mode = 1;
                }
            
                this->getEngine()->sendListMessage(
                    TAG("setup"),
                    TAG("Pitch/PitchShift~/scope~_obj-61"),
                    {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_06_mode},
                    this->_currentTime
                );;
            
                this->scopetilde_06_updateEffectiveCount();
                this->scopetilde_06_setupDone = true;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                dspexpr_20_in1 = 0;
                dspexpr_20_in2 = 0;
                dspexpr_21_in1 = 0;
                dspexpr_21_in2 = 0;
                delaytilde_03_delay = 0;
                numbertilde_05_input_number = 0;
                numbertilde_05_ramp = 0;
                dspexpr_22_in1 = 0;
                dspexpr_22_in2 = 0;
                welch_tilde_03_x = 0;
                dspexpr_23_in1 = 0;
                dspexpr_23_in2 = 0;
                delaytilde_04_delay = 0;
                numbertilde_06_input_number = 0;
                numbertilde_06_ramp = 0;
                dspexpr_24_in1 = 0;
                dspexpr_24_in2 = 0;
                welch_tilde_04_x = 0;
                wrap_tilde_02_x = 0;
                wrap_tilde_02_low = 0;
                wrap_tilde_02_high = 1;
                dspexpr_25_in1 = 0;
                dspexpr_25_in2 = -0.5;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                delaytilde_03_lastDelay = -1;
                delaytilde_03_crossfadeDelay = 0;
                delaytilde_03_ramp = 0;
                delaytilde_03_rampInSamples = 0;
                delaytilde_03_del__maxdelay = 0;
                delaytilde_03_del_sizemode = 0;
                delaytilde_03_del_wrap = 0;
                delaytilde_03_del_reader = 0;
                delaytilde_03_del_writer = 0;
                delaytilde_03_setupDone = false;
                numbertilde_05_currentInterval = 0;
                numbertilde_05_currentIntervalInSamples = 0;
                numbertilde_05_lastValue = 0;
                numbertilde_05_outValue = 0;
                numbertilde_05_rampInSamples = 0;
                numbertilde_05_currentMode = 0;
                numbertilde_05_smooth_d_prev = 0;
                numbertilde_05_smooth_prev = 0;
                numbertilde_05_smooth_index = 0;
                numbertilde_05_smooth_increment = 0;
                numbertilde_05_setupDone = false;
                scopetilde_04_lastValue = 0;
                scopetilde_04_effectiveCount = 256;
                scopetilde_04_xsign = 1;
                scopetilde_04_ysign = 1;
                scopetilde_04_mode = 0;
                scopetilde_04_setupDone = false;
                delaytilde_04_lastDelay = -1;
                delaytilde_04_crossfadeDelay = 0;
                delaytilde_04_ramp = 0;
                delaytilde_04_rampInSamples = 0;
                delaytilde_04_del__maxdelay = 0;
                delaytilde_04_del_sizemode = 0;
                delaytilde_04_del_wrap = 0;
                delaytilde_04_del_reader = 0;
                delaytilde_04_del_writer = 0;
                delaytilde_04_setupDone = false;
                numbertilde_06_currentInterval = 0;
                numbertilde_06_currentIntervalInSamples = 0;
                numbertilde_06_lastValue = 0;
                numbertilde_06_outValue = 0;
                numbertilde_06_rampInSamples = 0;
                numbertilde_06_currentMode = 0;
                numbertilde_06_smooth_d_prev = 0;
                numbertilde_06_smooth_prev = 0;
                numbertilde_06_smooth_index = 0;
                numbertilde_06_smooth_increment = 0;
                numbertilde_06_setupDone = false;
                scopetilde_05_lastValue = 0;
                scopetilde_05_effectiveCount = 256;
                scopetilde_05_xsign = 1;
                scopetilde_05_ysign = 1;
                scopetilde_05_mode = 0;
                scopetilde_05_setupDone = false;
                scopetilde_06_lastValue = 0;
                scopetilde_06_effectiveCount = 256;
                scopetilde_06_xsign = 1;
                scopetilde_06_ysign = 1;
                scopetilde_06_mode = 0;
                scopetilde_06_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number dspexpr_20_in1;
                number dspexpr_20_in2;
                number dspexpr_21_in1;
                number dspexpr_21_in2;
                number delaytilde_03_delay;
                number numbertilde_05_input_number;
                number numbertilde_05_ramp;
                number dspexpr_22_in1;
                number dspexpr_22_in2;
                number welch_tilde_03_x;
                number dspexpr_23_in1;
                number dspexpr_23_in2;
                number delaytilde_04_delay;
                number numbertilde_06_input_number;
                number numbertilde_06_ramp;
                number dspexpr_24_in1;
                number dspexpr_24_in2;
                number welch_tilde_04_x;
                number wrap_tilde_02_x;
                number wrap_tilde_02_low;
                number wrap_tilde_02_high;
                number dspexpr_25_in1;
                number dspexpr_25_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[4];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number delaytilde_03_lastDelay;
                number delaytilde_03_crossfadeDelay;
                number delaytilde_03_ramp;
                long delaytilde_03_rampInSamples;
                Float64BufferRef delaytilde_03_del_buffer;
                Index delaytilde_03_del__maxdelay;
                Int delaytilde_03_del_sizemode;
                Index delaytilde_03_del_wrap;
                Int delaytilde_03_del_reader;
                Int delaytilde_03_del_writer;
                bool delaytilde_03_setupDone;
                SampleIndex numbertilde_05_currentInterval;
                SampleIndex numbertilde_05_currentIntervalInSamples;
                number numbertilde_05_lastValue;
                number numbertilde_05_outValue;
                number numbertilde_05_rampInSamples;
                Int numbertilde_05_currentMode;
                number numbertilde_05_smooth_d_prev;
                number numbertilde_05_smooth_prev;
                number numbertilde_05_smooth_index;
                number numbertilde_05_smooth_increment;
                bool numbertilde_05_setupDone;
                number scopetilde_04_lastValue;
                number scopetilde_04_effectiveCount;
                number scopetilde_04_xmonitorvalue;
                number scopetilde_04_ymonitorvalue;
                list scopetilde_04_monitorbuffer;
                number scopetilde_04_xsign;
                number scopetilde_04_ysign;
                Int scopetilde_04_mode;
                bool scopetilde_04_setupDone;
                number delaytilde_04_lastDelay;
                number delaytilde_04_crossfadeDelay;
                number delaytilde_04_ramp;
                long delaytilde_04_rampInSamples;
                Float64BufferRef delaytilde_04_del_buffer;
                Index delaytilde_04_del__maxdelay;
                Int delaytilde_04_del_sizemode;
                Index delaytilde_04_del_wrap;
                Int delaytilde_04_del_reader;
                Int delaytilde_04_del_writer;
                bool delaytilde_04_setupDone;
                SampleIndex numbertilde_06_currentInterval;
                SampleIndex numbertilde_06_currentIntervalInSamples;
                number numbertilde_06_lastValue;
                number numbertilde_06_outValue;
                number numbertilde_06_rampInSamples;
                Int numbertilde_06_currentMode;
                number numbertilde_06_smooth_d_prev;
                number numbertilde_06_smooth_prev;
                number numbertilde_06_smooth_index;
                number numbertilde_06_smooth_increment;
                bool numbertilde_06_setupDone;
                number scopetilde_05_lastValue;
                number scopetilde_05_effectiveCount;
                number scopetilde_05_xmonitorvalue;
                number scopetilde_05_ymonitorvalue;
                list scopetilde_05_monitorbuffer;
                number scopetilde_05_xsign;
                number scopetilde_05_ysign;
                Int scopetilde_05_mode;
                bool scopetilde_05_setupDone;
                number scopetilde_06_lastValue;
                number scopetilde_06_effectiveCount;
                number scopetilde_06_xmonitorvalue;
                number scopetilde_06_ymonitorvalue;
                list scopetilde_06_monitorbuffer;
                number scopetilde_06_xsign;
                number scopetilde_06_ysign;
                Int scopetilde_06_mode;
                bool scopetilde_06_setupDone;
                number stackprotect_count;
                DataRef delaytilde_03_del_bufferobj;
                DataRef delaytilde_04_del_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_61()
    {
    }
    
    ~RNBOSubpatcher_61()
    {
        delete this->p_01;
        delete this->p_02;
        delete this->p_03;
        delete this->p_04;
    }
    
    virtual RnboBubble* getPatcher() const {
        return static_cast<RnboBubble *>(_parentPatcher);
    }
    
    RnboBubble* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, -1735137014, false);
        getEngine()->flushClockEvents(this, -1621164530, false);
        getEngine()->flushClockEvents(this, -62043057, false);
        getEngine()->flushClockEvents(this, 1114681293, false);
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    ParameterValue fromnormalized(ParameterIndex index, ParameterValue normalizedValue) {
        return this->convertFromNormalizedParameterValue(index, normalizedValue);
    }
    
    Index getNumMidiInputPorts() const {
        return 1;
    }
    
    void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
        this->updateTime(time);
        this->ctlin_01_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
    }
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->p_02_perform(n);
        this->linetilde_02_perform(this->signals[0], n);
        this->phasor_01_perform(this->signals[0], this->signals[1], n);
        this->linetilde_03_perform(this->signals[2], n);
        this->rate_tilde_01_perform(this->signals[1], this->signals[2], this->signals[3], n);
        this->linetilde_04_perform(this->signals[2], n);
        this->p_04_perform(in2, this->signals[3], this->signals[2], this->signals[4], n);
        this->p_03_perform(in1, this->signals[1], this->signals[2], this->signals[3], n);
    
        this->p_01_perform(
            in1,
            in2,
            this->signals[3],
            this->signals[4],
            this->signals[0],
            out1,
            out2,
            n
        );
    
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 5; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->phasor_01_sigbuf = resizeSignal(this->phasor_01_sigbuf, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->phasor_01_dspsetup(forceDSPSetup);
        this->rate_tilde_01_dspsetup(forceDSPSetup);
        this->p_01->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_02->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_03->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_04->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_01->processTempoEvent(time, tempo);
        this->p_02->processTempoEvent(time, tempo);
        this->p_03->processTempoEvent(time, tempo);
        this->p_04->processTempoEvent(time, tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_01->processTransportEvent(time, state);
        this->p_02->processTransportEvent(time, state);
        this->p_03->processTransportEvent(time, state);
        this->p_04->processTransportEvent(time, state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_01->processBeatTimeEvent(time, beattime);
        this->p_02->processBeatTimeEvent(time, beattime);
        this->p_03->processBeatTimeEvent(time, beattime);
        this->p_04->processBeatTimeEvent(time, beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_01->processTimeSignatureEvent(time, numerator, denominator);
        this->p_02->processTimeSignatureEvent(time, numerator, denominator);
        this->p_03->processTimeSignatureEvent(time, numerator, denominator);
        this->p_04->processTimeSignatureEvent(time, numerator, denominator);
    }
    
    void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
        this->updateTime(time);
        this->p_01->processBBUEvent(time, bars, beats, units);
        this->p_02->processBBUEvent(time, bars, beats, units);
        this->p_03->processBBUEvent(time, bars, beats, units);
        this->p_04->processBBUEvent(time, bars, beats, units);
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_01 = new RNBOSubpatcher_49();
        this->p_01->setEngineAndPatcher(this->getEngine(), this);
        this->p_01->initialize();
        this->p_01->setParameterOffset(this->getParameterOffset(this->p_01));
        this->p_02 = new RNBOSubpatcher_50();
        this->p_02->setEngineAndPatcher(this->getEngine(), this);
        this->p_02->initialize();
        this->p_02->setParameterOffset(this->getParameterOffset(this->p_02));
        this->p_03 = new RNBOSubpatcher_51();
        this->p_03->setEngineAndPatcher(this->getEngine(), this);
        this->p_03->initialize();
        this->p_03->setParameterOffset(this->getParameterOffset(this->p_03));
        this->p_04 = new RNBOSubpatcher_52();
        this->p_04->setEngineAndPatcher(this->getEngine(), this);
        this->p_04->initialize();
        this->p_04->setParameterOffset(this->getParameterOffset(this->p_04));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_03_getPresetValue(getSubState(preset, "transp"));
        this->p_01->getPreset(getSubState(getSubState(preset, "__sps"), "Switch~"));
        this->p_02->getPreset(getSubState(getSubState(preset, "__sps"), "FreqCalc"));
        this->p_03->getPreset(getSubState(getSubState(preset, "__sps"), "PitchShift~[1]"));
        this->p_04->getPreset(getSubState(getSubState(preset, "__sps"), "PitchShift~"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_03_value_set(v);
            break;
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_01->getNumParameters())
                this->p_01->setParameterValue(index, v, time);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                this->p_02->setParameterValue(index, v, time);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                this->p_03->setParameterValue(index, v, time);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                this->p_04->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_03_value;
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterValue(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterValue(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterValue(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 1 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "transp";
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterName(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterName(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterName(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "Pitch/transp";
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterId(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterId(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterId(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 4;
                info->min = 0;
                info->max = 8;
                info->exponent = 1;
                info->steps = 9;
                static const char * eVal0[] = {"-24", "-19", "-12", "-7", "0", "7", "12", "19", "24"};
                info->enumValues = eVal0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Shift";
                info->unit = "st";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 1;
    
                if (index < this->p_01->getNumParameters())
                    this->p_01->getParameterInfo(index, info);
    
                index -= this->p_01->getNumParameters();
    
                if (index < this->p_02->getNumParameters())
                    this->p_02->getParameterInfo(index, info);
    
                index -= this->p_02->getNumParameters();
    
                if (index < this->p_03->getNumParameters())
                    this->p_03->getParameterInfo(index, info);
    
                index -= this->p_03->getNumParameters();
    
                if (index < this->p_04->getNumParameters())
                    this->p_04->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_01)
            return 1;
    
        if (subpatcher == this->p_02)
            return 1 + this->p_01->getNumParameters();
    
        if (subpatcher == this->p_03)
            return 1 + this->p_01->getNumParameters() + this->p_02->getNumParameters();
    
        if (subpatcher == this->p_04)
            return 1 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            {
                value = (value < 0 ? 0 : (value > 8 ? 8 : value));
                ParameterValue normalizedValue = (value - 0) / (8 - 0);
    
                {
                    normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 9);
                }
    
                return normalizedValue;
            }
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 0:
            {
            {
                {
                    value = this->applyStepsToNormalizedParameterValue(value, 9);
                }
    
                {
                    return 0 + value * (8 - 0);
                }
            }
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_03_value_constrain(value);
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->constrainParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->constrainParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->constrainParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -871642103:
            {
            this->loadbang_02_startupbang_bang();
            break;
            }
        case -1735137014:
            {
            this->loadbang_03_startupbang_bang();
            break;
            }
        case -1621164530:
            {
            this->linetilde_02_target_bang();
            break;
            }
        case -62043057:
            {
            this->linetilde_03_target_bang();
            break;
            }
        case 1114681293:
            {
            this->linetilde_04_target_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("Pitch/number_obj-63") == objectId)
                this->numberobj_17_valin_set(payload);
    
            if (TAG("Pitch/number_obj-82") == objectId)
                this->numberobj_18_valin_set(payload);
    
            if (TAG("Pitch/number_obj-24") == objectId)
                this->numberobj_19_valin_set(payload);
    
            if (TAG("Pitch/number_obj-31") == objectId)
                this->numberobj_20_valin_set(payload);
    
            if (TAG("Pitch/number_obj-15") == objectId)
                this->numberobj_21_valin_set(payload);
    
            if (TAG("Pitch/number_obj-4") == objectId)
                this->numberobj_22_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Pitch/number_obj-63") == objectId)
                this->numberobj_17_format_set(payload);
    
            if (TAG("Pitch/number_obj-82") == objectId)
                this->numberobj_18_format_set(payload);
    
            if (TAG("Pitch/number_obj-24") == objectId)
                this->numberobj_19_format_set(payload);
    
            if (TAG("Pitch/number_obj-31") == objectId)
                this->numberobj_20_format_set(payload);
    
            if (TAG("Pitch/number_obj-15") == objectId)
                this->numberobj_21_format_set(payload);
    
            if (TAG("Pitch/number_obj-4") == objectId)
                this->numberobj_22_format_set(payload);
    
            break;
            }
        }
    
        this->p_01->processNumMessage(tag, objectId, time, payload);
        this->p_02->processNumMessage(tag, objectId, time, payload);
        this->p_03->processNumMessage(tag, objectId, time, payload);
        this->p_04->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_01->processListMessage(tag, objectId, time, payload);
        this->p_02->processListMessage(tag, objectId, time, payload);
        this->p_03->processListMessage(tag, objectId, time, payload);
        this->p_04->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("Pitch/loadbang_obj-20") == objectId)
                this->loadbang_02_startupbang_bang();
    
            if (TAG("Pitch/loadbang_obj-16") == objectId)
                this->loadbang_03_startupbang_bang();
    
            break;
            }
        }
    
        this->p_01->processBangMessage(tag, objectId, time);
        this->p_02->processBangMessage(tag, objectId, time);
        this->p_03->processBangMessage(tag, objectId, time);
        this->p_04->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Pitch/number_obj-63"):
            {
            return "Pitch/number_obj-63";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("Pitch/number_obj-82"):
            {
            return "Pitch/number_obj-82";
            }
        case TAG("Pitch/number_obj-24"):
            {
            return "Pitch/number_obj-24";
            }
        case TAG("Pitch/number_obj-31"):
            {
            return "Pitch/number_obj-31";
            }
        case TAG("Pitch/number_obj-15"):
            {
            return "Pitch/number_obj-15";
            }
        case TAG("Pitch/number_obj-4"):
            {
            return "Pitch/number_obj-4";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("Pitch/loadbang_obj-20"):
            {
            return "Pitch/loadbang_obj-20";
            }
        case TAG("Pitch/loadbang_obj-16"):
            {
            return "Pitch/loadbang_obj-16";
            }
        }
    
        auto subpatchResult_0 = this->p_01->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_02->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_03->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_04->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->p_01->processDataViewUpdate(index, time);
        this->p_02->processDataViewUpdate(index, time);
        this->p_03->processDataViewUpdate(index, time);
        this->p_04->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void param_03_value_set(number v) {
        v = this->param_03_value_constrain(v);
        this->param_03_value = v;
        this->sendParameter(0, false);
    
        if (this->param_03_value != this->param_03_lastValue) {
            this->getEngine()->presetTouched();
            this->param_03_lastValue = this->param_03_value;
        }
    
        {
            list converted = {v};
            this->listlookup_01_input_set(converted);
        }
    }
    
    void numberobj_17_valin_set(number v) {
        this->numberobj_17_value_set(v);
    }
    
    void numberobj_17_format_set(number v) {
        this->numberobj_17_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_18_valin_set(number v) {
        this->numberobj_18_value_set(v);
    }
    
    void numberobj_18_format_set(number v) {
        this->numberobj_18_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void loadbang_02_startupbang_bang() {
        this->loadbang_02_output_bang();
    }
    
    void numberobj_19_valin_set(number v) {
        this->numberobj_19_value_set(v);
    }
    
    void numberobj_19_format_set(number v) {
        this->numberobj_19_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_20_valin_set(number v) {
        this->numberobj_20_value_set(v);
    }
    
    void numberobj_20_format_set(number v) {
        this->numberobj_20_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void loadbang_03_startupbang_bang() {
        this->loadbang_03_output_bang();
    }
    
    void numberobj_21_valin_set(number v) {
        this->numberobj_21_value_set(v);
    }
    
    void numberobj_21_format_set(number v) {
        this->numberobj_21_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_22_valin_set(number v) {
        this->numberobj_22_value_set(v);
    }
    
    void numberobj_22_format_set(number v) {
        this->numberobj_22_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void linetilde_02_target_bang() {}
    
    void linetilde_03_target_bang() {}
    
    void linetilde_04_target_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numberobj_17_init();
        this->numberobj_18_init();
        this->numberobj_19_init();
        this->numberobj_20_init();
        this->numberobj_21_init();
        this->numberobj_22_init();
        this->p_01->initializeObjects();
        this->p_02->initializeObjects();
        this->p_03->initializeObjects();
        this->p_04->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_01->startup();
        this->p_02->startup();
        this->p_03->startup();
        this->p_04->startup();
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, -1735137014, 0 + this->_currentTime);;
    
        {
            this->scheduleParamInit(0, 2);
        }
    }
    
    void allocateDataRefs() {
        this->p_01->allocateDataRefs();
        this->p_02->allocateDataRefs();
        this->p_03->allocateDataRefs();
        this->p_04->allocateDataRefs();
    }
    
    number param_03_value_constrain(number v) const {
        v = (v > 8 ? 8 : (v < 0 ? 0 : v));
    
        {
            number oneStep = (number)8 / (number)8;
            number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
            number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
            v = numberOfSteps * oneStep;
        }
    
        return v;
    }
    
    void linetilde_03_time_set(number v) {
        this->linetilde_03_time = v;
    }
    
    void linetilde_03_segments_set(const list& v) {
        this->linetilde_03_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_03_time == 0) {
                this->linetilde_03_activeRamps->length = 0;
                this->linetilde_03_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_03_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_03_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_03_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_03_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_03_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_03_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_03_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_03_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_03_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_03_activeRamps->push(lastRampValue);
                    this->linetilde_03_activeRamps->push(0);
                    this->linetilde_03_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_03_keepramp)) {
                            this->linetilde_03_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_03_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_03_activeRamps->push(destinationValue);
                    this->linetilde_03_activeRamps->push(inc);
                    this->linetilde_03_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_20_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_03_segments_set(converted);
        }
    }
    
    void numberobj_20_value_set(number v) {
        this->numberobj_20_value_setter(v);
        v = this->numberobj_20_value;
        number localvalue = v;
    
        if (this->numberobj_20_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Pitch/number_obj-31"), localvalue, this->_currentTime);
        this->numberobj_20_output_set(localvalue);
    }
    
    void p_02_out2_number_set(number v) {
        this->numberobj_20_value_set(v);
    }
    
    void linetilde_02_time_set(number v) {
        this->linetilde_02_time = v;
    }
    
    void linetilde_02_segments_set(const list& v) {
        this->linetilde_02_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_02_time == 0) {
                this->linetilde_02_activeRamps->length = 0;
                this->linetilde_02_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_02_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_02_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_02_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_02_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_02_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_02_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_02_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_02_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_02_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_02_activeRamps->push(lastRampValue);
                    this->linetilde_02_activeRamps->push(0);
                    this->linetilde_02_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_02_keepramp)) {
                            this->linetilde_02_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_02_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_02_activeRamps->push(destinationValue);
                    this->linetilde_02_activeRamps->push(inc);
                    this->linetilde_02_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_18_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_02_segments_set(converted);
        }
    }
    
    void numberobj_18_value_set(number v) {
        this->numberobj_18_value_setter(v);
        v = this->numberobj_18_value;
        number localvalue = v;
    
        if (this->numberobj_18_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Pitch/number_obj-82"), localvalue, this->_currentTime);
        this->numberobj_18_output_set(localvalue);
    }
    
    void p_02_out1_number_set(number v) {
        this->numberobj_18_value_set(v);
    }
    
    void p_02_in1_number_set(number v) {
        this->p_02->updateTime(this->_currentTime);
        this->p_02->eventinlet_03_out1_number_set(v);
    }
    
    void numberobj_17_output_set(number v) {
        this->p_02_in1_number_set(v);
    }
    
    void numberobj_17_value_set(number v) {
        this->numberobj_17_value_setter(v);
        v = this->numberobj_17_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < -24) {
            localvalue = -24;
        }
    
        if ((bool)(true) && localvalue > 24) {
            localvalue = 24;
        }
    
        if (this->numberobj_17_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Pitch/number_obj-63"), localvalue, this->_currentTime);
        this->numberobj_17_output_set(localvalue);
    }
    
    void listlookup_01_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_17_value_set(converted);
        }
    }
    
    void listlookup_01_input_set(const list& v) {
        this->listlookup_01_input = jsCreateListCopy(v);
        list tmp = list();
    
        for (Index i = 0; i < v->length; i++) {
            long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
    
            if (j >= 0 && (Index)(j) < this->listlookup_01_lookup->length)
                tmp->push(this->listlookup_01_lookup[(Index)j]);
        }
    
        if ((bool)(tmp->length))
            this->listlookup_01_out_set(tmp);
    }
    
    void p_02_in2_number_set(number v) {
        this->p_02->updateTime(this->_currentTime);
        this->p_02->eventinlet_04_out1_number_set(v);
    }
    
    void numberobj_19_output_set(number v) {
        this->p_02_in2_number_set(v);
    }
    
    void numberobj_19_value_bang() {
        number v = this->numberobj_19_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < -100) {
            localvalue = -100;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_19_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Pitch/number_obj-24"), localvalue, this->_currentTime);
        this->numberobj_19_output_set(localvalue);
    }
    
    void loadbang_02_output_bang() {
        this->numberobj_19_value_bang();
    }
    
    void numberobj_19_value_set(number v) {
        this->numberobj_19_value_setter(v);
        v = this->numberobj_19_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < -100) {
            localvalue = -100;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_19_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Pitch/number_obj-24"), localvalue, this->_currentTime);
        this->numberobj_19_output_set(localvalue);
    }
    
    void linetilde_04_time_set(number v) {
        this->linetilde_04_time = v;
    }
    
    void linetilde_04_segments_set(const list& v) {
        this->linetilde_04_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_04_time == 0) {
                this->linetilde_04_activeRamps->length = 0;
                this->linetilde_04_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_04_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_04_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_04_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_04_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_04_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_04_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_04_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_04_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_04_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_04_activeRamps->push(lastRampValue);
                    this->linetilde_04_activeRamps->push(0);
                    this->linetilde_04_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_04_keepramp)) {
                            this->linetilde_04_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_04_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_04_activeRamps->push(destinationValue);
                    this->linetilde_04_activeRamps->push(inc);
                    this->linetilde_04_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_22_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_04_segments_set(converted);
        }
    }
    
    void numberobj_22_value_set(number v) {
        this->numberobj_22_value_setter(v);
        v = this->numberobj_22_value;
        number localvalue = v;
    
        if (this->numberobj_22_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Pitch/number_obj-4"), localvalue, this->_currentTime);
        this->numberobj_22_output_set(localvalue);
    }
    
    void mstosamps_01_out1_set(number v) {
        this->numberobj_22_value_set(v);
    }
    
    void mstosamps_01_ms_set(number ms) {
        this->mstosamps_01_ms = ms;
    
        {
            this->mstosamps_01_out1_set(ms * this->sr * 0.001);
            return;
        }
    }
    
    void p_02_in3_number_set(number v) {
        this->p_02->updateTime(this->_currentTime);
        this->p_02->eventinlet_05_out1_number_set(v);
    }
    
    void numberobj_21_output_set(number v) {
        this->mstosamps_01_ms_set(v);
        this->p_02_in3_number_set(v);
    }
    
    void numberobj_21_value_set(number v) {
        this->numberobj_21_value_setter(v);
        v = this->numberobj_21_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 80) {
            localvalue = 80;
        }
    
        if ((bool)(true) && localvalue > 80) {
            localvalue = 80;
        }
    
        if (this->numberobj_21_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Pitch/number_obj-15"), localvalue, this->_currentTime);
        this->numberobj_21_output_set(localvalue);
    }
    
    void floatnum_01_out_set(number v) {
        this->numberobj_21_value_set(v);
    }
    
    void floatnum_01_input_bang_bang() {
        this->floatnum_01_out_set(this->floatnum_01_stored);
    }
    
    void loadbang_03_output_bang() {
        this->floatnum_01_input_bang_bang();
    }
    
    void ctlin_01_outchannel_set(number ) {}
    
    void ctlin_01_outcontroller_set(number ) {}
    
    void fromnormalized_01_output_set(number v) {
        this->param_03_value_set(v);
    }
    
    void fromnormalized_01_input_set(number v) {
        this->fromnormalized_01_output_set(this->fromnormalized(0, v));
    }
    
    void expr_15_out1_set(number v) {
        this->expr_15_out1 = v;
        this->fromnormalized_01_input_set(this->expr_15_out1);
    }
    
    void expr_15_in1_set(number in1) {
        this->expr_15_in1 = in1;
        this->expr_15_out1_set(this->expr_15_in1 * this->expr_15_in2);//#map:expr_15:1
    }
    
    void ctlin_01_value_set(number v) {
        this->expr_15_in1_set(v);
    }
    
    void ctlin_01_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_01_channel || this->ctlin_01_channel == -1) && (data[1] == this->ctlin_01_controller || this->ctlin_01_controller == -1)) {
            this->ctlin_01_outchannel_set(channel);
            this->ctlin_01_outcontroller_set(data[1]);
            this->ctlin_01_value_set(data[2]);
            this->ctlin_01_status = 0;
        }
    }
    
    void p_02_perform(Index n) {
        // subpatcher: FreqCalc
        this->p_02->process(nullptr, 0, nullptr, 0, n);
    }
    
    void linetilde_02_perform(SampleValue * out, Index n) {
        auto __linetilde_02_time = this->linetilde_02_time;
        auto __linetilde_02_keepramp = this->linetilde_02_keepramp;
        auto __linetilde_02_currentValue = this->linetilde_02_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_02_activeRamps->length)) {
            while ((bool)(this->linetilde_02_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_02_activeRamps[0];
                number inc = this->linetilde_02_activeRamps[1];
                number rampTimeInSamples = this->linetilde_02_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_02_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_02_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_02_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -1621164530,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_02_keepramp))) {
                            __linetilde_02_time = 0;
                        }
                    }
                }
    
                __linetilde_02_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_02_currentValue;
            i++;
        }
    
        this->linetilde_02_currentValue = __linetilde_02_currentValue;
        this->linetilde_02_time = __linetilde_02_time;
    }
    
    void phasor_01_perform(const Sample * freq, SampleValue * out, Index n) {
        for (Index i = 0; i < n; i++) {
            out[(Index)i] = this->phasor_01_ph_next(freq[(Index)i], -1);
            this->phasor_01_sigbuf[(Index)i] = -1;
        }
    }
    
    void linetilde_03_perform(SampleValue * out, Index n) {
        auto __linetilde_03_time = this->linetilde_03_time;
        auto __linetilde_03_keepramp = this->linetilde_03_keepramp;
        auto __linetilde_03_currentValue = this->linetilde_03_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_03_activeRamps->length)) {
            while ((bool)(this->linetilde_03_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_03_activeRamps[0];
                number inc = this->linetilde_03_activeRamps[1];
                number rampTimeInSamples = this->linetilde_03_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_03_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_03_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_03_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -62043057,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_03_keepramp))) {
                            __linetilde_03_time = 0;
                        }
                    }
                }
    
                __linetilde_03_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_03_currentValue;
            i++;
        }
    
        this->linetilde_03_currentValue = __linetilde_03_currentValue;
        this->linetilde_03_time = __linetilde_03_time;
    }
    
    void rate_tilde_01_perform(
        const Sample * phase,
        const Sample * multiplier,
        SampleValue * out1,
        Index n
    ) {
        auto __rate_tilde_01_currentPhase = this->rate_tilde_01_currentPhase;
        auto __rate_tilde_01_prev = this->rate_tilde_01_prev;
        auto __rate_tilde_01_diff = this->rate_tilde_01_diff;
        auto __rate_tilde_01_wantlock = this->rate_tilde_01_wantlock;
        auto __rate_tilde_01_invmult = this->rate_tilde_01_invmult;
        auto __rate_tilde_01_mult = this->rate_tilde_01_mult;
        Index i;
    
        for (i = 0; i < n; i++) {
            if (multiplier[(Index)i] != __rate_tilde_01_mult && (bool)(!(bool)(rnbo_isnan(multiplier[(Index)i])))) {
                __rate_tilde_01_mult = multiplier[(Index)i];
                __rate_tilde_01_invmult = this->safediv(1.0, __rate_tilde_01_mult);
                __rate_tilde_01_wantlock = 1;
            }
    
            __rate_tilde_01_diff = phase[(Index)i] - __rate_tilde_01_prev;
    
            if (__rate_tilde_01_diff < -0.5) {
                __rate_tilde_01_diff += 1;
            } else if (__rate_tilde_01_diff > 0.5) {
                __rate_tilde_01_diff -= 1;
            }
    
            __rate_tilde_01_currentPhase += __rate_tilde_01_diff * __rate_tilde_01_invmult;
    
            if (__rate_tilde_01_currentPhase > 1.0 || __rate_tilde_01_currentPhase < -0.0) {
                __rate_tilde_01_currentPhase = __rate_tilde_01_currentPhase - rnbo_floor(__rate_tilde_01_currentPhase);
            }
    
            __rate_tilde_01_prev = phase[(Index)i];
            out1[(Index)i] = __rate_tilde_01_currentPhase;
            continue;
        }
    
        this->rate_tilde_01_mult = __rate_tilde_01_mult;
        this->rate_tilde_01_invmult = __rate_tilde_01_invmult;
        this->rate_tilde_01_wantlock = __rate_tilde_01_wantlock;
        this->rate_tilde_01_diff = __rate_tilde_01_diff;
        this->rate_tilde_01_prev = __rate_tilde_01_prev;
        this->rate_tilde_01_currentPhase = __rate_tilde_01_currentPhase;
    }
    
    void linetilde_04_perform(SampleValue * out, Index n) {
        auto __linetilde_04_time = this->linetilde_04_time;
        auto __linetilde_04_keepramp = this->linetilde_04_keepramp;
        auto __linetilde_04_currentValue = this->linetilde_04_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_04_activeRamps->length)) {
            while ((bool)(this->linetilde_04_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_04_activeRamps[0];
                number inc = this->linetilde_04_activeRamps[1];
                number rampTimeInSamples = this->linetilde_04_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_04_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_04_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_04_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            1114681293,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_04_keepramp))) {
                            __linetilde_04_time = 0;
                        }
                    }
                }
    
                __linetilde_04_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_04_currentValue;
            i++;
        }
    
        this->linetilde_04_currentValue = __linetilde_04_currentValue;
        this->linetilde_04_time = __linetilde_04_time;
    }
    
    void p_04_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: PitchShift~
        ConstSampleArray<3> ins = {in1, in2, in3};
    
        SampleArray<1> outs = {out1};
        this->p_04->process(ins, 3, outs, 1, n);
    }
    
    void p_03_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: PitchShift~
        ConstSampleArray<3> ins = {in1, in2, in3};
    
        SampleArray<1> outs = {out1};
        this->p_03->process(ins, 3, outs, 1, n);
    }
    
    void p_01_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Switch~
        ConstSampleArray<5> ins = {in1, in2, in3, in4, in5};
    
        SampleArray<2> outs = {out1, out2};
        this->p_01->process(ins, 5, outs, 2, n);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_17_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < -24) {
            localvalue = -24;
        }
    
        if ((bool)(true) && localvalue > 24) {
            localvalue = 24;
        }
    
        if (this->numberobj_17_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_17_value = localvalue;
    }
    
    void numberobj_18_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_18_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_18_value = localvalue;
    }
    
    void numberobj_19_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < -100) {
            localvalue = -100;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_19_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_19_value = localvalue;
    }
    
    void numberobj_20_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_20_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_20_value = localvalue;
    }
    
    void numberobj_21_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 80) {
            localvalue = 80;
        }
    
        if ((bool)(true) && localvalue > 80) {
            localvalue = 80;
        }
    
        if (this->numberobj_21_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_21_value = localvalue;
    }
    
    void numberobj_22_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_22_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_22_value = localvalue;
    }
    
    void numberobj_17_init() {
        this->numberobj_17_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/number_obj-63"), 1, this->_currentTime);
    }
    
    void numberobj_17_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_17_value;
    }
    
    void numberobj_17_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_17_value_set(preset["value"]);
    }
    
    void param_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_03_value;
    }
    
    void param_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_03_value_set(preset["value"]);
    }
    
    void numberobj_18_init() {
        this->numberobj_18_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/number_obj-82"), 1, this->_currentTime);
    }
    
    void numberobj_18_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_18_value;
    }
    
    void numberobj_18_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_18_value_set(preset["value"]);
    }
    
    number phasor_01_ph_next(number freq, number reset) {
        RNBO_UNUSED(reset);
        number pincr = freq * this->phasor_01_ph_conv;
    
        if (this->phasor_01_ph_currentPhase < 0.)
            this->phasor_01_ph_currentPhase = 1. + this->phasor_01_ph_currentPhase;
    
        if (this->phasor_01_ph_currentPhase > 1.)
            this->phasor_01_ph_currentPhase = this->phasor_01_ph_currentPhase - 1.;
    
        number tmp = this->phasor_01_ph_currentPhase;
        this->phasor_01_ph_currentPhase += pincr;
        return tmp;
    }
    
    void phasor_01_ph_reset() {
        this->phasor_01_ph_currentPhase = 0;
    }
    
    void phasor_01_ph_dspsetup() {
        this->phasor_01_ph_conv = (number)1 / this->sr;
    }
    
    void phasor_01_dspsetup(bool force) {
        if ((bool)(this->phasor_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->phasor_01_conv = (number)1 / this->samplerate();
        this->phasor_01_setupDone = true;
        this->phasor_01_ph_dspsetup();
    }
    
    void numberobj_19_init() {
        this->numberobj_19_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/number_obj-24"), 1, this->_currentTime);
    }
    
    void numberobj_19_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_19_value;
    }
    
    void numberobj_19_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_19_value_set(preset["value"]);
    }
    
    void rate_tilde_01_reset() {
        this->rate_tilde_01_currentPhase = 0;
        this->rate_tilde_01_diff = 0;
        this->rate_tilde_01_prev = 0;
        this->rate_tilde_01_mult = 1;
        this->rate_tilde_01_invmult = 1;
        this->rate_tilde_01_wantlock = 1;
        this->rate_tilde_01_quant = 1;
    }
    
    void rate_tilde_01_dspsetup(bool force) {
        if ((bool)(this->rate_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->rate_tilde_01_reset();
        this->rate_tilde_01_setupDone = true;
    }
    
    void numberobj_20_init() {
        this->numberobj_20_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/number_obj-31"), 1, this->_currentTime);
    }
    
    void numberobj_20_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_20_value;
    }
    
    void numberobj_20_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_20_value_set(preset["value"]);
    }
    
    void numberobj_21_init() {
        this->numberobj_21_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/number_obj-15"), 1, this->_currentTime);
    }
    
    void numberobj_21_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_21_value;
    }
    
    void numberobj_21_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_21_value_set(preset["value"]);
    }
    
    void numberobj_22_init() {
        this->numberobj_22_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Pitch/number_obj-4"), 1, this->_currentTime);
    }
    
    void numberobj_22_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_22_value;
    }
    
    void numberobj_22_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_22_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        p_01_target = 0;
        listlookup_01_lookup = { -24, -19, -12, -7, 0, 7, 12, 19, 24 };
        p_02_target = 0;
        numberobj_17_value = 0;
        numberobj_17_value_setter(numberobj_17_value);
        param_03_value = 4;
        numberobj_18_value = 0;
        numberobj_18_value_setter(numberobj_18_value);
        linetilde_02_time = 50;
        linetilde_02_keepramp = 1;
        p_03_target = 0;
        phasor_01_freq = 0;
        numberobj_19_value = 0;
        numberobj_19_value_setter(numberobj_19_value);
        p_04_target = 0;
        rate_tilde_01_phase = 0;
        rate_tilde_01_multiplier = 1;
        numberobj_20_value = 0;
        numberobj_20_value_setter(numberobj_20_value);
        linetilde_03_time = 50;
        linetilde_03_keepramp = 1;
        floatnum_01_input_number = 0;
        floatnum_01_value = 0;
        numberobj_21_value = 0;
        numberobj_21_value_setter(numberobj_21_value);
        numberobj_22_value = 0;
        numberobj_22_value_setter(numberobj_22_value);
        mstosamps_01_ms = 0;
        linetilde_04_time = 50;
        linetilde_04_keepramp = 1;
        ctlin_01_input = 0;
        ctlin_01_controller = 2;
        ctlin_01_channel = -1;
        expr_15_in1 = 0;
        expr_15_in2 = 0.007874015748;
        expr_15_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_17_currentFormat = 6;
        numberobj_17_lastValue = 0;
        param_03_lastValue = 0;
        numberobj_18_currentFormat = 6;
        numberobj_18_lastValue = 0;
        linetilde_02_currentValue = 0;
        phasor_01_sigbuf = nullptr;
        phasor_01_lastLockedPhase = 0;
        phasor_01_conv = 0;
        phasor_01_ph_currentPhase = 0;
        phasor_01_ph_conv = 0;
        phasor_01_setupDone = false;
        numberobj_19_currentFormat = 6;
        numberobj_19_lastValue = 0;
        rate_tilde_01_currentPhase = 0;
        rate_tilde_01_diff = 0;
        rate_tilde_01_prev = 0;
        rate_tilde_01_mult = 1;
        rate_tilde_01_invmult = 1;
        rate_tilde_01_wantlock = 1;
        rate_tilde_01_quant = 1;
        rate_tilde_01_setupDone = false;
        numberobj_20_currentFormat = 6;
        numberobj_20_lastValue = 0;
        linetilde_03_currentValue = 0;
        floatnum_01_stored = 80;
        numberobj_21_currentFormat = 6;
        numberobj_21_lastValue = 0;
        numberobj_22_currentFormat = 6;
        numberobj_22_lastValue = 0;
        linetilde_04_currentValue = 100;
        ctlin_01_status = 0;
        ctlin_01_byte1 = -1;
        ctlin_01_inchan = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number p_01_target;
        list listlookup_01_input;
        list listlookup_01_lookup;
        number p_02_target;
        number numberobj_17_value;
        number param_03_value;
        number numberobj_18_value;
        list linetilde_02_segments;
        number linetilde_02_time;
        number linetilde_02_keepramp;
        number p_03_target;
        number phasor_01_freq;
        number numberobj_19_value;
        number p_04_target;
        number rate_tilde_01_phase;
        number rate_tilde_01_multiplier;
        number numberobj_20_value;
        list linetilde_03_segments;
        number linetilde_03_time;
        number linetilde_03_keepramp;
        number floatnum_01_input_number;
        number floatnum_01_value;
        number numberobj_21_value;
        number numberobj_22_value;
        number mstosamps_01_ms;
        list linetilde_04_segments;
        number linetilde_04_time;
        number linetilde_04_keepramp;
        number ctlin_01_input;
        number ctlin_01_controller;
        number ctlin_01_channel;
        number expr_15_in1;
        number expr_15_in2;
        number expr_15_out1;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[5];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int numberobj_17_currentFormat;
        number numberobj_17_lastValue;
        number param_03_lastValue;
        Int numberobj_18_currentFormat;
        number numberobj_18_lastValue;
        list linetilde_02_activeRamps;
        number linetilde_02_currentValue;
        signal phasor_01_sigbuf;
        number phasor_01_lastLockedPhase;
        number phasor_01_conv;
        number phasor_01_ph_currentPhase;
        number phasor_01_ph_conv;
        bool phasor_01_setupDone;
        Int numberobj_19_currentFormat;
        number numberobj_19_lastValue;
        SampleValue rate_tilde_01_currentPhase;
        SampleValue rate_tilde_01_diff;
        SampleValue rate_tilde_01_prev;
        SampleValue rate_tilde_01_mult;
        SampleValue rate_tilde_01_invmult;
        int rate_tilde_01_wantlock;
        int rate_tilde_01_quant;
        bool rate_tilde_01_setupDone;
        Int numberobj_20_currentFormat;
        number numberobj_20_lastValue;
        list linetilde_03_activeRamps;
        number linetilde_03_currentValue;
        number floatnum_01_stored;
        Int numberobj_21_currentFormat;
        number numberobj_21_lastValue;
        Int numberobj_22_currentFormat;
        number numberobj_22_lastValue;
        list linetilde_04_activeRamps;
        number linetilde_04_currentValue;
        int ctlin_01_status;
        int ctlin_01_byte1;
        int ctlin_01_inchan;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_49* p_01;
        RNBOSubpatcher_50* p_02;
        RNBOSubpatcher_51* p_03;
        RNBOSubpatcher_52* p_04;
    
};

class RNBOSubpatcher_62 : public PatcherInterfaceImpl {
    
    friend class RnboBubble;
    
    public:
    
    class RNBOSubpatcher_53 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_62;
            friend class RnboBubble;
            
            public:
            
            RNBOSubpatcher_53()
            {
            }
            
            ~RNBOSubpatcher_53()
            {
            }
            
            virtual RNBOSubpatcher_62* getPatcher() const {
                return static_cast<RNBOSubpatcher_62 *>(_parentPatcher);
            }
            
            RnboBubble* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -62043057, false);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                this->linetilde_05_perform(this->signals[0], n);
                this->phasor_02_perform(this->signals[0], out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->phasor_02_sigbuf = resizeSignal(this->phasor_02_sigbuf, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->phasor_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -62043057:
                    {
                    this->linetilde_05_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Bubble/LFO~/number_obj-47") == objectId)
                        this->numberobj_23_valin_set(payload);
            
                    if (TAG("Bubble/LFO~/number_obj-41") == objectId)
                        this->numberobj_24_valin_set(payload);
            
                    if (TAG("Bubble/LFO~/number_obj-18") == objectId)
                        this->numberobj_25_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Bubble/LFO~/number_obj-47") == objectId)
                        this->numberobj_23_format_set(payload);
            
                    if (TAG("Bubble/LFO~/number_obj-41") == objectId)
                        this->numberobj_24_format_set(payload);
            
                    if (TAG("Bubble/LFO~/number_obj-18") == objectId)
                        this->numberobj_25_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Bubble/LFO~/number_obj-47"):
                    {
                    return "Bubble/LFO~/number_obj-47";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Bubble/LFO~/number_obj-41"):
                    {
                    return "Bubble/LFO~/number_obj-41";
                    }
                case TAG("Bubble/LFO~/number_obj-18"):
                    {
                    return "Bubble/LFO~/number_obj-18";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void numberobj_23_valin_set(number v) {
                this->numberobj_23_value_set(v);
            }
            
            void numberobj_23_format_set(number v) {
                this->numberobj_23_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_24_valin_set(number v) {
                this->numberobj_24_value_set(v);
            }
            
            void numberobj_24_format_set(number v) {
                this->numberobj_24_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_06_out1_bang_bang() {
                this->numberobj_24_value_bang();
            }
            
            void eventinlet_06_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_24_value_set(converted);
                }
            }
            
            void numberobj_25_valin_set(number v) {
                this->numberobj_25_value_set(v);
            }
            
            void numberobj_25_format_set(number v) {
                this->numberobj_25_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_07_out1_bang_bang() {
                this->numberobj_25_value_bang();
            }
            
            void eventinlet_07_out1_number_set(number v) {
                this->numberobj_25_value_set(v);
            }
            
            void eventinlet_07_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_25_value_set(converted);
                }
            }
            
            void linetilde_05_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->numberobj_23_init();
                this->numberobj_24_init();
                this->numberobj_25_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void linetilde_05_time_set(number v) {
                this->linetilde_05_time = v;
            }
            
            void linetilde_05_segments_set(const list& v) {
                this->linetilde_05_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_05_time == 0) {
                        this->linetilde_05_activeRamps->length = 0;
                        this->linetilde_05_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_05_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_05_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_05_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_05_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_05_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_05_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_05_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_05_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_05_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_05_activeRamps->push(lastRampValue);
                            this->linetilde_05_activeRamps->push(0);
                            this->linetilde_05_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_05_keepramp)) {
                                    this->linetilde_05_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_05_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_05_activeRamps->push(destinationValue);
                            this->linetilde_05_activeRamps->push(inc);
                            this->linetilde_05_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void numberobj_23_output_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_05_segments_set(converted);
                }
            }
            
            void numberobj_23_value_set(number v) {
                this->numberobj_23_value_setter(v);
                v = this->numberobj_23_value;
                number localvalue = v;
            
                if (this->numberobj_23_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/LFO~/number_obj-47"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_23_output_set(localvalue);
            }
            
            void scale_01_out_set(const list& v) {
                this->scale_01_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_23_value_set(converted);
                }
            }
            
            void scale_01_input_set(const list& v) {
                this->scale_01_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_01_inlow,
                        this->scale_01_inhigh,
                        this->scale_01_outlow,
                        this->scale_01_outhigh,
                        this->scale_01_power
                    ));
                }
            
                this->scale_01_out_set(tmp);
            }
            
            void numberobj_24_output_set(number v) {
                {
                    list converted = {v};
                    this->scale_01_input_set(converted);
                }
            }
            
            void numberobj_24_value_set(number v) {
                this->numberobj_24_value_setter(v);
                v = this->numberobj_24_value;
                number localvalue = v;
            
                if (this->numberobj_24_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/LFO~/number_obj-41"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_24_output_set(localvalue);
            }
            
            void eventinlet_06_out1_number_set(number v) {
                this->numberobj_24_value_set(v);
            }
            
            void numberobj_24_value_bang() {
                number v = this->numberobj_24_value;
                number localvalue = v;
            
                if (this->numberobj_24_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/LFO~/number_obj-41"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_24_output_set(localvalue);
            }
            
            void phasor_02_phase_set(number v) {
                if (v >= 0 && (bool)(this->phasor_02_sigbuf)) {
                    this->phasor_02_sigbuf[(Index)this->sampleOffsetIntoNextAudioBuffer] = v;
                }
            }
            
            void numberobj_25_output_set(number v) {
                this->phasor_02_phase_set(v);
            }
            
            void numberobj_25_value_set(number v) {
                this->numberobj_25_value_setter(v);
                v = this->numberobj_25_value;
                number localvalue = v;
            
                if (this->numberobj_25_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/LFO~/number_obj-18"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_25_output_set(localvalue);
            }
            
            void numberobj_25_value_bang() {
                number v = this->numberobj_25_value;
                number localvalue = v;
            
                if (this->numberobj_25_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/LFO~/number_obj-18"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_25_output_set(localvalue);
            }
            
            void linetilde_05_perform(SampleValue * out, Index n) {
                auto __linetilde_05_time = this->linetilde_05_time;
                auto __linetilde_05_keepramp = this->linetilde_05_keepramp;
                auto __linetilde_05_currentValue = this->linetilde_05_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_05_activeRamps->length)) {
                    while ((bool)(this->linetilde_05_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_05_activeRamps[0];
                        number inc = this->linetilde_05_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_05_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_05_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_05_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_05_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -62043057,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_05_keepramp))) {
                                    __linetilde_05_time = 0;
                                }
                            }
                        }
            
                        __linetilde_05_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_05_currentValue;
                    i++;
                }
            
                this->linetilde_05_currentValue = __linetilde_05_currentValue;
                this->linetilde_05_time = __linetilde_05_time;
            }
            
            void phasor_02_perform(const Sample * freq, SampleValue * out, Index n) {
                for (Index i = 0; i < n; i++) {
                    out[(Index)i] = this->phasor_02_ph_next(freq[(Index)i], this->phasor_02_sigbuf[(Index)i]);
                    this->phasor_02_sigbuf[(Index)i] = -1;
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_23_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_23_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_23_value = localvalue;
            }
            
            void numberobj_24_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_24_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_24_value = localvalue;
            }
            
            void numberobj_25_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_25_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_25_value = localvalue;
            }
            
            void numberobj_23_init() {
                this->numberobj_23_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/LFO~/number_obj-47"), 1, this->_currentTime);
            }
            
            void numberobj_23_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_23_value;
            }
            
            void numberobj_23_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_23_value_set(preset["value"]);
            }
            
            void numberobj_24_init() {
                this->numberobj_24_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/LFO~/number_obj-41"), 1, this->_currentTime);
            }
            
            void numberobj_24_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_24_value;
            }
            
            void numberobj_24_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_24_value_set(preset["value"]);
            }
            
            number phasor_02_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->phasor_02_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->phasor_02_ph_conv;
            
                if (this->phasor_02_ph_currentPhase < 0.)
                    this->phasor_02_ph_currentPhase = 1. + this->phasor_02_ph_currentPhase;
            
                if (this->phasor_02_ph_currentPhase > 1.)
                    this->phasor_02_ph_currentPhase = this->phasor_02_ph_currentPhase - 1.;
            
                number tmp = this->phasor_02_ph_currentPhase;
                this->phasor_02_ph_currentPhase += pincr;
                return tmp;
            }
            
            void phasor_02_ph_reset() {
                this->phasor_02_ph_currentPhase = 0;
            }
            
            void phasor_02_ph_dspsetup() {
                this->phasor_02_ph_conv = (number)1 / this->sr;
            }
            
            void phasor_02_dspsetup(bool force) {
                if ((bool)(this->phasor_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->phasor_02_conv = (number)1 / this->samplerate();
                this->phasor_02_setupDone = true;
                this->phasor_02_ph_dspsetup();
            }
            
            void numberobj_25_init() {
                this->numberobj_25_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/LFO~/number_obj-18"), 1, this->_currentTime);
            }
            
            void numberobj_25_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_25_value;
            }
            
            void numberobj_25_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_25_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                linetilde_05_time = 10;
                linetilde_05_keepramp = 1;
                numberobj_23_value = 0;
                numberobj_23_value_setter(numberobj_23_value);
                scale_01_inlow = 0;
                scale_01_inhigh = 100;
                scale_01_outlow = 0.125;
                scale_01_outhigh = 8;
                scale_01_power = 2;
                numberobj_24_value = 0;
                numberobj_24_value_setter(numberobj_24_value);
                phasor_02_freq = 0;
                numberobj_25_value = 0;
                numberobj_25_value_setter(numberobj_25_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                linetilde_05_currentValue = 0;
                numberobj_23_currentFormat = 6;
                numberobj_23_lastValue = 0;
                numberobj_24_currentFormat = 6;
                numberobj_24_lastValue = 0;
                phasor_02_sigbuf = nullptr;
                phasor_02_lastLockedPhase = 0;
                phasor_02_conv = 0;
                phasor_02_ph_currentPhase = 0;
                phasor_02_ph_conv = 0;
                phasor_02_setupDone = false;
                numberobj_25_currentFormat = 6;
                numberobj_25_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list linetilde_05_segments;
                number linetilde_05_time;
                number linetilde_05_keepramp;
                number numberobj_23_value;
                list scale_01_input;
                number scale_01_inlow;
                number scale_01_inhigh;
                number scale_01_outlow;
                number scale_01_outhigh;
                number scale_01_power;
                list scale_01_out;
                number numberobj_24_value;
                number phasor_02_freq;
                number numberobj_25_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                list linetilde_05_activeRamps;
                number linetilde_05_currentValue;
                Int numberobj_23_currentFormat;
                number numberobj_23_lastValue;
                Int numberobj_24_currentFormat;
                number numberobj_24_lastValue;
                signal phasor_02_sigbuf;
                number phasor_02_lastLockedPhase;
                number phasor_02_conv;
                number phasor_02_ph_currentPhase;
                number phasor_02_ph_conv;
                bool phasor_02_setupDone;
                Int numberobj_25_currentFormat;
                number numberobj_25_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_54 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_62;
            friend class RnboBubble;
            
            public:
            
            RNBOSubpatcher_54()
            {
            }
            
            ~RNBOSubpatcher_54()
            {
            }
            
            virtual RNBOSubpatcher_62* getPatcher() const {
                return static_cast<RNBOSubpatcher_62 *>(_parentPatcher);
            }
            
            RnboBubble* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            template <typename T> void listswapelements(T& arr, Int a, Int b) {
                auto tmp = arr[(Index)a];
                arr[(Index)a] = arr[(Index)b];
                arr[(Index)b] = tmp;
            }
            
            template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
                number x = arr[(Index)h];
                Int i = (Int)(l - 1);
            
                for (Int j = (Int)(l); j <= h - 1; j++) {
                    bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
                    bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);
            
                    if ((bool)(asc) || (bool)(desc)) {
                        i++;
                        this->listswapelements(arr, i, j);
                        this->listswapelements(sortindices, i, j);
                    }
                }
            
                i++;
                this->listswapelements(arr, i, h);
                this->listswapelements(sortindices, i, h);
                return i;
            }
            
            template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
                if (l < h) {
                    Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
                    this->listquicksort(arr, sortindices, l, p - 1, ascending);
                    this->listquicksort(arr, sortindices, p + 1, h, ascending);
                }
            }
            
            array<list, 2> listsort(const list& input, number order) {
                array<list, 2> tmp = {};
                tmp[0] = input;
                tmp[1] = {};
            
                for (Index i = 0; i < tmp[0]->length; i++) {
                    tmp[1]->push(i);
                }
            
                this->listquicksort(tmp[0], tmp[1], 0, (Int)(tmp[0]->length - 1), (order >= 0 ? 1 : 0));
                return tmp;
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            MillisecondTime currenttime() {
                return this->_currentTime;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Bubble/TapTempo/number_obj-75") == objectId)
                        this->numberobj_26_valin_set(payload);
            
                    if (TAG("Bubble/TapTempo/number_obj-64") == objectId)
                        this->numberobj_27_valin_set(payload);
            
                    if (TAG("Bubble/TapTempo/number_obj-19") == objectId)
                        this->numberobj_28_valin_set(payload);
            
                    if (TAG("Bubble/TapTempo/number_obj-17") == objectId)
                        this->numberobj_29_valin_set(payload);
            
                    if (TAG("Bubble/TapTempo/number_obj-6") == objectId)
                        this->numberobj_30_valin_set(payload);
            
                    if (TAG("Bubble/TapTempo/number_obj-70") == objectId)
                        this->numberobj_31_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Bubble/TapTempo/number_obj-75") == objectId)
                        this->numberobj_26_format_set(payload);
            
                    if (TAG("Bubble/TapTempo/number_obj-64") == objectId)
                        this->numberobj_27_format_set(payload);
            
                    if (TAG("Bubble/TapTempo/number_obj-19") == objectId)
                        this->numberobj_28_format_set(payload);
            
                    if (TAG("Bubble/TapTempo/number_obj-17") == objectId)
                        this->numberobj_29_format_set(payload);
            
                    if (TAG("Bubble/TapTempo/number_obj-6") == objectId)
                        this->numberobj_30_format_set(payload);
            
                    if (TAG("Bubble/TapTempo/number_obj-70") == objectId)
                        this->numberobj_31_format_set(payload);
            
                    break;
                    }
                case TAG("tap-tempo"):
                    {
                    this->inport_01_value_number_set(payload);
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Bubble/TapTempo/message_obj-7") == objectId)
                        this->message_03_listin_number_set(payload);
            
                    break;
                    }
                case TAG("tap-mult"):
                    {
                    this->inport_02_value_number_set(payload);
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("tap-tempo"):
                    {
                    this->inport_01_value_list_set(payload);
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Bubble/TapTempo/message_obj-7") == objectId)
                        this->message_03_listin_list_set(payload);
            
                    break;
                    }
                case TAG("tap-mult"):
                    {
                    this->inport_02_value_list_set(payload);
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("bangin"):
                    {
                    if (TAG("Bubble/TapTempo/button_obj-35") == objectId)
                        this->button_01_bangin_bang();
            
                    if (TAG("Bubble/TapTempo/button_obj-3") == objectId)
                        this->button_02_bangin_bang();
            
                    if (TAG("Bubble/TapTempo/button_obj-52") == objectId)
                        this->button_03_bangin_bang();
            
                    break;
                    }
                case TAG("tap-tempo"):
                    {
                    this->inport_01_value_bang_bang();
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Bubble/TapTempo/message_obj-7") == objectId)
                        this->message_03_listin_bang_bang();
            
                    break;
                    }
                case TAG("tap-mult"):
                    {
                    this->inport_02_value_bang_bang();
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("Bubble/TapTempo/button_obj-35"):
                    {
                    return "Bubble/TapTempo/button_obj-35";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Bubble/TapTempo/number_obj-75"):
                    {
                    return "Bubble/TapTempo/number_obj-75";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Bubble/TapTempo/number_obj-64"):
                    {
                    return "Bubble/TapTempo/number_obj-64";
                    }
                case TAG("Bubble/TapTempo/number_obj-19"):
                    {
                    return "Bubble/TapTempo/number_obj-19";
                    }
                case TAG("Bubble/TapTempo/number_obj-17"):
                    {
                    return "Bubble/TapTempo/number_obj-17";
                    }
                case TAG("Bubble/TapTempo/number_obj-6"):
                    {
                    return "Bubble/TapTempo/number_obj-6";
                    }
                case TAG("Bubble/TapTempo/button_obj-3"):
                    {
                    return "Bubble/TapTempo/button_obj-3";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Bubble/TapTempo/message_obj-7"):
                    {
                    return "Bubble/TapTempo/message_obj-7";
                    }
                case TAG("Bubble/TapTempo/number_obj-70"):
                    {
                    return "Bubble/TapTempo/number_obj-70";
                    }
                case TAG("Bubble/TapTempo/button_obj-52"):
                    {
                    return "Bubble/TapTempo/button_obj-52";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("tap-tempo"):
                    {
                    return "tap-tempo";
                    }
                case TAG(""):
                    {
                    return "";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("tap-mult"):
                    {
                    return "tap-mult";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void button_01_bangin_bang() {
                this->button_01_bangval_bang();
            }
            
            void numberobj_26_valin_set(number v) {
                this->numberobj_26_value_set(v);
            }
            
            void numberobj_26_format_set(number v) {
                this->numberobj_26_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_27_valin_set(number v) {
                this->numberobj_27_value_set(v);
            }
            
            void numberobj_27_format_set(number v) {
                this->numberobj_27_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_28_valin_set(number v) {
                this->numberobj_28_value_set(v);
            }
            
            void numberobj_28_format_set(number v) {
                this->numberobj_28_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_29_valin_set(number v) {
                this->numberobj_29_value_set(v);
            }
            
            void numberobj_29_format_set(number v) {
                this->numberobj_29_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_30_valin_set(number v) {
                this->numberobj_30_value_set(v);
            }
            
            void numberobj_30_format_set(number v) {
                this->numberobj_30_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void button_02_bangin_bang() {
                this->button_02_bangval_bang();
            }
            
            void inport_01_value_bang_bang() {
                this->inport_01_out_bang_bang();
            }
            
            void inport_01_value_number_set(number v) {
                this->inport_01_out_number_set(v);
            }
            
            void inport_01_value_list_set(const list& v) {
                this->inport_01_out_list_set(v);
            }
            
            void message_03_listin_list_set(const list& v) {
                this->message_03_set_set(v);
            }
            
            void message_03_listin_number_set(number v) {
                this->message_03_set_set(v);
            }
            
            void message_03_listin_bang_bang() {
                this->message_03_trigger_bang();
            }
            
            void numberobj_31_valin_set(number v) {
                this->numberobj_31_value_set(v);
            }
            
            void numberobj_31_format_set(number v) {
                this->numberobj_31_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void inport_02_value_bang_bang() {
                this->inport_02_out_bang_bang();
            }
            
            void inport_02_value_number_set(number v) {
                this->inport_02_out_number_set(v);
            }
            
            void inport_02_value_list_set(const list& v) {
                this->inport_02_out_list_set(v);
            }
            
            void button_03_bangin_bang() {
                this->button_03_bangval_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->numberobj_26_init();
                this->numberobj_27_init();
                this->numberobj_28_init();
                this->numberobj_29_init();
                this->numberobj_30_init();
                this->message_03_init();
                this->numberobj_31_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void button_01_output_bang() {}
            
            void button_01_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Bubble/TapTempo/button_obj-35"), this->_currentTime);;
                this->button_01_output_bang();
            }
            
            void eventoutlet_03_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_06_out1_number_set(v);
            }
            
            void trigger_01_out2_set(number v) {
                this->eventoutlet_03_in1_number_set(v);
            }
            
            void eventoutlet_04_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_06_out2_list_set((list)v);
            }
            
            void message_03_out_set(const list& v) {
                this->eventoutlet_04_in1_list_set(v);
            }
            
            void message_03_trigger_bang() {
                this->message_03_out_set(this->message_03_set);
            }
            
            void trigger_01_out1_bang() {
                this->message_03_trigger_bang();
            }
            
            void trigger_01_input_number_set(number v) {
                this->trigger_01_out2_set(v);
                this->trigger_01_out1_bang();
            }
            
            void numberobj_29_output_set(number v) {
                this->trigger_01_input_number_set(v);
            }
            
            void numberobj_29_value_set(number v) {
                this->numberobj_29_value_setter(v);
                v = this->numberobj_29_value;
                number localvalue = v;
            
                if (this->numberobj_29_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/TapTempo/number_obj-17"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_29_output_set(localvalue);
            }
            
            void scale_02_out_set(const list& v) {
                this->scale_02_out = jsCreateListCopy(v);
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_29_value_set(converted);
                }
            }
            
            void scale_02_input_set(const list& v) {
                this->scale_02_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_02_inlow,
                        this->scale_02_inhigh,
                        this->scale_02_outlow,
                        this->scale_02_outhigh,
                        this->scale_02_power
                    ));
                }
            
                this->scale_02_out_set(tmp);
            }
            
            void expr_17_out1_set(number v) {
                this->expr_17_out1 = v;
            
                {
                    list converted = {this->expr_17_out1};
                    this->scale_02_input_set(converted);
                }
            }
            
            void expr_17_in1_set(number in1) {
                this->expr_17_in1 = in1;
            
                this->expr_17_out1_set(
                    (this->expr_17_in1 > this->expr_17_in3 ? this->expr_17_in3 : (this->expr_17_in1 < this->expr_17_in2 ? this->expr_17_in2 : this->expr_17_in1))
                );//#map:Bubble/TapTempo/clip_obj-14:1
            }
            
            void numberobj_28_output_set(number v) {
                this->expr_17_in1_set(v);
            }
            
            void numberobj_28_value_set(number v) {
                this->numberobj_28_value_setter(v);
                v = this->numberobj_28_value;
                number localvalue = v;
            
                if (this->numberobj_28_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/TapTempo/number_obj-19"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_28_output_set(localvalue);
            }
            
            void expr_18_out1_set(number v) {
                this->expr_18_out1 = v;
                this->numberobj_28_value_set(this->expr_18_out1);
            }
            
            void expr_18_in1_set(number in1) {
                this->expr_18_in1 = in1;
                this->expr_18_out1_set((this->expr_18_in1 == 0. ? 0. : this->expr_18_in2 / this->expr_18_in1));//#map:Bubble/TapTempo/!/_obj-10:1
            }
            
            void numberobj_26_output_set(number v) {
                this->expr_18_in1_set(v);
            }
            
            void numberobj_26_value_set(number v) {
                this->numberobj_26_value_setter(v);
                v = this->numberobj_26_value;
                number localvalue = v;
            
                if (this->numberobj_26_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/TapTempo/number_obj-75"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_26_output_set(localvalue);
            }
            
            void expr_16_out1_set(number v) {
                this->expr_16_out1 = v;
                this->numberobj_26_value_set(this->expr_16_out1);
            }
            
            void expr_16_in1_set(number in1) {
                this->expr_16_in1 = in1;
                this->expr_16_out1_set(this->expr_16_in1 * this->expr_16_in2);//#map:Bubble/TapTempo/*_obj-72:1
            }
            
            void numberobj_27_output_set(number v) {
                this->expr_16_in1_set(v);
            }
            
            void numberobj_27_value_set(number v) {
                this->numberobj_27_value_setter(v);
                v = this->numberobj_27_value;
                number localvalue = v;
            
                if (this->numberobj_27_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/TapTempo/number_obj-64"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_27_output_set(localvalue);
            }
            
            void listmedian_01_out1_set(number v) {
                this->numberobj_27_value_set(v);
                this->button_01_bangval_bang();
            }
            
            void listmedian_01_input_set(const list& input) {
                this->listmedian_01_input = jsCreateListCopy(input);
            
                if (input->length == 1) {
                    this->listmedian_01_out1_set(input[0]);
                    return;
                }
            
                auto sortedlistAndIndices = this->listsort(input, 1);
                const list& sortedList = sortedlistAndIndices[0];
                number median;
                number l = sortedList->length / (number)2;
                number lf = rnbo_floor(l);
            
                if (l > lf) {
                    median = sortedList[(Index)lf];
                } else {
                    median = (sortedList[(Index)(l - 1)] + sortedList[(Index)l]) / (number)2;
                }
            
                {
                    this->listmedian_01_out1_set(median);
                    return;
                }
            }
            
            void gate_01_out1_list_set(const list& v) {
                this->gate_01_out1_list = jsCreateListCopy(v);
                this->listmedian_01_input_set(v);
            }
            
            void gate_01_input_list_set(const list& v) {
                if (this->gate_01_onoff == 1)
                    this->gate_01_out1_list_set(v);
            }
            
            void listgroup_01_out_set(const list& v) {
                this->gate_01_input_list_set(v);
            }
            
            void listgroup_01_input_number_set(number v) {
                this->listgroup_01_grouped = this->listgroup_01_grouped->concat(v);
                this->listgroup_01_checkOutput();
            }
            
            void numberobj_30_output_set(number v) {
                this->listgroup_01_input_number_set(v);
            }
            
            void numberobj_30_value_set(number v) {
                this->numberobj_30_value_setter(v);
                v = this->numberobj_30_value;
                number localvalue = v;
            
                if (this->numberobj_30_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/TapTempo/number_obj-6"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_30_output_set(localvalue);
            }
            
            void split_01_out1_set(number v) {
                this->numberobj_30_value_set(v);
            }
            
            void gate_01_onoff_set(number v) {
                this->gate_01_onoff = v;
            }
            
            void trigger_02_out3_set(number v) {
                this->gate_01_onoff_set(v);
            }
            
            void listgroup_01_input_bang_bang() {
                if (this->listgroup_01_grouped->length > 0) {
                    this->listgroup_01_out_set(this->listgroup_01_grouped);
                    this->listgroup_01_grouped->length = 0;
                }
            }
            
            void trigger_02_out2_bang() {
                this->listgroup_01_input_bang_bang();
            }
            
            void trigger_02_out1_set(number v) {
                this->gate_01_onoff_set(v);
            }
            
            void trigger_02_input_bang_bang() {
                this->trigger_02_out3_set(0);
                this->trigger_02_out2_bang();
                this->trigger_02_out1_set(1);
            }
            
            void button_03_output_bang() {
                this->trigger_02_input_bang_bang();
            }
            
            void button_03_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Bubble/TapTempo/button_obj-52"), this->_currentTime);;
                this->button_03_output_bang();
            }
            
            void split_01_out2_set(number v) {
                RNBO_UNUSED(v);
                this->button_03_bangval_bang();
            }
            
            void split_01_input_set(number v) {
                this->split_01_input = v;
            
                if (v >= this->split_01_min && v <= this->split_01_max)
                    this->split_01_out1_set(v);
                else
                    this->split_01_out2_set(v);
            }
            
            void timer_01_out_set(number v) {
                this->split_01_input_set(v);
            }
            
            void timer_01_end_bang() {
                this->timer_01_elapsed = this->currenttime();
                this->timer_01_out_set(this->timer_01_elapsed - this->timer_01_starttime);
                this->timer_01_elapsed = 0;
            }
            
            void timer_01_start_bang() {
                this->timer_01_starttime = this->currenttime();
            }
            
            void button_02_output_bang() {
                this->timer_01_end_bang();
                this->timer_01_start_bang();
            }
            
            void button_02_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Bubble/TapTempo/button_obj-3"), this->_currentTime);;
                this->button_02_output_bang();
            }
            
            void inport_01_out_bang_bang() {
                this->button_02_bangval_bang();
            }
            
            void inport_01_out_number_set(number v) {
                RNBO_UNUSED(v);
                this->button_02_bangval_bang();
            }
            
            void inport_01_out_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->button_02_bangval_bang();
            }
            
            void message_03_set_set(const list& v) {
                this->message_03_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Bubble/TapTempo/message_obj-7"),
                    v,
                    this->_currentTime
                );
            }
            
            void expr_16_in2_set(number v) {
                this->expr_16_in2 = v;
            }
            
            void numberobj_31_output_set(number v) {
                this->expr_16_in2_set(v);
            }
            
            void numberobj_31_value_set(number v) {
                this->numberobj_31_value_setter(v);
                v = this->numberobj_31_value;
                number localvalue = v;
            
                if (this->numberobj_31_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/TapTempo/number_obj-70"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_31_output_set(localvalue);
            }
            
            void numberobj_31_value_bang() {
                number v = this->numberobj_31_value;
                number localvalue = v;
            
                if (this->numberobj_31_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Bubble/TapTempo/number_obj-70"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_31_output_set(localvalue);
            }
            
            void inport_02_out_bang_bang() {
                this->numberobj_31_value_bang();
            }
            
            void inport_02_out_number_set(number v) {
                this->numberobj_31_value_set(v);
            }
            
            void inport_02_out_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_31_value_set(converted);
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_26_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_26_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_26_value = localvalue;
            }
            
            void numberobj_27_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_27_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_27_value = localvalue;
            }
            
            void numberobj_28_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_28_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_28_value = localvalue;
            }
            
            void numberobj_29_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_29_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_29_value = localvalue;
            }
            
            void numberobj_30_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_30_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_30_value = localvalue;
            }
            
            void numberobj_31_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_31_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_31_value = localvalue;
            }
            
            void numberobj_26_init() {
                this->numberobj_26_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/TapTempo/number_obj-75"), 1, this->_currentTime);
            }
            
            void numberobj_26_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_26_value;
            }
            
            void numberobj_26_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_26_value_set(preset["value"]);
            }
            
            void numberobj_27_init() {
                this->numberobj_27_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/TapTempo/number_obj-64"), 1, this->_currentTime);
            }
            
            void numberobj_27_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_27_value;
            }
            
            void numberobj_27_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_27_value_set(preset["value"]);
            }
            
            void numberobj_28_init() {
                this->numberobj_28_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/TapTempo/number_obj-19"), 1, this->_currentTime);
            }
            
            void numberobj_28_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_28_value;
            }
            
            void numberobj_28_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_28_value_set(preset["value"]);
            }
            
            void numberobj_29_init() {
                this->numberobj_29_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/TapTempo/number_obj-17"), 1, this->_currentTime);
            }
            
            void numberobj_29_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_29_value;
            }
            
            void numberobj_29_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_29_value_set(preset["value"]);
            }
            
            void numberobj_30_init() {
                this->numberobj_30_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/TapTempo/number_obj-6"), 1, this->_currentTime);
            }
            
            void numberobj_30_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_30_value;
            }
            
            void numberobj_30_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_30_value_set(preset["value"]);
            }
            
            void listgroup_01_checkOutput() {
                const Index isize = (const Index)(this->listgroup_01_size);
            
                while (this->listgroup_01_grouped->length >= isize && this->listgroup_01_size > 0) {
                    list tmp = list();
            
                    for (Index i = 0; i < isize; i++) {
                        tmp->push(this->listgroup_01_grouped[(Index)i]);
                    }
            
                    this->listgroup_01_out_set(tmp);
                    this->listgroup_01_grouped->splice(0, isize);
                }
            }
            
            void message_03_init() {
                this->message_03_set_set({0});
            }
            
            void numberobj_31_init() {
                this->numberobj_31_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/TapTempo/number_obj-70"), 1, this->_currentTime);
            }
            
            void numberobj_31_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_31_value;
            }
            
            void numberobj_31_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_31_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                numberobj_26_value = 0;
                numberobj_26_value_setter(numberobj_26_value);
                expr_16_in1 = 0;
                expr_16_in2 = 1;
                expr_16_out1 = 0;
                gate_01_onoff = 1;
                gate_01_out1_number = 0;
                numberobj_27_value = 0;
                numberobj_27_value_setter(numberobj_27_value);
                expr_17_in1 = 0;
                expr_17_in2 = 0.125;
                expr_17_in3 = 8;
                expr_17_out1 = 0;
                numberobj_28_value = 0;
                numberobj_28_value_setter(numberobj_28_value);
                numberobj_29_value = 0;
                numberobj_29_value_setter(numberobj_29_value);
                expr_18_in1 = 0;
                expr_18_in2 = 1000;
                expr_18_out1 = 0;
                scale_02_inlow = 0.125;
                scale_02_inhigh = 8;
                scale_02_outlow = 0;
                scale_02_outhigh = 100;
                scale_02_power = 0.5;
                numberobj_30_value = 0;
                numberobj_30_value_setter(numberobj_30_value);
                listgroup_01_size = 2;
                split_01_input = 0;
                split_01_min = 0;
                split_01_max = 2000;
                numberobj_31_value = 0;
                numberobj_31_value_setter(numberobj_31_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_26_currentFormat = 6;
                numberobj_26_lastValue = 0;
                numberobj_27_currentFormat = 6;
                numberobj_27_lastValue = 0;
                numberobj_28_currentFormat = 6;
                numberobj_28_lastValue = 0;
                numberobj_29_currentFormat = 6;
                numberobj_29_lastValue = 0;
                numberobj_30_currentFormat = 6;
                numberobj_30_lastValue = 0;
                timer_01_starttime = 0;
                timer_01_elapsed = 0;
                numberobj_31_currentFormat = 6;
                numberobj_31_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number numberobj_26_value;
                number expr_16_in1;
                number expr_16_in2;
                number expr_16_out1;
                number gate_01_onoff;
                number gate_01_out1_number;
                list gate_01_out1_list;
                number numberobj_27_value;
                list listmedian_01_input;
                number expr_17_in1;
                number expr_17_in2;
                number expr_17_in3;
                number expr_17_out1;
                number numberobj_28_value;
                number numberobj_29_value;
                number expr_18_in1;
                number expr_18_in2;
                number expr_18_out1;
                list scale_02_input;
                number scale_02_inlow;
                number scale_02_inhigh;
                number scale_02_outlow;
                number scale_02_outhigh;
                number scale_02_power;
                list scale_02_out;
                number numberobj_30_value;
                number listgroup_01_size;
                number split_01_input;
                number split_01_min;
                number split_01_max;
                list message_03_set;
                number numberobj_31_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_26_currentFormat;
                number numberobj_26_lastValue;
                Int numberobj_27_currentFormat;
                number numberobj_27_lastValue;
                Int numberobj_28_currentFormat;
                number numberobj_28_lastValue;
                Int numberobj_29_currentFormat;
                number numberobj_29_lastValue;
                Int numberobj_30_currentFormat;
                number numberobj_30_lastValue;
                list listgroup_01_grouped;
                MillisecondTime timer_01_starttime;
                MillisecondTime timer_01_elapsed;
                Int numberobj_31_currentFormat;
                number numberobj_31_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_62()
    {
    }
    
    ~RNBOSubpatcher_62()
    {
        delete this->p_05;
        delete this->p_06;
    }
    
    virtual RnboBubble* getPatcher() const {
        return static_cast<RnboBubble *>(_parentPatcher);
    }
    
    RnboBubble* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1987572531, false);
        getEngine()->flushClockEvents(this, 1935387534, false);
        getEngine()->flushClockEvents(this, 2098551528, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
        getEngine()->flushClockEvents(this, -62043057, false);
        getEngine()->flushClockEvents(this, -1621164530, false);
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number maximum(number x, number y) {
        return (x < y ? y : x);
    }
    
    number wrap(number x, number low, number high) {
        number lo;
        number hi;
    
        if (low == high)
            return low;
    
        if (low > high) {
            hi = low;
            lo = high;
        } else {
            lo = low;
            hi = high;
        }
    
        number range = hi - lo;
    
        if (x >= lo && x < hi)
            return x;
    
        if (range <= 0.000000001)
            return lo;
    
        long numWraps = (long)(trunc((x - lo) / range));
        numWraps = numWraps - ((x < lo ? 1 : 0));
        number result = x - range * numWraps;
    
        if (result >= hi)
            return result - range;
        else
            return result;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    inline number cubicinterp(number a, number w, number x, number y, number z) {
        number a1 = 1. + a;
        number aa = a * a1;
        number b = 1. - a;
        number b1 = 2. - a;
        number bb = b * b1;
        number fw = -.1666667 * bb * a;
        number fx = .5 * bb * a1;
        number fy = .5 * aa * b1;
        number fz = -.1666667 * aa * b;
        return w * fw + x * fx + y * fy + z * fz;
    }
    
    inline number fastcubicinterp(number a, number w, number x, number y, number z) {
        number a2 = a * a;
        number f0 = z - y - w + x;
        number f1 = w - x - f0;
        number f2 = y - w;
        number f3 = x;
        return f0 * a * a2 + f1 * a2 + f2 * a + f3;
    }
    
    inline number splineinterp(number a, number w, number x, number y, number z) {
        number a2 = a * a;
        number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
        number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
        number f2 = -0.5 * w + 0.5 * y;
        return f0 * a * a2 + f1 * a2 + f2 * a + x;
    }
    
    inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
        number ym2py2 = y0 + y4;
        number ym1py1 = y1 + y3;
        number y2mym2 = y4 - y0;
        number y1mym1 = y3 - y1;
        number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
        number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
        number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
        number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
        number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
        number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
        number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
        return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
    }
    
    inline number cosT8(number r) {
        number t84 = 56.0;
        number t83 = 1680.0;
        number t82 = 20160.0;
        number t81 = 2.4801587302e-05;
        number t73 = 42.0;
        number t72 = 840.0;
        number t71 = 1.9841269841e-04;
    
        if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
            number rr = r * r;
            return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
        } else if (r > 0.0) {
            r -= 1.57079632679489661923132169163975144;
            number rr = r * r;
            return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
        } else {
            r += 1.57079632679489661923132169163975144;
            number rr = r * r;
            return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
        }
    }
    
    inline number cosineinterp(number frac, number x, number y) {
        number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
        return x * (1.0 - a2) + y * a2;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    Index vectorsize() const {
        return this->vs;
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    ParameterValue fromnormalized(ParameterIndex index, ParameterValue normalizedValue) {
        return this->convertFromNormalizedParameterValue(index, normalizedValue);
    }
    
    number tempo() {
        return this->getTopLevelPatcher()->globaltransport_getTempo(this->currenttime());
    }
    
    number tickstoms(number ticks) {
        return ticks / (number)480 * this->safediv(60, this->tempo()) * 1000;
    }
    
    Index getNumMidiInputPorts() const {
        return 1;
    }
    
    void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
        this->updateTime(time);
        this->ctlin_02_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_03_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
    }
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
        SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        const SampleValue * in5 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
        const SampleValue * in6 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
        this->p_05_perform(this->signals[0], n);
        this->triangle_tilde_02_perform(this->signals[0], this->triangle_tilde_02_duty, this->signals[1], n);
        this->dspexpr_29_perform(this->signals[1], this->dspexpr_29_in2, this->signals[2], n);
    
        this->slide_tilde_02_perform(
            this->signals[2],
            this->slide_tilde_02_up,
            this->slide_tilde_02_down,
            this->signals[1],
            n
        );
    
        this->dspexpr_28_perform(this->signals[1], this->signals[2], n);
        this->numbertilde_08_perform(this->signals[1], this->dummyBuffer, n);
        this->triangle_tilde_01_perform(this->signals[0], this->triangle_tilde_01_duty, this->signals[1], n);
        this->dspexpr_27_perform(this->signals[1], this->dspexpr_27_in2, this->signals[0], n);
    
        this->slide_tilde_01_perform(
            this->signals[0],
            this->slide_tilde_01_up,
            this->slide_tilde_01_down,
            this->signals[1],
            n
        );
    
        this->dspexpr_26_perform(this->signals[1], this->signals[0], n);
        this->mstosamps_tilde_01_perform(this->signals[0], this->signals[3], n);
        this->numbertilde_07_perform(this->signals[1], this->dummyBuffer, n);
        this->p_06_perform(n);
        this->delaytilde_06_perform(this->delaytilde_06_delay, in1, this->signals[1], n);
        this->delaytilde_05_perform(this->signals[3], this->signals[1], this->signals[0], n);
        this->delaytilde_08_perform(this->delaytilde_08_delay, in2, this->signals[3], n);
        this->delaytilde_07_perform(this->signals[2], this->signals[3], this->signals[1], n);
        this->linetilde_06_perform(this->signals[2], n);
        this->linetilde_07_perform(this->signals[3], n);
        this->dspexpr_33_perform(this->signals[0], this->signals[3], this->signals[4], n);
        this->dspexpr_34_perform(this->signals[4], in5, this->signals[5], n);
        this->delaytilde_09_perform(this->delaytilde_09_delay, this->signals[5], this->signals[4], n);
        this->dspexpr_32_perform(this->signals[4], this->signals[3], this->signals[5], n);
    
        this->reson_tilde_01_perform(
            this->signals[5],
            this->signals[2],
            this->reson_tilde_01_resonanceValue,
            out3,
            n
        );
    
        this->dspexpr_30_perform(this->signals[0], this->signals[4], out1, n);
        this->dspexpr_36_perform(this->signals[1], this->signals[3], this->signals[4], n);
        this->dspexpr_37_perform(this->signals[4], in6, this->signals[0], n);
        this->delaytilde_10_perform(this->delaytilde_10_delay, this->signals[0], this->signals[4], n);
        this->dspexpr_35_perform(this->signals[4], this->signals[3], this->signals[0], n);
    
        this->reson_tilde_02_perform(
            this->signals[0],
            this->signals[2],
            this->reson_tilde_02_resonanceValue,
            out4,
            n
        );
    
        this->dspexpr_31_perform(this->signals[1], this->signals[4], out2, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 6; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->numbertilde_08_dspsetup(forceDSPSetup);
        this->numbertilde_07_dspsetup(forceDSPSetup);
        this->delaytilde_06_dspsetup(forceDSPSetup);
        this->delaytilde_05_dspsetup(forceDSPSetup);
        this->delaytilde_08_dspsetup(forceDSPSetup);
        this->delaytilde_07_dspsetup(forceDSPSetup);
        this->delaytilde_09_dspsetup(forceDSPSetup);
        this->reson_tilde_01_dspsetup(forceDSPSetup);
        this->delaytilde_10_dspsetup(forceDSPSetup);
        this->reson_tilde_02_dspsetup(forceDSPSetup);
        this->p_05->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_06->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double samplerate) {
        this->timevalue_01_onSampleRateChanged(samplerate);
    }
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_05->processTempoEvent(time, tempo);
        this->p_06->processTempoEvent(time, tempo);
        this->transport_01_onTempoChanged(tempo);
        this->timevalue_01_onTempoChanged(tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_05->processTransportEvent(time, state);
        this->p_06->processTransportEvent(time, state);
        this->metro_01_onTransportChanged(state);
        this->metro_02_onTransportChanged(state);
        this->transport_01_onTransportChanged(state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_05->processBeatTimeEvent(time, beattime);
        this->p_06->processBeatTimeEvent(time, beattime);
        this->metro_01_onBeatTimeChanged(beattime);
        this->metro_02_onBeatTimeChanged(beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_05->processTimeSignatureEvent(time, numerator, denominator);
        this->p_06->processTimeSignatureEvent(time, numerator, denominator);
        this->transport_01_onTimeSignatureChanged(numerator, denominator);
        this->timevalue_01_onTimeSignatureChanged(numerator, denominator);
    }
    
    void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
        this->updateTime(time);
        this->p_05->processBBUEvent(time, bars, beats, units);
        this->p_06->processBBUEvent(time, bars, beats, units);
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_05 = new RNBOSubpatcher_53();
        this->p_05->setEngineAndPatcher(this->getEngine(), this);
        this->p_05->initialize();
        this->p_05->setParameterOffset(this->getParameterOffset(this->p_05));
        this->p_06 = new RNBOSubpatcher_54();
        this->p_06->setEngineAndPatcher(this->getEngine(), this);
        this->p_06->initialize();
        this->p_06->setParameterOffset(this->getParameterOffset(this->p_06));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_04_getPresetValue(getSubState(preset, "rate"));
        this->param_05_getPresetValue(getSubState(preset, "depth"));
        this->param_06_getPresetValue(getSubState(preset, "burst"));
        this->p_05->getPreset(getSubState(getSubState(preset, "__sps"), "LFO~"));
        this->p_06->getPreset(getSubState(getSubState(preset, "__sps"), "TapTempo"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_04_value_set(v);
            break;
            }
        case 1:
            {
            this->param_05_value_set(v);
            break;
            }
        case 2:
            {
            this->param_06_value_set(v);
            break;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_05->getNumParameters())
                this->p_05->setParameterValue(index, v, time);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                this->p_06->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_04_value;
            }
        case 1:
            {
            return this->param_05_value;
            }
        case 2:
            {
            return this->param_06_value;
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterValue(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 3 + this->p_05->getNumParameters() + this->p_06->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "rate";
            }
        case 1:
            {
            return "depth";
            }
        case 2:
            {
            return "burst";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterName(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "Bubble/rate";
            }
        case 1:
            {
            return "Bubble/depth";
            }
        case 2:
            {
            return "Bubble/burst";
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterId(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 25;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Rate";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Depth";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 2:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 7;
                info->min = 0;
                info->max = 2;
                info->exponent = 1;
                info->steps = 3;
                static const char * eVal2[] = {"4", "8", "16"};
                info->enumValues = eVal2;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 3;
    
                if (index < this->p_05->getNumParameters())
                    this->p_05->getParameterInfo(index, info);
    
                index -= this->p_05->getNumParameters();
    
                if (index < this->p_06->getNumParameters())
                    this->p_06->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_05)
            return 3;
    
        if (subpatcher == this->p_06)
            return 3 + this->p_05->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 2:
            {
            {
                value = (value < 0 ? 0 : (value > 2 ? 2 : value));
                ParameterValue normalizedValue = (value - 0) / (2 - 0);
    
                {
                    normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 3);
                }
    
                return normalizedValue;
            }
            }
        case 0:
        case 1:
            {
            {
                value = (value < 0 ? 0 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 0) / (100 - 0);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 2:
            {
            {
                {
                    value = this->applyStepsToNormalizedParameterValue(value, 3);
                }
    
                {
                    return 0 + value * (2 - 0);
                }
            }
            }
        case 0:
        case 1:
            {
            {
                {
                    return 0 + value * (100 - 0);
                }
            }
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_04_value_constrain(value);
            }
        case 1:
            {
            return this->param_05_value_constrain(value);
            }
        case 2:
            {
            return this->param_06_value_constrain(value);
            }
        default:
            {
            index -= 3;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->constrainParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1987572531:
            {
            this->metro_01_tick_bang();
            break;
            }
        case 1935387534:
            {
            this->metro_02_tick_bang();
            break;
            }
        case 2098551528:
            {
            this->numbertilde_08_value_set(value);
            break;
            }
        case -1494586265:
            {
            this->numbertilde_07_value_set(value);
            break;
            }
        case -62043057:
            {
            this->linetilde_06_target_bang();
            break;
            }
        case -1621164530:
            {
            this->linetilde_07_target_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("Bubble/number_obj-41") == objectId)
                this->numberobj_32_valin_set(payload);
    
            if (TAG("Bubble/number_obj-60") == objectId)
                this->numberobj_33_valin_set(payload);
    
            if (TAG("Bubble/number_obj-64") == objectId)
                this->numberobj_34_valin_set(payload);
    
            if (TAG("Bubble/number_obj-63") == objectId)
                this->numberobj_35_valin_set(payload);
    
            if (TAG("Bubble/number_obj-65") == objectId)
                this->numberobj_36_valin_set(payload);
    
            if (TAG("Bubble/number_obj-68") == objectId)
                this->numberobj_37_valin_set(payload);
    
            if (TAG("Bubble/number_obj-80") == objectId)
                this->numberobj_38_valin_set(payload);
    
            if (TAG("Bubble/number_obj-82") == objectId)
                this->numberobj_39_valin_set(payload);
    
            if (TAG("Bubble/number_obj-35") == objectId)
                this->numberobj_40_valin_set(payload);
    
            if (TAG("Bubble/number_obj-1") == objectId)
                this->numberobj_41_valin_set(payload);
    
            if (TAG("Bubble/number_obj-5") == objectId)
                this->numberobj_42_valin_set(payload);
    
            if (TAG("Bubble/number_obj-45") == objectId)
                this->numberobj_43_valin_set(payload);
    
            if (TAG("Bubble/number_obj-21") == objectId)
                this->numberobj_44_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Bubble/number_obj-41") == objectId)
                this->numberobj_32_format_set(payload);
    
            if (TAG("Bubble/number_obj-60") == objectId)
                this->numberobj_33_format_set(payload);
    
            if (TAG("Bubble/number_obj-64") == objectId)
                this->numberobj_34_format_set(payload);
    
            if (TAG("Bubble/number_obj-63") == objectId)
                this->numberobj_35_format_set(payload);
    
            if (TAG("Bubble/number_obj-65") == objectId)
                this->numberobj_36_format_set(payload);
    
            if (TAG("Bubble/number_obj-68") == objectId)
                this->numberobj_37_format_set(payload);
    
            if (TAG("Bubble/number_obj-80") == objectId)
                this->numberobj_38_format_set(payload);
    
            if (TAG("Bubble/number_obj-82") == objectId)
                this->numberobj_39_format_set(payload);
    
            if (TAG("Bubble/number_obj-35") == objectId)
                this->numberobj_40_format_set(payload);
    
            if (TAG("Bubble/number_obj-1") == objectId)
                this->numberobj_41_format_set(payload);
    
            if (TAG("Bubble/number_obj-5") == objectId)
                this->numberobj_42_format_set(payload);
    
            if (TAG("Bubble/number_obj-45") == objectId)
                this->numberobj_43_format_set(payload);
    
            if (TAG("Bubble/number_obj-21") == objectId)
                this->numberobj_44_format_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("Bubble/number~_obj-32") == objectId)
                this->numbertilde_07_sig_number_set(payload);
    
            if (TAG("Bubble/number~_obj-31") == objectId)
                this->numbertilde_08_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("Bubble/number~_obj-32") == objectId)
                this->numbertilde_07_mode_set(payload);
    
            if (TAG("Bubble/number~_obj-31") == objectId)
                this->numbertilde_08_mode_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Bubble/message_obj-54") == objectId)
                this->message_04_listin_number_set(payload);
    
            if (TAG("Bubble/message_obj-53") == objectId)
                this->message_05_listin_number_set(payload);
    
            if (TAG("Bubble/message_obj-52") == objectId)
                this->message_06_listin_number_set(payload);
    
            break;
            }
        }
    
        this->p_05->processNumMessage(tag, objectId, time, payload);
        this->p_06->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("Bubble/number~_obj-32") == objectId)
                this->numbertilde_07_sig_list_set(payload);
    
            if (TAG("Bubble/number~_obj-31") == objectId)
                this->numbertilde_08_sig_list_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Bubble/message_obj-54") == objectId)
                this->message_04_listin_list_set(payload);
    
            if (TAG("Bubble/message_obj-53") == objectId)
                this->message_05_listin_list_set(payload);
    
            if (TAG("Bubble/message_obj-52") == objectId)
                this->message_06_listin_list_set(payload);
    
            break;
            }
        }
    
        this->p_05->processListMessage(tag, objectId, time, payload);
        this->p_06->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("bangin"):
            {
            if (TAG("Bubble/button_obj-13") == objectId)
                this->button_04_bangin_bang();
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Bubble/message_obj-54") == objectId)
                this->message_04_listin_bang_bang();
    
            if (TAG("Bubble/message_obj-53") == objectId)
                this->message_05_listin_bang_bang();
    
            if (TAG("Bubble/message_obj-52") == objectId)
                this->message_06_listin_bang_bang();
    
            break;
            }
        }
    
        this->p_05->processBangMessage(tag, objectId, time);
        this->p_06->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Bubble/number_obj-41"):
            {
            return "Bubble/number_obj-41";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("Bubble/number~_obj-32"):
            {
            return "Bubble/number~_obj-32";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("Bubble/number~_obj-31"):
            {
            return "Bubble/number~_obj-31";
            }
        case TAG("Bubble/number_obj-60"):
            {
            return "Bubble/number_obj-60";
            }
        case TAG("Bubble/number_obj-64"):
            {
            return "Bubble/number_obj-64";
            }
        case TAG("Bubble/number_obj-63"):
            {
            return "Bubble/number_obj-63";
            }
        case TAG("Bubble/number_obj-65"):
            {
            return "Bubble/number_obj-65";
            }
        case TAG("Bubble/number_obj-68"):
            {
            return "Bubble/number_obj-68";
            }
        case TAG("Bubble/number_obj-80"):
            {
            return "Bubble/number_obj-80";
            }
        case TAG("Bubble/number_obj-82"):
            {
            return "Bubble/number_obj-82";
            }
        case TAG("Bubble/number_obj-35"):
            {
            return "Bubble/number_obj-35";
            }
        case TAG("Bubble/number_obj-1"):
            {
            return "Bubble/number_obj-1";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("Bubble/button_obj-13"):
            {
            return "Bubble/button_obj-13";
            }
        case TAG("Bubble/number_obj-5"):
            {
            return "Bubble/number_obj-5";
            }
        case TAG("Bubble/number_obj-45"):
            {
            return "Bubble/number_obj-45";
            }
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("Bubble/message_obj-54"):
            {
            return "Bubble/message_obj-54";
            }
        case TAG("Bubble/message_obj-53"):
            {
            return "Bubble/message_obj-53";
            }
        case TAG("Bubble/message_obj-52"):
            {
            return "Bubble/message_obj-52";
            }
        case TAG("Bubble/number_obj-21"):
            {
            return "Bubble/number_obj-21";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        }
    
        auto subpatchResult_0 = this->p_05->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_06->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        case 0:
            {
            return addressOf(this->delaytilde_05_del_bufferobj);
            break;
            }
        case 1:
            {
            return addressOf(this->delaytilde_06_del_bufferobj);
            break;
            }
        case 2:
            {
            return addressOf(this->delaytilde_07_del_bufferobj);
            break;
            }
        case 3:
            {
            return addressOf(this->delaytilde_08_del_bufferobj);
            break;
            }
        case 4:
            {
            return addressOf(this->delaytilde_09_del_bufferobj);
            break;
            }
        case 5:
            {
            return addressOf(this->delaytilde_10_del_bufferobj);
            break;
            }
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 6;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void zeroDataRef(DataRef& ref) {
        ref->setZero();
    }
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 0) {
            this->delaytilde_05_del_buffer = new Float64Buffer(this->delaytilde_05_del_bufferobj);
        }
    
        if (index == 1) {
            this->delaytilde_06_del_buffer = new Float64Buffer(this->delaytilde_06_del_bufferobj);
        }
    
        if (index == 2) {
            this->delaytilde_07_del_buffer = new Float64Buffer(this->delaytilde_07_del_bufferobj);
        }
    
        if (index == 3) {
            this->delaytilde_08_del_buffer = new Float64Buffer(this->delaytilde_08_del_bufferobj);
        }
    
        if (index == 4) {
            this->delaytilde_09_del_buffer = new Float64Buffer(this->delaytilde_09_del_bufferobj);
        }
    
        if (index == 5) {
            this->delaytilde_10_del_buffer = new Float64Buffer(this->delaytilde_10_del_bufferobj);
        }
    
        this->p_05->processDataViewUpdate(index, time);
        this->p_06->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->delaytilde_05_del_bufferobj = initDataRef("delaytilde_05_del_bufferobj", true, nullptr, "buffer~");
        this->delaytilde_06_del_bufferobj = initDataRef("delaytilde_06_del_bufferobj", true, nullptr, "buffer~");
        this->delaytilde_07_del_bufferobj = initDataRef("delaytilde_07_del_bufferobj", true, nullptr, "buffer~");
        this->delaytilde_08_del_bufferobj = initDataRef("delaytilde_08_del_bufferobj", true, nullptr, "buffer~");
        this->delaytilde_09_del_bufferobj = initDataRef("delaytilde_09_del_bufferobj", true, nullptr, "buffer~");
        this->delaytilde_10_del_bufferobj = initDataRef("delaytilde_10_del_bufferobj", true, nullptr, "buffer~");
        this->assign_defaults();
        this->setState();
        this->delaytilde_05_del_bufferobj->setIndex(0);
        this->delaytilde_05_del_buffer = new Float64Buffer(this->delaytilde_05_del_bufferobj);
        this->delaytilde_06_del_bufferobj->setIndex(1);
        this->delaytilde_06_del_buffer = new Float64Buffer(this->delaytilde_06_del_bufferobj);
        this->delaytilde_07_del_bufferobj->setIndex(2);
        this->delaytilde_07_del_buffer = new Float64Buffer(this->delaytilde_07_del_bufferobj);
        this->delaytilde_08_del_bufferobj->setIndex(3);
        this->delaytilde_08_del_buffer = new Float64Buffer(this->delaytilde_08_del_bufferobj);
        this->delaytilde_09_del_bufferobj->setIndex(4);
        this->delaytilde_09_del_buffer = new Float64Buffer(this->delaytilde_09_del_bufferobj);
        this->delaytilde_10_del_bufferobj->setIndex(5);
        this->delaytilde_10_del_buffer = new Float64Buffer(this->delaytilde_10_del_bufferobj);
    }
    
    protected:
    
    void param_04_value_set(number v) {
        v = this->param_04_value_constrain(v);
        this->param_04_value = v;
        this->sendParameter(0, false);
    
        if (this->param_04_value != this->param_04_lastValue) {
            this->getEngine()->presetTouched();
            this->param_04_lastValue = this->param_04_value;
        }
    
        this->numberobj_32_value_set(v);
    }
    
    void param_05_value_set(number v) {
        v = this->param_05_value_constrain(v);
        this->param_05_value = v;
        this->sendParameter(1, false);
    
        if (this->param_05_value != this->param_05_lastValue) {
            this->getEngine()->presetTouched();
            this->param_05_lastValue = this->param_05_value;
        }
    
        this->numberobj_34_value_set(v);
    }
    
    void param_06_value_set(number v) {
        v = this->param_06_value_constrain(v);
        this->param_06_value = v;
        this->sendParameter(2, false);
    
        if (this->param_06_value != this->param_06_lastValue) {
            this->getEngine()->presetTouched();
            this->param_06_lastValue = this->param_06_value;
        }
    
        {
            list converted = {v};
            this->listlookup_02_input_set(converted);
        }
    }
    
    void numberobj_32_valin_set(number v) {
        this->numberobj_32_value_set(v);
    }
    
    void numberobj_32_format_set(number v) {
        this->numberobj_32_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_07_sig_number_set(number v) {
        this->numbertilde_07_outValue = v;
    }
    
    void numbertilde_07_sig_list_set(const list& v) {
        this->numbertilde_07_outValue = v[0];
    }
    
    void numbertilde_07_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_07_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_07_currentMode = 1;
        }
    }
    
    void numbertilde_08_sig_number_set(number v) {
        this->numbertilde_08_outValue = v;
    }
    
    void numbertilde_08_sig_list_set(const list& v) {
        this->numbertilde_08_outValue = v[0];
    }
    
    void numbertilde_08_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_08_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_08_currentMode = 1;
        }
    }
    
    void numberobj_33_valin_set(number v) {
        this->numberobj_33_value_set(v);
    }
    
    void numberobj_33_format_set(number v) {
        this->numberobj_33_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_34_valin_set(number v) {
        this->numberobj_34_value_set(v);
    }
    
    void numberobj_34_format_set(number v) {
        this->numberobj_34_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_35_valin_set(number v) {
        this->numberobj_35_value_set(v);
    }
    
    void numberobj_35_format_set(number v) {
        this->numberobj_35_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_08_out1_bang_bang() {}
    
    void eventinlet_08_out1_number_set(number v) {
        {
            list converted = {v};
            this->unjoin_01_input_set(converted);
        }
    }
    
    void numberobj_36_valin_set(number v) {
        this->numberobj_36_value_set(v);
    }
    
    void numberobj_36_format_set(number v) {
        this->numberobj_36_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_37_valin_set(number v) {
        this->numberobj_37_value_set(v);
    }
    
    void numberobj_37_format_set(number v) {
        this->numberobj_37_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_38_valin_set(number v) {
        this->numberobj_38_value_set(v);
    }
    
    void numberobj_38_format_set(number v) {
        this->numberobj_38_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_39_valin_set(number v) {
        this->numberobj_39_value_set(v);
    }
    
    void numberobj_39_format_set(number v) {
        this->numberobj_39_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_09_out1_bang_bang() {
        this->numberobj_38_value_bang();
    }
    
    void eventinlet_09_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_38_value_set(converted);
        }
    }
    
    void numberobj_40_valin_set(number v) {
        this->numberobj_40_value_set(v);
    }
    
    void numberobj_40_format_set(number v) {
        this->numberobj_40_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_41_valin_set(number v) {
        this->numberobj_41_value_set(v);
    }
    
    void numberobj_41_format_set(number v) {
        this->numberobj_41_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_10_out1_bang_bang() {
        this->numberobj_41_value_bang();
    }
    
    void eventinlet_10_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_41_value_set(converted);
        }
    }
    
    void eventinlet_11_out1_bang_bang() {}
    
    void eventinlet_11_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->reson_tilde_02_resonanceValue_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->reson_tilde_01_resonanceValue_set(converted);
        }
    }
    
    void button_04_bangin_bang() {
        this->button_04_bangval_bang();
    }
    
    void metro_01_tick_bang() {
        this->metro_01_tickout_bang();
        this->getEngine()->flushClockEvents(this, -1987572531, false);;
    
        if ((bool)(this->metro_01_on)) {
            this->metro_01_last = this->currenttime();
    
            {
                this->metro_01_next = this->metro_01_last + this->metro_01_interval;
                this->getEngine()->scheduleClockEvent(this, -1987572531, this->metro_01_interval + this->_currentTime);;
            }
        }
    }
    
    void numberobj_42_valin_set(number v) {
        this->numberobj_42_value_set(v);
    }
    
    void numberobj_42_format_set(number v) {
        this->numberobj_42_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_43_valin_set(number v) {
        this->numberobj_43_value_set(v);
    }
    
    void numberobj_43_format_set(number v) {
        this->numberobj_43_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void metro_02_tick_bang() {
        this->metro_02_tickout_bang();
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(this->metro_02_on)) {
            this->metro_02_last = this->currenttime();
    
            {
                this->metro_02_next = this->metro_02_last + this->metro_02_interval;
                this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_02_interval + this->_currentTime);;
            }
        }
    }
    
    void message_04_listin_list_set(const list& v) {
        this->message_04_set_set(v);
    }
    
    void message_04_listin_number_set(number v) {
        this->message_04_set_set(v);
    }
    
    void message_04_listin_bang_bang() {
        this->message_04_trigger_bang();
    }
    
    void message_05_listin_list_set(const list& v) {
        this->message_05_set_set(v);
    }
    
    void message_05_listin_number_set(number v) {
        this->message_05_set_set(v);
    }
    
    void message_05_listin_bang_bang() {
        this->message_05_trigger_bang();
    }
    
    void message_06_listin_list_set(const list& v) {
        this->message_06_set_set(v);
    }
    
    void message_06_listin_number_set(number v) {
        this->message_06_set_set(v);
    }
    
    void message_06_listin_bang_bang() {
        this->message_06_trigger_bang();
    }
    
    void numberobj_44_valin_set(number v) {
        this->numberobj_44_value_set(v);
    }
    
    void numberobj_44_format_set(number v) {
        this->numberobj_44_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_08_value_set(number ) {}
    
    void numbertilde_07_value_set(number ) {}
    
    void linetilde_06_target_bang() {}
    
    void linetilde_07_target_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 4;
    }
    
    Index getNumOutputChannels() const {
        return 4;
    }
    
    void initializeObjects() {
        this->numberobj_32_init();
        this->numbertilde_07_init();
        this->numbertilde_08_init();
        this->numberobj_33_init();
        this->numberobj_34_init();
        this->delaytilde_05_del_init();
        this->delaytilde_06_del_init();
        this->delaytilde_07_del_init();
        this->delaytilde_08_del_init();
        this->numberobj_35_init();
        this->delaytilde_09_del_init();
        this->numberobj_36_init();
        this->delaytilde_10_del_init();
        this->numberobj_37_init();
        this->numberobj_38_init();
        this->numberobj_39_init();
        this->numberobj_40_init();
        this->numberobj_41_init();
        this->numberobj_42_init();
        this->numberobj_43_init();
        this->message_04_init();
        this->message_05_init();
        this->message_06_init();
        this->numberobj_44_init();
        this->p_05->initializeObjects();
        this->p_06->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_05->startup();
        this->p_06->startup();
    
        if ((bool)(this->metro_01_on))
            this->metro_01_on_set(1);
    
        if ((bool)(this->metro_02_on))
            this->metro_02_on_set(1);
    
        this->timevalue_01_sendValue();
    
        {
            this->scheduleParamInit(0, 1);
        }
    
        {
            this->scheduleParamInit(1, 2);
        }
    
        {
            this->scheduleParamInit(2, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_05->allocateDataRefs();
        this->p_06->allocateDataRefs();
        this->delaytilde_05_del_buffer = this->delaytilde_05_del_buffer->allocateIfNeeded();
    
        if (this->delaytilde_05_del_bufferobj->hasRequestedSize()) {
            if (this->delaytilde_05_del_bufferobj->wantsFill())
                this->zeroDataRef(this->delaytilde_05_del_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(0);
        }
    
        this->delaytilde_06_del_buffer = this->delaytilde_06_del_buffer->allocateIfNeeded();
    
        if (this->delaytilde_06_del_bufferobj->hasRequestedSize()) {
            if (this->delaytilde_06_del_bufferobj->wantsFill())
                this->zeroDataRef(this->delaytilde_06_del_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(1);
        }
    
        this->delaytilde_07_del_buffer = this->delaytilde_07_del_buffer->allocateIfNeeded();
    
        if (this->delaytilde_07_del_bufferobj->hasRequestedSize()) {
            if (this->delaytilde_07_del_bufferobj->wantsFill())
                this->zeroDataRef(this->delaytilde_07_del_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(2);
        }
    
        this->delaytilde_08_del_buffer = this->delaytilde_08_del_buffer->allocateIfNeeded();
    
        if (this->delaytilde_08_del_bufferobj->hasRequestedSize()) {
            if (this->delaytilde_08_del_bufferobj->wantsFill())
                this->zeroDataRef(this->delaytilde_08_del_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(3);
        }
    
        this->delaytilde_09_del_buffer = this->delaytilde_09_del_buffer->allocateIfNeeded();
    
        if (this->delaytilde_09_del_bufferobj->hasRequestedSize()) {
            if (this->delaytilde_09_del_bufferobj->wantsFill())
                this->zeroDataRef(this->delaytilde_09_del_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(4);
        }
    
        this->delaytilde_10_del_buffer = this->delaytilde_10_del_buffer->allocateIfNeeded();
    
        if (this->delaytilde_10_del_bufferobj->hasRequestedSize()) {
            if (this->delaytilde_10_del_bufferobj->wantsFill())
                this->zeroDataRef(this->delaytilde_10_del_bufferobj);
    
            this->getEngine()->sendDataRefUpdated(5);
        }
    }
    
    void unjoin_01_extra_set(const list& ) {}
    
    void metro_01_interval_set(number v) {
        this->metro_01_interval_setter(v);
        v = this->metro_01_interval;
    }
    
    void delaytilde_10_delay_set(number v) {
        this->delaytilde_10_delay = v;
    }
    
    void delaytilde_09_delay_set(number v) {
        this->delaytilde_09_delay = v;
    }
    
    void mstosamps_04_out1_set(number v) {
        this->delaytilde_10_delay_set(v);
        this->delaytilde_09_delay_set(v);
    }
    
    void mstosamps_04_ms_set(number ms) {
        this->mstosamps_04_ms = ms;
    
        {
            this->mstosamps_04_out1_set(ms * this->sr * 0.001);
            return;
        }
    }
    
    void numberobj_37_output_set(number v) {
        this->metro_01_interval_set(v);
        this->mstosamps_04_ms_set(v);
    }
    
    void numberobj_37_value_set(number v) {
        this->numberobj_37_value_setter(v);
        v = this->numberobj_37_value;
        number localvalue = v;
    
        if (this->numberobj_37_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-68"), localvalue, this->_currentTime);
        this->numberobj_37_output_set(localvalue);
    }
    
    void unjoin_01_out3_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_37_value_set(converted);
        }
    }
    
    void delaytilde_08_delay_set(number v) {
        this->delaytilde_08_delay = v;
    }
    
    void mstosamps_03_out1_set(number v) {
        this->delaytilde_08_delay_set(v);
    }
    
    void mstosamps_03_ms_set(number ms) {
        this->mstosamps_03_ms = ms;
    
        {
            this->mstosamps_03_out1_set(ms * this->sr * 0.001);
            return;
        }
    }
    
    void numberobj_36_output_set(number v) {
        this->mstosamps_03_ms_set(v);
    }
    
    void numberobj_36_value_set(number v) {
        this->numberobj_36_value_setter(v);
        v = this->numberobj_36_value;
        number localvalue = v;
    
        if (this->numberobj_36_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-65"), localvalue, this->_currentTime);
        this->numberobj_36_output_set(localvalue);
    }
    
    void unjoin_01_out2_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_36_value_set(converted);
        }
    }
    
    void delaytilde_06_delay_set(number v) {
        this->delaytilde_06_delay = v;
    }
    
    void mstosamps_02_out1_set(number v) {
        this->delaytilde_06_delay_set(v);
    }
    
    void mstosamps_02_ms_set(number ms) {
        this->mstosamps_02_ms = ms;
    
        {
            this->mstosamps_02_out1_set(ms * this->sr * 0.001);
            return;
        }
    }
    
    void numberobj_35_output_set(number v) {
        this->mstosamps_02_ms_set(v);
    }
    
    void numberobj_35_value_set(number v) {
        this->numberobj_35_value_setter(v);
        v = this->numberobj_35_value;
        number localvalue = v;
    
        if (this->numberobj_35_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-63"), localvalue, this->_currentTime);
        this->numberobj_35_output_set(localvalue);
    }
    
    void unjoin_01_out1_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_35_value_set(converted);
        }
    }
    
    void unjoin_01_input_set(const list& v) {
        if (v->length > 3) {
            list tmp = {};
    
            for (number i = 3; i < v->length; i++) {
                tmp->push(v[(Index)i]);
            }
    
            this->unjoin_01_extra_set(tmp);
        }
    
        if (v->length > 2) {
            list tmp = {};
    
            for (Index i = 2; i < 3 && i < v->length; i++) {
                tmp->push(v[(Index)i]);
            }
    
            this->unjoin_01_out3_set(tmp);
        }
    
        if (v->length > 1) {
            list tmp = {};
    
            for (Index i = 1; i < 2 && i < v->length; i++) {
                tmp->push(v[(Index)i]);
            }
    
            this->unjoin_01_out2_set(tmp);
        }
    
        if (v->length > 0) {
            list tmp = {};
    
            for (Index i = 0; i < 1 && i < v->length; i++) {
                tmp->push(v[(Index)i]);
            }
    
            this->unjoin_01_out1_set(tmp);
        }
    }
    
    void eventinlet_08_out1_list_set(const list& v) {
        this->unjoin_01_input_set(v);
    }
    
    void linetilde_07_time_set(number v) {
        this->linetilde_07_time = v;
    }
    
    void linetilde_07_segments_set(const list& v) {
        this->linetilde_07_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_07_time == 0) {
                this->linetilde_07_activeRamps->length = 0;
                this->linetilde_07_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_07_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_07_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_07_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_07_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_07_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_07_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_07_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_07_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_07_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_07_activeRamps->push(lastRampValue);
                    this->linetilde_07_activeRamps->push(0);
                    this->linetilde_07_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_07_keepramp)) {
                            this->linetilde_07_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_07_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_07_activeRamps->push(destinationValue);
                    this->linetilde_07_activeRamps->push(inc);
                    this->linetilde_07_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_39_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_07_segments_set(converted);
        }
    }
    
    void numberobj_39_value_set(number v) {
        this->numberobj_39_value_setter(v);
        v = this->numberobj_39_value;
        number localvalue = v;
    
        if (this->numberobj_39_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-82"), localvalue, this->_currentTime);
        this->numberobj_39_output_set(localvalue);
    }
    
    void scale_04_out_set(const list& v) {
        this->scale_04_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_39_value_set(converted);
        }
    }
    
    void scale_04_input_set(const list& v) {
        this->scale_04_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_04_inlow,
                this->scale_04_inhigh,
                this->scale_04_outlow,
                this->scale_04_outhigh,
                this->scale_04_power
            ));
        }
    
        this->scale_04_out_set(tmp);
    }
    
    void numberobj_38_output_set(number v) {
        {
            list converted = {v};
            this->scale_04_input_set(converted);
        }
    }
    
    void numberobj_38_value_set(number v) {
        this->numberobj_38_value_setter(v);
        v = this->numberobj_38_value;
        number localvalue = v;
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-80"), localvalue, this->_currentTime);
        this->numberobj_38_output_set(localvalue);
    }
    
    void eventinlet_09_out1_number_set(number v) {
        this->numberobj_38_value_set(v);
    }
    
    void numberobj_40_output_set(number ) {}
    
    void numberobj_40_value_set(number v) {
        this->numberobj_40_value_setter(v);
        v = this->numberobj_40_value;
        number localvalue = v;
    
        if (this->numberobj_40_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-35"), localvalue, this->_currentTime);
        this->numberobj_40_output_set(localvalue);
    }
    
    void linetilde_06_time_set(number v) {
        this->linetilde_06_time = v;
    }
    
    void linetilde_06_segments_set(const list& v) {
        this->linetilde_06_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_06_time == 0) {
                this->linetilde_06_activeRamps->length = 0;
                this->linetilde_06_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_06_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_06_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_06_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_06_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_06_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_06_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_06_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_06_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_06_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_06_activeRamps->push(lastRampValue);
                    this->linetilde_06_activeRamps->push(0);
                    this->linetilde_06_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_06_keepramp)) {
                            this->linetilde_06_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_06_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_06_activeRamps->push(destinationValue);
                    this->linetilde_06_activeRamps->push(inc);
                    this->linetilde_06_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void accum_01_out1_set(number v) {
        this->numberobj_40_value_set(v);
    
        {
            list converted = {v};
            this->linetilde_06_segments_set(converted);
        }
    }
    
    void accum_01_x_set(number x) {
        this->accum_01_x = x;
        auto reset = this->accum_01_reset;
    
        {
            {
                this->accum_01_value = ((bool)(reset) ? 250 : this->wrap(this->accum_01_value + x, 250, 20000));
    
                {
                    this->accum_01_out1_set(this->accum_01_value);
                    return;
                }
            }
        }
    }
    
    void numberobj_41_output_set(number v) {
        this->accum_01_x_set(v);
    }
    
    void numberobj_41_value_set(number v) {
        this->numberobj_41_value_setter(v);
        v = this->numberobj_41_value;
        number localvalue = v;
    
        if (this->numberobj_41_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-1"), localvalue, this->_currentTime);
        this->numberobj_41_output_set(localvalue);
    }
    
    void eventinlet_10_out1_number_set(number v) {
        this->numberobj_41_value_set(v);
    }
    
    void reson_tilde_02_resonanceValue_set(number v) {
        this->reson_tilde_02_resonanceValue = v;
    }
    
    void reson_tilde_01_resonanceValue_set(number v) {
        this->reson_tilde_01_resonanceValue = v;
    }
    
    void eventinlet_11_out1_number_set(number v) {
        this->reson_tilde_02_resonanceValue_set(v);
        this->reson_tilde_01_resonanceValue_set(v);
    }
    
    number param_04_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void p_05_in1_number_set(number v) {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->eventinlet_06_out1_number_set(v);
    }
    
    void numberobj_32_output_set(number v) {
        this->p_05_in1_number_set(v);
    }
    
    void numberobj_32_value_set(number v) {
        this->numberobj_32_value_setter(v);
        v = this->numberobj_32_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_32_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-41"), localvalue, this->_currentTime);
        this->numberobj_32_output_set(localvalue);
    }
    
    number param_05_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void dspexpr_29_in2_set(number v) {
        this->dspexpr_29_in2 = v;
    }
    
    void dspexpr_27_in2_set(number v) {
        this->dspexpr_27_in2 = v;
    }
    
    void numberobj_33_output_set(number v) {
        this->dspexpr_29_in2_set(v);
        this->dspexpr_27_in2_set(v);
    }
    
    void numberobj_33_value_set(number v) {
        this->numberobj_33_value_setter(v);
        v = this->numberobj_33_value;
        number localvalue = v;
    
        if (this->numberobj_33_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-60"), localvalue, this->_currentTime);
        this->numberobj_33_output_set(localvalue);
    }
    
    void scale_03_out_set(const list& v) {
        this->scale_03_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_33_value_set(converted);
        }
    }
    
    void scale_03_input_set(const list& v) {
        this->scale_03_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_03_inlow,
                this->scale_03_inhigh,
                this->scale_03_outlow,
                this->scale_03_outhigh,
                this->scale_03_power
            ));
        }
    
        this->scale_03_out_set(tmp);
    }
    
    void numberobj_34_output_set(number v) {
        {
            list converted = {v};
            this->scale_03_input_set(converted);
        }
    }
    
    void numberobj_34_value_set(number v) {
        this->numberobj_34_value_setter(v);
        v = this->numberobj_34_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_34_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-64"), localvalue, this->_currentTime);
        this->numberobj_34_output_set(localvalue);
    }
    
    number param_06_value_constrain(number v) const {
        v = (v > 2 ? 2 : (v < 0 ? 0 : v));
    
        {
            number oneStep = (number)2 / (number)2;
            number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
            number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
            v = numberOfSteps * oneStep;
        }
    
        return v;
    }
    
    void counter_02_maximum_set(number v) {
        this->counter_02_maximum = v;
    
        if (this->counter_02_count > this->counter_02_maximum)
            this->counter_02_count = this->counter_02_minimum;
    }
    
    void numberobj_44_output_set(number ) {}
    
    void numberobj_44_value_set(number v) {
        this->numberobj_44_value_setter(v);
        v = this->numberobj_44_value;
        number localvalue = v;
    
        if (this->numberobj_44_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-21"), localvalue, this->_currentTime);
        this->numberobj_44_output_set(localvalue);
    }
    
    void counter_01_maximum_set(number v) {
        this->counter_01_maximum = v;
    
        if (this->counter_01_count > this->counter_01_maximum)
            this->counter_01_count = this->counter_01_minimum;
    }
    
    void listlookup_02_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_02_maximum_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_44_value_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_01_maximum_set(converted);
        }
    }
    
    void listlookup_02_input_set(const list& v) {
        this->listlookup_02_input = jsCreateListCopy(v);
        list tmp = list();
    
        for (Index i = 0; i < v->length; i++) {
            long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
    
            if (j >= 0 && (Index)(j) < this->listlookup_02_lookup->length)
                tmp->push(this->listlookup_02_lookup[(Index)j]);
        }
    
        if ((bool)(tmp->length))
            this->listlookup_02_out_set(tmp);
    }
    
    void numberobj_38_value_bang() {
        number v = this->numberobj_38_value;
        number localvalue = v;
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-80"), localvalue, this->_currentTime);
        this->numberobj_38_output_set(localvalue);
    }
    
    void numberobj_41_value_bang() {
        number v = this->numberobj_41_value;
        number localvalue = v;
    
        if (this->numberobj_41_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-1"), localvalue, this->_currentTime);
        this->numberobj_41_output_set(localvalue);
    }
    
    void accum_01_x_bang() {
        number x = this->accum_01_x;
        auto reset = this->accum_01_reset;
    
        {
            {
                this->accum_01_value = ((bool)(reset) ? 250 : this->wrap(this->accum_01_value + x, 250, 20000));
    
                {
                    this->accum_01_out1_set(this->accum_01_value);
                    return;
                }
            }
        }
    }
    
    void button_04_output_bang() {
        this->accum_01_x_bang();
    }
    
    void button_04_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Bubble/button_obj-13"), this->_currentTime);;
        this->button_04_output_bang();
    }
    
    void accum_01_reset_set(number v) {
        this->accum_01_reset = v;
    }
    
    void expr_21_out1_set(number v) {
        this->expr_21_out1 = v;
        this->accum_01_reset_set(this->expr_21_out1);
    }
    
    void expr_21_in1_set(number in1) {
        this->expr_21_in1 = in1;
        this->expr_21_out1_set(this->expr_21_in1 == this->expr_21_in2);//#map:Bubble/==_obj-4:1
    }
    
    void numberobj_42_output_set(number v) {
        this->expr_21_in1_set(v);
    }
    
    void numberobj_42_value_set(number v) {
        this->numberobj_42_value_setter(v);
        v = this->numberobj_42_value;
        number localvalue = v;
    
        if (this->numberobj_42_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-5"), localvalue, this->_currentTime);
        this->numberobj_42_output_set(localvalue);
    }
    
    void counter_01_output_set(number v) {
        this->counter_01_output = v;
        this->numberobj_42_value_set(v);
    }
    
    void counter_01_overflow_bang_bang() {}
    
    number counter_01_overflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_01_overflow_number_set(number v) {
        v = this->counter_01_overflow_number_constrain(v);
        this->counter_01_overflow_number = v;
    }
    
    void counter_01_carry_set(number v) {
        this->counter_01_carry = v;
    }
    
    void counter_01_underflow_bang_bang() {}
    
    number counter_01_underflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_01_underflow_number_set(number v) {
        v = this->counter_01_underflow_number_constrain(v);
        this->counter_01_underflow_number = v;
    }
    
    void counter_01_input_bang() {
        this->counter_01_output_set(this->counter_01_count);
        this->counter_01_inc();
    
        if (this->counter_01_count > this->counter_01_maximum) {
            if (this->counter_01_direction == 2) {
                this->counter_01_phase = !(bool)(this->counter_01_phase);
                this->counter_01_count = this->counter_01_maximum;
                this->counter_01_inc();
            } else
                this->counter_01_count = this->counter_01_minimum;
    
            if ((bool)(!(bool)(this->counter_01_overflow_number))) {
                if (this->counter_01_carryflag == 1)
                    this->counter_01_overflow_bang_bang();
                else
                    this->counter_01_overflow_number_set(1);
            }
    
            this->counter_01_carry_set(this->counter_01_carry + 1);
        } else if ((bool)(this->counter_01_overflow_number) && this->counter_01_carryflag == 0)
            this->counter_01_overflow_number_set(0);
    
        if (this->counter_01_count < this->counter_01_minimum) {
            if (this->counter_01_direction == 2) {
                this->counter_01_phase = !(bool)(this->counter_01_phase);
                this->counter_01_count = this->counter_01_minimum;
                this->counter_01_inc();
            } else
                this->counter_01_count = this->counter_01_maximum;
    
            if ((bool)(!(bool)(this->counter_01_underflow_number))) {
                if (this->counter_01_carryflag == 1)
                    this->counter_01_underflow_bang_bang();
                else
                    this->counter_01_underflow_number_set(1);
            }
    
            this->counter_01_carry_set(this->counter_01_carry + 1);
        } else if ((bool)(this->counter_01_underflow_number) && this->counter_01_carryflag == 0)
            this->counter_01_underflow_number_set(0);
    }
    
    void metro_01_tickout_bang() {
        this->counter_01_input_bang();
        this->button_04_bangval_bang();
    }
    
    void expr_22_out1_set(number v) {
        this->expr_22_out1 = v;
    }
    
    void expr_22_in1_set(number in1) {
        this->expr_22_in1 = in1;
        this->expr_22_out1_set(this->expr_22_in1 == this->expr_22_in2);//#map:Bubble/==_obj-67:1
    }
    
    void numberobj_43_output_set(number v) {
        this->expr_22_in1_set(v);
    }
    
    void numberobj_43_value_set(number v) {
        this->numberobj_43_value_setter(v);
        v = this->numberobj_43_value;
        number localvalue = v;
    
        if (this->numberobj_43_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Bubble/number_obj-45"), localvalue, this->_currentTime);
        this->numberobj_43_output_set(localvalue);
    }
    
    void counter_02_output_set(number v) {
        this->counter_02_output = v;
        this->numberobj_43_value_set(v);
    }
    
    void counter_02_overflow_bang_bang() {}
    
    number counter_02_overflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_02_overflow_number_set(number v) {
        v = this->counter_02_overflow_number_constrain(v);
        this->counter_02_overflow_number = v;
    }
    
    void counter_02_carry_set(number v) {
        this->counter_02_carry = v;
    }
    
    void counter_02_underflow_bang_bang() {}
    
    number counter_02_underflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_02_underflow_number_set(number v) {
        v = this->counter_02_underflow_number_constrain(v);
        this->counter_02_underflow_number = v;
    }
    
    void counter_02_input_bang() {
        this->counter_02_output_set(this->counter_02_count);
        this->counter_02_inc();
    
        if (this->counter_02_count > this->counter_02_maximum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_maximum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_minimum;
    
            if ((bool)(!(bool)(this->counter_02_overflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_overflow_bang_bang();
                else
                    this->counter_02_overflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_overflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_overflow_number_set(0);
    
        if (this->counter_02_count < this->counter_02_minimum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_minimum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_maximum;
    
            if ((bool)(!(bool)(this->counter_02_underflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_underflow_bang_bang();
                else
                    this->counter_02_underflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_underflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_underflow_number_set(0);
    }
    
    void metro_02_tickout_bang() {
        this->counter_02_input_bang();
    }
    
    void message_04_set_set(const list& v) {
        this->message_04_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Bubble/message_obj-54"), v, this->_currentTime);
    }
    
    void metro_02_on_set(number v) {
        this->metro_02_on = v;
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
            }
        }
    }
    
    void metro_01_on_set(number v) {
        this->metro_01_on = v;
        this->getEngine()->flushClockEvents(this, -1987572531, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, -1987572531, 0 + this->_currentTime);;
            }
        }
    }
    
    void metro_02_interval_set(number v) {
        this->metro_02_interval_setter(v);
        v = this->metro_02_interval;
    }
    
    void message_04_out_set(const list& v) {
        {
            if (v->length > 1)
                this->metro_02_interval_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->metro_02_on_set(converted);
        }
    
        {
            if (v->length > 1)
                this->metro_01_interval_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->metro_01_on_set(converted);
        }
    }
    
    void message_04_trigger_bang() {
        this->message_04_out_set(this->message_04_set);
    }
    
    void message_05_set_set(const list& v) {
        this->message_05_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Bubble/message_obj-53"), v, this->_currentTime);
    }
    
    void message_05_out_set(const list& v) {
        {
            if (v->length > 1)
                this->metro_02_interval_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->metro_02_on_set(converted);
        }
    
        {
            if (v->length > 1)
                this->metro_01_interval_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->metro_01_on_set(converted);
        }
    }
    
    void message_05_trigger_bang() {
        this->message_05_out_set(this->message_05_set);
    }
    
    void message_06_set_set(const list& v) {
        this->message_06_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Bubble/message_obj-52"), v, this->_currentTime);
    }
    
    void counter_02_resetnow_number_set(number v) {
        this->counter_02_resetnow_number = v;
        this->counter_02_count = v;
        this->counter_02_input();
    }
    
    void counter_01_resetnow_number_set(number v) {
        this->counter_01_resetnow_number = v;
        this->counter_01_count = v;
        this->counter_01_input();
    }
    
    void message_06_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_02_resetnow_number_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_01_resetnow_number_set(converted);
        }
    }
    
    void message_06_trigger_bang() {
        this->message_06_out_set(this->message_06_set);
    }
    
    void timevalue_01_out_set(number v) {
        this->metro_02_interval_set(v);
    }
    
    void ctlin_02_outchannel_set(number ) {}
    
    void ctlin_02_outcontroller_set(number ) {}
    
    void fromnormalized_02_output_set(number v) {
        this->param_04_value_set(v);
    }
    
    void fromnormalized_02_input_set(number v) {
        this->fromnormalized_02_output_set(this->fromnormalized(0, v));
    }
    
    void expr_19_out1_set(number v) {
        this->expr_19_out1 = v;
        this->fromnormalized_02_input_set(this->expr_19_out1);
    }
    
    void expr_19_in1_set(number in1) {
        this->expr_19_in1 = in1;
        this->expr_19_out1_set(this->expr_19_in1 * this->expr_19_in2);//#map:expr_19:1
    }
    
    void ctlin_02_value_set(number v) {
        this->expr_19_in1_set(v);
    }
    
    void ctlin_02_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_02_channel || this->ctlin_02_channel == -1) && (data[1] == this->ctlin_02_controller || this->ctlin_02_controller == -1)) {
            this->ctlin_02_outchannel_set(channel);
            this->ctlin_02_outcontroller_set(data[1]);
            this->ctlin_02_value_set(data[2]);
            this->ctlin_02_status = 0;
        }
    }
    
    void ctlin_03_outchannel_set(number ) {}
    
    void ctlin_03_outcontroller_set(number ) {}
    
    void fromnormalized_03_output_set(number v) {
        this->param_05_value_set(v);
    }
    
    void fromnormalized_03_input_set(number v) {
        this->fromnormalized_03_output_set(this->fromnormalized(1, v));
    }
    
    void expr_20_out1_set(number v) {
        this->expr_20_out1 = v;
        this->fromnormalized_03_input_set(this->expr_20_out1);
    }
    
    void expr_20_in1_set(number in1) {
        this->expr_20_in1 = in1;
        this->expr_20_out1_set(this->expr_20_in1 * this->expr_20_in2);//#map:expr_20:1
    }
    
    void ctlin_03_value_set(number v) {
        this->expr_20_in1_set(v);
    }
    
    void ctlin_03_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_03_channel || this->ctlin_03_channel == -1) && (data[1] == this->ctlin_03_controller || this->ctlin_03_controller == -1)) {
            this->ctlin_03_outchannel_set(channel);
            this->ctlin_03_outcontroller_set(data[1]);
            this->ctlin_03_value_set(data[2]);
            this->ctlin_03_status = 0;
        }
    }
    
    void transport_01_outtempo_set(number ) {}
    
    void trigger_03_out2_bang() {}
    
    void trigger_03_out1_bang() {
        this->message_06_trigger_bang();
        this->message_05_trigger_bang();
        this->message_04_trigger_bang();
    }
    
    void trigger_03_input_bang_bang() {
        this->trigger_03_out2_bang();
        this->trigger_03_out1_bang();
    }
    
    void select_02_match1_bang() {
        this->trigger_03_input_bang_bang();
    }
    
    void select_02_nomatch_number_set(number ) {}
    
    void select_02_input_number_set(number v) {
        if (v == this->select_02_test1)
            this->select_02_match1_bang();
        else
            this->select_02_nomatch_number_set(v);
    }
    
    void transport_01_state_set(number v) {
        this->select_02_input_number_set(v);
    }
    
    void transport_01_outtimesig_set(const list& ) {}
    
    void p_06_out1_number_set(number v) {
        this->param_04_value_set(v);
    }
    
    void p_05_in2_list_set(const list& v) {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->eventinlet_07_out1_list_set(v);
    }
    
    void p_06_out2_list_set(const list& v) {
        this->p_05_in2_list_set(v);
    }
    
    void p_05_perform(SampleValue * out1, Index n) {
        // subpatcher: LFO~
        SampleArray<1> outs = {out1};
    
        this->p_05->process(nullptr, 0, outs, 1, n);
    }
    
    void triangle_tilde_02_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
        RNBO_UNUSED(duty);
        Index i;
    
        for (i = 0; i < n; i++) {
            number p1 = 0.5;
            auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
            p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
    
            if (wrappedPhase < p1) {
                out1[(Index)i] = wrappedPhase / p1;
                continue;
            } else {
                out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                continue;
            }
        }
    }
    
    void dspexpr_29_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void slide_tilde_02_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
        RNBO_UNUSED(down);
        RNBO_UNUSED(up);
        auto __slide_tilde_02_prev = this->slide_tilde_02_prev;
        auto iup = this->safediv(1., this->maximum(1., rnbo_abs(1000)));
        auto idown = this->safediv(1., this->maximum(1., rnbo_abs(1000)));
        Index i;
    
        for (i = 0; i < n; i++) {
            number temp = x[(Index)i] - __slide_tilde_02_prev;
            __slide_tilde_02_prev = __slide_tilde_02_prev + ((x[(Index)i] > __slide_tilde_02_prev ? iup : idown)) * temp;
            out1[(Index)i] = __slide_tilde_02_prev;
        }
    
        this->slide_tilde_02_prev = __slide_tilde_02_prev;
    }
    
    void dspexpr_28_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void numbertilde_08_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_08_currentIntervalInSamples = this->numbertilde_08_currentIntervalInSamples;
        auto __numbertilde_08_lastValue = this->numbertilde_08_lastValue;
        auto __numbertilde_08_currentInterval = this->numbertilde_08_currentInterval;
        auto __numbertilde_08_rampInSamples = this->numbertilde_08_rampInSamples;
        auto __numbertilde_08_outValue = this->numbertilde_08_outValue;
        auto __numbertilde_08_currentMode = this->numbertilde_08_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_08_currentMode == 0) {
                output[(Index)i] = this->numbertilde_08_smooth_next(
                    __numbertilde_08_outValue,
                    __numbertilde_08_rampInSamples,
                    __numbertilde_08_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_08_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_08_lastValue && __numbertilde_08_currentInterval <= 0) {
            __numbertilde_08_currentInterval = __numbertilde_08_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                2098551528,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_08_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Bubble/number~_obj-31"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_08_currentInterval = __numbertilde_08_currentInterval;
        this->numbertilde_08_lastValue = __numbertilde_08_lastValue;
    }
    
    void triangle_tilde_01_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
        RNBO_UNUSED(duty);
        Index i;
    
        for (i = 0; i < n; i++) {
            number p1 = 0.5;
            auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
            p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
    
            if (wrappedPhase < p1) {
                out1[(Index)i] = wrappedPhase / p1;
                continue;
            } else {
                out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                continue;
            }
        }
    }
    
    void dspexpr_27_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void slide_tilde_01_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
        RNBO_UNUSED(down);
        RNBO_UNUSED(up);
        auto __slide_tilde_01_prev = this->slide_tilde_01_prev;
        auto iup = this->safediv(1., this->maximum(1., rnbo_abs(1000)));
        auto idown = this->safediv(1., this->maximum(1., rnbo_abs(1000)));
        Index i;
    
        for (i = 0; i < n; i++) {
            number temp = x[(Index)i] - __slide_tilde_01_prev;
            __slide_tilde_01_prev = __slide_tilde_01_prev + ((x[(Index)i] > __slide_tilde_01_prev ? iup : idown)) * temp;
            out1[(Index)i] = __slide_tilde_01_prev;
        }
    
        this->slide_tilde_01_prev = __slide_tilde_01_prev;
    }
    
    void dspexpr_26_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void mstosamps_tilde_01_perform(const Sample * ms, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = ms[(Index)i] * this->sr * 0.001;
        }
    }
    
    void numbertilde_07_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_07_currentIntervalInSamples = this->numbertilde_07_currentIntervalInSamples;
        auto __numbertilde_07_lastValue = this->numbertilde_07_lastValue;
        auto __numbertilde_07_currentInterval = this->numbertilde_07_currentInterval;
        auto __numbertilde_07_rampInSamples = this->numbertilde_07_rampInSamples;
        auto __numbertilde_07_outValue = this->numbertilde_07_outValue;
        auto __numbertilde_07_currentMode = this->numbertilde_07_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_07_currentMode == 0) {
                output[(Index)i] = this->numbertilde_07_smooth_next(
                    __numbertilde_07_outValue,
                    __numbertilde_07_rampInSamples,
                    __numbertilde_07_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_07_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_07_lastValue && __numbertilde_07_currentInterval <= 0) {
            __numbertilde_07_currentInterval = __numbertilde_07_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_07_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Bubble/number~_obj-32"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_07_currentInterval = __numbertilde_07_currentInterval;
        this->numbertilde_07_lastValue = __numbertilde_07_lastValue;
    }
    
    void p_06_perform(Index n) {
        // subpatcher: TapTempo
        this->p_06->process(nullptr, 0, nullptr, 0, n);
    }
    
    void delaytilde_06_perform(number delay, const SampleValue * input, SampleValue * output, Index n) {
        auto __delaytilde_06_crossfadeDelay = this->delaytilde_06_crossfadeDelay;
        auto __delaytilde_06_rampInSamples = this->delaytilde_06_rampInSamples;
        auto __delaytilde_06_ramp = this->delaytilde_06_ramp;
        auto __delaytilde_06_lastDelay = this->delaytilde_06_lastDelay;
    
        for (Index i = 0; i < n; i++) {
            if (__delaytilde_06_lastDelay == -1) {
                __delaytilde_06_lastDelay = delay;
            }
    
            if (__delaytilde_06_ramp > 0) {
                number factor = __delaytilde_06_ramp / __delaytilde_06_rampInSamples;
                output[(Index)i] = this->delaytilde_06_del_read(__delaytilde_06_crossfadeDelay, 0) * factor + this->delaytilde_06_del_read(__delaytilde_06_lastDelay, 0) * (1. - factor);
                __delaytilde_06_ramp--;
            } else {
                number effectiveDelay = delay;
    
                if (effectiveDelay != __delaytilde_06_lastDelay) {
                    __delaytilde_06_ramp = __delaytilde_06_rampInSamples;
                    __delaytilde_06_crossfadeDelay = __delaytilde_06_lastDelay;
                    __delaytilde_06_lastDelay = effectiveDelay;
                    output[(Index)i] = this->delaytilde_06_del_read(__delaytilde_06_crossfadeDelay, 0);
                    __delaytilde_06_ramp--;
                } else {
                    output[(Index)i] = this->delaytilde_06_del_read(effectiveDelay, 0);
                }
            }
    
            this->delaytilde_06_del_write(input[(Index)i]);
            this->delaytilde_06_del_step();
        }
    
        this->delaytilde_06_lastDelay = __delaytilde_06_lastDelay;
        this->delaytilde_06_ramp = __delaytilde_06_ramp;
        this->delaytilde_06_crossfadeDelay = __delaytilde_06_crossfadeDelay;
    }
    
    void delaytilde_05_perform(
        const Sample * delay,
        const SampleValue * input,
        SampleValue * output,
        Index n
    ) {
        auto __delaytilde_05_crossfadeDelay = this->delaytilde_05_crossfadeDelay;
        auto __delaytilde_05_rampInSamples = this->delaytilde_05_rampInSamples;
        auto __delaytilde_05_ramp = this->delaytilde_05_ramp;
        auto __delaytilde_05_lastDelay = this->delaytilde_05_lastDelay;
    
        for (Index i = 0; i < n; i++) {
            if (__delaytilde_05_lastDelay == -1) {
                __delaytilde_05_lastDelay = delay[(Index)i];
            }
    
            if (__delaytilde_05_ramp > 0) {
                number factor = __delaytilde_05_ramp / __delaytilde_05_rampInSamples;
                output[(Index)i] = this->delaytilde_05_del_read(__delaytilde_05_crossfadeDelay, 0) * factor + this->delaytilde_05_del_read(__delaytilde_05_lastDelay, 0) * (1. - factor);
                __delaytilde_05_ramp--;
            } else {
                number effectiveDelay = delay[(Index)i];
    
                if (effectiveDelay != __delaytilde_05_lastDelay) {
                    __delaytilde_05_ramp = __delaytilde_05_rampInSamples;
                    __delaytilde_05_crossfadeDelay = __delaytilde_05_lastDelay;
                    __delaytilde_05_lastDelay = effectiveDelay;
                    output[(Index)i] = this->delaytilde_05_del_read(__delaytilde_05_crossfadeDelay, 0);
                    __delaytilde_05_ramp--;
                } else {
                    output[(Index)i] = this->delaytilde_05_del_read(effectiveDelay, 0);
                }
            }
    
            this->delaytilde_05_del_write(input[(Index)i]);
            this->delaytilde_05_del_step();
        }
    
        this->delaytilde_05_lastDelay = __delaytilde_05_lastDelay;
        this->delaytilde_05_ramp = __delaytilde_05_ramp;
        this->delaytilde_05_crossfadeDelay = __delaytilde_05_crossfadeDelay;
    }
    
    void delaytilde_08_perform(number delay, const SampleValue * input, SampleValue * output, Index n) {
        auto __delaytilde_08_crossfadeDelay = this->delaytilde_08_crossfadeDelay;
        auto __delaytilde_08_rampInSamples = this->delaytilde_08_rampInSamples;
        auto __delaytilde_08_ramp = this->delaytilde_08_ramp;
        auto __delaytilde_08_lastDelay = this->delaytilde_08_lastDelay;
    
        for (Index i = 0; i < n; i++) {
            if (__delaytilde_08_lastDelay == -1) {
                __delaytilde_08_lastDelay = delay;
            }
    
            if (__delaytilde_08_ramp > 0) {
                number factor = __delaytilde_08_ramp / __delaytilde_08_rampInSamples;
                output[(Index)i] = this->delaytilde_08_del_read(__delaytilde_08_crossfadeDelay, 0) * factor + this->delaytilde_08_del_read(__delaytilde_08_lastDelay, 0) * (1. - factor);
                __delaytilde_08_ramp--;
            } else {
                number effectiveDelay = delay;
    
                if (effectiveDelay != __delaytilde_08_lastDelay) {
                    __delaytilde_08_ramp = __delaytilde_08_rampInSamples;
                    __delaytilde_08_crossfadeDelay = __delaytilde_08_lastDelay;
                    __delaytilde_08_lastDelay = effectiveDelay;
                    output[(Index)i] = this->delaytilde_08_del_read(__delaytilde_08_crossfadeDelay, 0);
                    __delaytilde_08_ramp--;
                } else {
                    output[(Index)i] = this->delaytilde_08_del_read(effectiveDelay, 0);
                }
            }
    
            this->delaytilde_08_del_write(input[(Index)i]);
            this->delaytilde_08_del_step();
        }
    
        this->delaytilde_08_lastDelay = __delaytilde_08_lastDelay;
        this->delaytilde_08_ramp = __delaytilde_08_ramp;
        this->delaytilde_08_crossfadeDelay = __delaytilde_08_crossfadeDelay;
    }
    
    void delaytilde_07_perform(
        const Sample * delay,
        const SampleValue * input,
        SampleValue * output,
        Index n
    ) {
        auto __delaytilde_07_crossfadeDelay = this->delaytilde_07_crossfadeDelay;
        auto __delaytilde_07_rampInSamples = this->delaytilde_07_rampInSamples;
        auto __delaytilde_07_ramp = this->delaytilde_07_ramp;
        auto __delaytilde_07_lastDelay = this->delaytilde_07_lastDelay;
    
        for (Index i = 0; i < n; i++) {
            if (__delaytilde_07_lastDelay == -1) {
                __delaytilde_07_lastDelay = delay[(Index)i];
            }
    
            if (__delaytilde_07_ramp > 0) {
                number factor = __delaytilde_07_ramp / __delaytilde_07_rampInSamples;
                output[(Index)i] = this->delaytilde_07_del_read(__delaytilde_07_crossfadeDelay, 0) * factor + this->delaytilde_07_del_read(__delaytilde_07_lastDelay, 0) * (1. - factor);
                __delaytilde_07_ramp--;
            } else {
                number effectiveDelay = delay[(Index)i];
    
                if (effectiveDelay != __delaytilde_07_lastDelay) {
                    __delaytilde_07_ramp = __delaytilde_07_rampInSamples;
                    __delaytilde_07_crossfadeDelay = __delaytilde_07_lastDelay;
                    __delaytilde_07_lastDelay = effectiveDelay;
                    output[(Index)i] = this->delaytilde_07_del_read(__delaytilde_07_crossfadeDelay, 0);
                    __delaytilde_07_ramp--;
                } else {
                    output[(Index)i] = this->delaytilde_07_del_read(effectiveDelay, 0);
                }
            }
    
            this->delaytilde_07_del_write(input[(Index)i]);
            this->delaytilde_07_del_step();
        }
    
        this->delaytilde_07_lastDelay = __delaytilde_07_lastDelay;
        this->delaytilde_07_ramp = __delaytilde_07_ramp;
        this->delaytilde_07_crossfadeDelay = __delaytilde_07_crossfadeDelay;
    }
    
    void linetilde_06_perform(SampleValue * out, Index n) {
        auto __linetilde_06_time = this->linetilde_06_time;
        auto __linetilde_06_keepramp = this->linetilde_06_keepramp;
        auto __linetilde_06_currentValue = this->linetilde_06_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_06_activeRamps->length)) {
            while ((bool)(this->linetilde_06_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_06_activeRamps[0];
                number inc = this->linetilde_06_activeRamps[1];
                number rampTimeInSamples = this->linetilde_06_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_06_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_06_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_06_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -62043057,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_06_keepramp))) {
                            __linetilde_06_time = 0;
                        }
                    }
                }
    
                __linetilde_06_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_06_currentValue;
            i++;
        }
    
        this->linetilde_06_currentValue = __linetilde_06_currentValue;
        this->linetilde_06_time = __linetilde_06_time;
    }
    
    void linetilde_07_perform(SampleValue * out, Index n) {
        auto __linetilde_07_time = this->linetilde_07_time;
        auto __linetilde_07_keepramp = this->linetilde_07_keepramp;
        auto __linetilde_07_currentValue = this->linetilde_07_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_07_activeRamps->length)) {
            while ((bool)(this->linetilde_07_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_07_activeRamps[0];
                number inc = this->linetilde_07_activeRamps[1];
                number rampTimeInSamples = this->linetilde_07_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_07_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_07_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_07_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -1621164530,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_07_keepramp))) {
                            __linetilde_07_time = 0;
                        }
                    }
                }
    
                __linetilde_07_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_07_currentValue;
            i++;
        }
    
        this->linetilde_07_currentValue = __linetilde_07_currentValue;
        this->linetilde_07_time = __linetilde_07_time;
    }
    
    void dspexpr_33_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_34_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void delaytilde_09_perform(number delay, const SampleValue * input, SampleValue * output, Index n) {
        auto __delaytilde_09_crossfadeDelay = this->delaytilde_09_crossfadeDelay;
        auto __delaytilde_09_rampInSamples = this->delaytilde_09_rampInSamples;
        auto __delaytilde_09_ramp = this->delaytilde_09_ramp;
        auto __delaytilde_09_lastDelay = this->delaytilde_09_lastDelay;
    
        for (Index i = 0; i < n; i++) {
            if (__delaytilde_09_lastDelay == -1) {
                __delaytilde_09_lastDelay = delay;
            }
    
            if (__delaytilde_09_ramp > 0) {
                number factor = __delaytilde_09_ramp / __delaytilde_09_rampInSamples;
                output[(Index)i] = this->delaytilde_09_del_read(__delaytilde_09_crossfadeDelay, 0) * factor + this->delaytilde_09_del_read(__delaytilde_09_lastDelay, 0) * (1. - factor);
                __delaytilde_09_ramp--;
            } else {
                number effectiveDelay = delay;
    
                if (effectiveDelay != __delaytilde_09_lastDelay) {
                    __delaytilde_09_ramp = __delaytilde_09_rampInSamples;
                    __delaytilde_09_crossfadeDelay = __delaytilde_09_lastDelay;
                    __delaytilde_09_lastDelay = effectiveDelay;
                    output[(Index)i] = this->delaytilde_09_del_read(__delaytilde_09_crossfadeDelay, 0);
                    __delaytilde_09_ramp--;
                } else {
                    output[(Index)i] = this->delaytilde_09_del_read(effectiveDelay, 0);
                }
            }
    
            this->delaytilde_09_del_write(input[(Index)i]);
            this->delaytilde_09_del_step();
        }
    
        this->delaytilde_09_lastDelay = __delaytilde_09_lastDelay;
        this->delaytilde_09_ramp = __delaytilde_09_ramp;
        this->delaytilde_09_crossfadeDelay = __delaytilde_09_crossfadeDelay;
    }
    
    void dspexpr_32_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void reson_tilde_01_perform(
        const Sample * x,
        const Sample * centerFreq,
        number resonanceValue,
        SampleValue * out1,
        Index n
    ) {
        auto __reson_tilde_01_xm1 = this->reson_tilde_01_xm1;
        auto __reson_tilde_01_ym2 = this->reson_tilde_01_ym2;
        auto __reson_tilde_01_ym1 = this->reson_tilde_01_ym1;
        auto __reson_tilde_01_xm2 = this->reson_tilde_01_xm2;
        auto __reson_tilde_01_c2 = this->reson_tilde_01_c2;
        auto __reson_tilde_01_c1 = this->reson_tilde_01_c1;
        auto __reson_tilde_01_gainScale = this->reson_tilde_01_gainScale;
        auto __reson_tilde_01_r = this->reson_tilde_01_r;
        Index i;
    
        for (i = 0; i < n; i++) {
            number __centerFreq = centerFreq[(Index)i];
            __centerFreq = rnbo_abs(__centerFreq);
    
            if (this->reson_tilde_01_d_next(__centerFreq) != 0 || this->reson_tilde_01_d2_next(resonanceValue) != 0) {
                number clippedResonance = (resonanceValue < 0. ? 0.01 : resonanceValue);
                number bandWidth = __centerFreq * ((number)1 / clippedResonance);
                number twoPIOverSampleRate = (number)6.283185307179586 / this->sr;
                __reson_tilde_01_r = rnbo_exp(-(twoPIOverSampleRate * bandWidth));
                __reson_tilde_01_gainScale = 1 - __reson_tilde_01_r;
                __reson_tilde_01_c1 = 2. * __reson_tilde_01_r * rnbo_cos(__centerFreq * twoPIOverSampleRate);
                __reson_tilde_01_c2 = -(__reson_tilde_01_r * __reson_tilde_01_r);
            }
    
            number yn = __reson_tilde_01_gainScale * (x[(Index)i] - __reson_tilde_01_r * __reson_tilde_01_xm2) + __reson_tilde_01_c1 * __reson_tilde_01_ym1 + __reson_tilde_01_c2 * __reson_tilde_01_ym2;
            __reson_tilde_01_ym2 = __reson_tilde_01_ym1;
            __reson_tilde_01_ym1 = yn;
            __reson_tilde_01_xm2 = __reson_tilde_01_xm1;
            __reson_tilde_01_xm1 = x[(Index)i];
            out1[(Index)i] = yn;
        }
    
        this->reson_tilde_01_r = __reson_tilde_01_r;
        this->reson_tilde_01_gainScale = __reson_tilde_01_gainScale;
        this->reson_tilde_01_c1 = __reson_tilde_01_c1;
        this->reson_tilde_01_c2 = __reson_tilde_01_c2;
        this->reson_tilde_01_xm2 = __reson_tilde_01_xm2;
        this->reson_tilde_01_ym1 = __reson_tilde_01_ym1;
        this->reson_tilde_01_ym2 = __reson_tilde_01_ym2;
        this->reson_tilde_01_xm1 = __reson_tilde_01_xm1;
    }
    
    void dspexpr_30_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_36_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_37_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void delaytilde_10_perform(number delay, const SampleValue * input, SampleValue * output, Index n) {
        auto __delaytilde_10_crossfadeDelay = this->delaytilde_10_crossfadeDelay;
        auto __delaytilde_10_rampInSamples = this->delaytilde_10_rampInSamples;
        auto __delaytilde_10_ramp = this->delaytilde_10_ramp;
        auto __delaytilde_10_lastDelay = this->delaytilde_10_lastDelay;
    
        for (Index i = 0; i < n; i++) {
            if (__delaytilde_10_lastDelay == -1) {
                __delaytilde_10_lastDelay = delay;
            }
    
            if (__delaytilde_10_ramp > 0) {
                number factor = __delaytilde_10_ramp / __delaytilde_10_rampInSamples;
                output[(Index)i] = this->delaytilde_10_del_read(__delaytilde_10_crossfadeDelay, 0) * factor + this->delaytilde_10_del_read(__delaytilde_10_lastDelay, 0) * (1. - factor);
                __delaytilde_10_ramp--;
            } else {
                number effectiveDelay = delay;
    
                if (effectiveDelay != __delaytilde_10_lastDelay) {
                    __delaytilde_10_ramp = __delaytilde_10_rampInSamples;
                    __delaytilde_10_crossfadeDelay = __delaytilde_10_lastDelay;
                    __delaytilde_10_lastDelay = effectiveDelay;
                    output[(Index)i] = this->delaytilde_10_del_read(__delaytilde_10_crossfadeDelay, 0);
                    __delaytilde_10_ramp--;
                } else {
                    output[(Index)i] = this->delaytilde_10_del_read(effectiveDelay, 0);
                }
            }
    
            this->delaytilde_10_del_write(input[(Index)i]);
            this->delaytilde_10_del_step();
        }
    
        this->delaytilde_10_lastDelay = __delaytilde_10_lastDelay;
        this->delaytilde_10_ramp = __delaytilde_10_ramp;
        this->delaytilde_10_crossfadeDelay = __delaytilde_10_crossfadeDelay;
    }
    
    void dspexpr_35_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void reson_tilde_02_perform(
        const Sample * x,
        const Sample * centerFreq,
        number resonanceValue,
        SampleValue * out1,
        Index n
    ) {
        auto __reson_tilde_02_xm1 = this->reson_tilde_02_xm1;
        auto __reson_tilde_02_ym2 = this->reson_tilde_02_ym2;
        auto __reson_tilde_02_ym1 = this->reson_tilde_02_ym1;
        auto __reson_tilde_02_xm2 = this->reson_tilde_02_xm2;
        auto __reson_tilde_02_c2 = this->reson_tilde_02_c2;
        auto __reson_tilde_02_c1 = this->reson_tilde_02_c1;
        auto __reson_tilde_02_gainScale = this->reson_tilde_02_gainScale;
        auto __reson_tilde_02_r = this->reson_tilde_02_r;
        Index i;
    
        for (i = 0; i < n; i++) {
            number __centerFreq = centerFreq[(Index)i];
            __centerFreq = rnbo_abs(__centerFreq);
    
            if (this->reson_tilde_02_d_next(__centerFreq) != 0 || this->reson_tilde_02_d2_next(resonanceValue) != 0) {
                number clippedResonance = (resonanceValue < 0. ? 0.01 : resonanceValue);
                number bandWidth = __centerFreq * ((number)1 / clippedResonance);
                number twoPIOverSampleRate = (number)6.283185307179586 / this->sr;
                __reson_tilde_02_r = rnbo_exp(-(twoPIOverSampleRate * bandWidth));
                __reson_tilde_02_gainScale = 1 - __reson_tilde_02_r;
                __reson_tilde_02_c1 = 2. * __reson_tilde_02_r * rnbo_cos(__centerFreq * twoPIOverSampleRate);
                __reson_tilde_02_c2 = -(__reson_tilde_02_r * __reson_tilde_02_r);
            }
    
            number yn = __reson_tilde_02_gainScale * (x[(Index)i] - __reson_tilde_02_r * __reson_tilde_02_xm2) + __reson_tilde_02_c1 * __reson_tilde_02_ym1 + __reson_tilde_02_c2 * __reson_tilde_02_ym2;
            __reson_tilde_02_ym2 = __reson_tilde_02_ym1;
            __reson_tilde_02_ym1 = yn;
            __reson_tilde_02_xm2 = __reson_tilde_02_xm1;
            __reson_tilde_02_xm1 = x[(Index)i];
            out1[(Index)i] = yn;
        }
    
        this->reson_tilde_02_r = __reson_tilde_02_r;
        this->reson_tilde_02_gainScale = __reson_tilde_02_gainScale;
        this->reson_tilde_02_c1 = __reson_tilde_02_c1;
        this->reson_tilde_02_c2 = __reson_tilde_02_c2;
        this->reson_tilde_02_xm2 = __reson_tilde_02_xm2;
        this->reson_tilde_02_ym1 = __reson_tilde_02_ym1;
        this->reson_tilde_02_ym2 = __reson_tilde_02_ym2;
        this->reson_tilde_02_xm1 = __reson_tilde_02_xm1;
    }
    
    void dspexpr_31_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_32_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_32_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_32_value = localvalue;
    }
    
    void numberobj_33_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_33_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_33_value = localvalue;
    }
    
    void numberobj_34_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_34_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_34_value = localvalue;
    }
    
    void numberobj_35_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_35_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_35_value = localvalue;
    }
    
    void numberobj_36_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_36_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_36_value = localvalue;
    }
    
    void numberobj_37_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_37_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_37_value = localvalue;
    }
    
    void numberobj_38_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_38_value = localvalue;
    }
    
    void numberobj_39_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_39_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_39_value = localvalue;
    }
    
    void numberobj_40_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_40_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_40_value = localvalue;
    }
    
    void numberobj_41_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_41_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_41_value = localvalue;
    }
    
    void metro_01_interval_setter(number v) {
        this->metro_01_interval = (v > 0 ? v : 0);
    }
    
    void numberobj_42_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_42_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_42_value = localvalue;
    }
    
    void numberobj_43_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_43_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_43_value = localvalue;
    }
    
    void metro_02_interval_setter(number v) {
        this->metro_02_interval = (v > 0 ? v : 0);
    }
    
    void numberobj_44_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_44_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_44_value = localvalue;
    }
    
    void numberobj_32_init() {
        this->numberobj_32_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-41"), 1, this->_currentTime);
    }
    
    void numberobj_32_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_32_value;
    }
    
    void numberobj_32_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_32_value_set(preset["value"]);
    }
    
    void param_04_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_04_value;
    }
    
    void param_04_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_04_value_set(preset["value"]);
    }
    
    number numbertilde_07_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_07_smooth_d_prev);
        this->numbertilde_07_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_07_smooth_d_dspsetup() {
        this->numbertilde_07_smooth_d_reset();
    }
    
    void numbertilde_07_smooth_d_reset() {
        this->numbertilde_07_smooth_d_prev = 0;
    }
    
    number numbertilde_07_smooth_next(number x, number up, number down) {
        if (this->numbertilde_07_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_07_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_07_smooth_index = _up;
                this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _up;
            } else if (x < this->numbertilde_07_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_07_smooth_index = _down;
                this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_07_smooth_index > 0) {
            this->numbertilde_07_smooth_prev += this->numbertilde_07_smooth_increment;
            this->numbertilde_07_smooth_index -= 1;
        } else {
            this->numbertilde_07_smooth_prev = x;
        }
    
        return this->numbertilde_07_smooth_prev;
    }
    
    void numbertilde_07_smooth_reset() {
        this->numbertilde_07_smooth_prev = 0;
        this->numbertilde_07_smooth_index = 0;
        this->numbertilde_07_smooth_increment = 0;
        this->numbertilde_07_smooth_d_reset();
    }
    
    void numbertilde_07_init() {
        this->numbertilde_07_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number~_obj-32"), 1, this->_currentTime);
    }
    
    void numbertilde_07_dspsetup(bool force) {
        if ((bool)(this->numbertilde_07_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_07_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_07_currentInterval = this->numbertilde_07_currentIntervalInSamples;
        this->numbertilde_07_rampInSamples = this->mstosamps(this->numbertilde_07_ramp);
        this->numbertilde_07_setupDone = true;
        this->numbertilde_07_smooth_d_dspsetup();
    }
    
    number numbertilde_08_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_08_smooth_d_prev);
        this->numbertilde_08_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_08_smooth_d_dspsetup() {
        this->numbertilde_08_smooth_d_reset();
    }
    
    void numbertilde_08_smooth_d_reset() {
        this->numbertilde_08_smooth_d_prev = 0;
    }
    
    number numbertilde_08_smooth_next(number x, number up, number down) {
        if (this->numbertilde_08_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_08_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_08_smooth_index = _up;
                this->numbertilde_08_smooth_increment = (x - this->numbertilde_08_smooth_prev) / _up;
            } else if (x < this->numbertilde_08_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_08_smooth_index = _down;
                this->numbertilde_08_smooth_increment = (x - this->numbertilde_08_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_08_smooth_index > 0) {
            this->numbertilde_08_smooth_prev += this->numbertilde_08_smooth_increment;
            this->numbertilde_08_smooth_index -= 1;
        } else {
            this->numbertilde_08_smooth_prev = x;
        }
    
        return this->numbertilde_08_smooth_prev;
    }
    
    void numbertilde_08_smooth_reset() {
        this->numbertilde_08_smooth_prev = 0;
        this->numbertilde_08_smooth_index = 0;
        this->numbertilde_08_smooth_increment = 0;
        this->numbertilde_08_smooth_d_reset();
    }
    
    void numbertilde_08_init() {
        this->numbertilde_08_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number~_obj-31"), 1, this->_currentTime);
    }
    
    void numbertilde_08_dspsetup(bool force) {
        if ((bool)(this->numbertilde_08_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_08_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_08_currentInterval = this->numbertilde_08_currentIntervalInSamples;
        this->numbertilde_08_rampInSamples = this->mstosamps(this->numbertilde_08_ramp);
        this->numbertilde_08_setupDone = true;
        this->numbertilde_08_smooth_d_dspsetup();
    }
    
    void numberobj_33_init() {
        this->numberobj_33_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-60"), 1, this->_currentTime);
    }
    
    void numberobj_33_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_33_value;
    }
    
    void numberobj_33_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_33_value_set(preset["value"]);
    }
    
    void numberobj_34_init() {
        this->numberobj_34_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-64"), 1, this->_currentTime);
    }
    
    void numberobj_34_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_34_value;
    }
    
    void numberobj_34_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_34_value_set(preset["value"]);
    }
    
    void param_05_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_05_value;
    }
    
    void param_05_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_05_value_set(preset["value"]);
    }
    
    void delaytilde_05_del_step() {
        this->delaytilde_05_del_reader++;
    
        if (this->delaytilde_05_del_reader >= (int)(this->delaytilde_05_del_buffer->getSize()))
            this->delaytilde_05_del_reader = 0;
    }
    
    number delaytilde_05_del_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? 1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_05_del_wrap))
            ));
        } else if (interp == 6) {
            number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? 1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->fastcubicinterp(frac, this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_05_del_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? 1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_05_del_wrap))
            ));
        } else if (interp == 7) {
            number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? 1 + this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
            Index index5 = (Index)(index4 + 1);
            Index index6 = (Index)(index5 + 1);
    
            return this->spline6interp(frac, this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_05_del_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
            ), this->delaytilde_05_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_05_del_wrap))
            ));
        }
    
        number r = (int)(this->delaytilde_05_del_buffer->getSize()) + this->delaytilde_05_del_reader - ((size > this->delaytilde_05_del__maxdelay ? this->delaytilde_05_del__maxdelay : (size < (this->delaytilde_05_del_reader != this->delaytilde_05_del_writer) ? this->delaytilde_05_del_reader != this->delaytilde_05_del_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->delaytilde_05_del_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_05_del_wrap))
        );
    }
    
    void delaytilde_05_del_write(number v) {
        this->delaytilde_05_del_writer = this->delaytilde_05_del_reader;
        this->delaytilde_05_del_buffer[(Index)this->delaytilde_05_del_writer] = v;
    }
    
    number delaytilde_05_del_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->delaytilde_05_del__maxdelay : size);
        number val = this->delaytilde_05_del_read(effectiveSize, 0);
        this->delaytilde_05_del_write(v);
        this->delaytilde_05_del_step();
        return val;
    }
    
    array<Index, 2> delaytilde_05_del_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->delaytilde_05_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->delaytilde_05_del_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void delaytilde_05_del_init() {
        auto result = this->delaytilde_05_del_calcSizeInSamples();
        this->delaytilde_05_del__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->delaytilde_05_del_buffer->requestSize(requestedSizeInSamples, 1);
        this->delaytilde_05_del_wrap = requestedSizeInSamples - 1;
    }
    
    void delaytilde_05_del_clear() {
        this->delaytilde_05_del_buffer->setZero();
    }
    
    void delaytilde_05_del_reset() {
        auto result = this->delaytilde_05_del_calcSizeInSamples();
        this->delaytilde_05_del__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->delaytilde_05_del_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->delaytilde_05_del_buffer);
        this->delaytilde_05_del_wrap = this->delaytilde_05_del_buffer->getSize() - 1;
        this->delaytilde_05_del_clear();
    
        if (this->delaytilde_05_del_reader >= this->delaytilde_05_del__maxdelay || this->delaytilde_05_del_writer >= this->delaytilde_05_del__maxdelay) {
            this->delaytilde_05_del_reader = 0;
            this->delaytilde_05_del_writer = 0;
        }
    }
    
    void delaytilde_05_del_dspsetup() {
        this->delaytilde_05_del_reset();
    }
    
    number delaytilde_05_del_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 441;
    }
    
    number delaytilde_05_del_size() {
        return this->delaytilde_05_del__maxdelay;
    }
    
    void delaytilde_05_dspsetup(bool force) {
        if ((bool)(this->delaytilde_05_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->delaytilde_05_rampInSamples = (long)(this->mstosamps(0));
        this->delaytilde_05_lastDelay = -1;
        this->delaytilde_05_setupDone = true;
        this->delaytilde_05_del_dspsetup();
    }
    
    void delaytilde_06_del_step() {
        this->delaytilde_06_del_reader++;
    
        if (this->delaytilde_06_del_reader >= (int)(this->delaytilde_06_del_buffer->getSize()))
            this->delaytilde_06_del_reader = 0;
    }
    
    number delaytilde_06_del_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? 1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_06_del_wrap))
            ));
        } else if (interp == 6) {
            number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? 1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->fastcubicinterp(frac, this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_06_del_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? 1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_06_del_wrap))
            ));
        } else if (interp == 7) {
            number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? 1 + this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
            Index index5 = (Index)(index4 + 1);
            Index index6 = (Index)(index5 + 1);
    
            return this->spline6interp(frac, this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_06_del_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
            ), this->delaytilde_06_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_06_del_wrap))
            ));
        }
    
        number r = (int)(this->delaytilde_06_del_buffer->getSize()) + this->delaytilde_06_del_reader - ((size > this->delaytilde_06_del__maxdelay ? this->delaytilde_06_del__maxdelay : (size < (this->delaytilde_06_del_reader != this->delaytilde_06_del_writer) ? this->delaytilde_06_del_reader != this->delaytilde_06_del_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->delaytilde_06_del_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_06_del_wrap))
        );
    }
    
    void delaytilde_06_del_write(number v) {
        this->delaytilde_06_del_writer = this->delaytilde_06_del_reader;
        this->delaytilde_06_del_buffer[(Index)this->delaytilde_06_del_writer] = v;
    }
    
    number delaytilde_06_del_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->delaytilde_06_del__maxdelay : size);
        number val = this->delaytilde_06_del_read(effectiveSize, 0);
        this->delaytilde_06_del_write(v);
        this->delaytilde_06_del_step();
        return val;
    }
    
    array<Index, 2> delaytilde_06_del_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->delaytilde_06_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->delaytilde_06_del_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void delaytilde_06_del_init() {
        auto result = this->delaytilde_06_del_calcSizeInSamples();
        this->delaytilde_06_del__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->delaytilde_06_del_buffer->requestSize(requestedSizeInSamples, 1);
        this->delaytilde_06_del_wrap = requestedSizeInSamples - 1;
    }
    
    void delaytilde_06_del_clear() {
        this->delaytilde_06_del_buffer->setZero();
    }
    
    void delaytilde_06_del_reset() {
        auto result = this->delaytilde_06_del_calcSizeInSamples();
        this->delaytilde_06_del__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->delaytilde_06_del_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->delaytilde_06_del_buffer);
        this->delaytilde_06_del_wrap = this->delaytilde_06_del_buffer->getSize() - 1;
        this->delaytilde_06_del_clear();
    
        if (this->delaytilde_06_del_reader >= this->delaytilde_06_del__maxdelay || this->delaytilde_06_del_writer >= this->delaytilde_06_del__maxdelay) {
            this->delaytilde_06_del_reader = 0;
            this->delaytilde_06_del_writer = 0;
        }
    }
    
    void delaytilde_06_del_dspsetup() {
        this->delaytilde_06_del_reset();
    }
    
    number delaytilde_06_del_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        return samplerate * 8;
    }
    
    number delaytilde_06_del_size() {
        return this->delaytilde_06_del__maxdelay;
    }
    
    void delaytilde_06_dspsetup(bool force) {
        if ((bool)(this->delaytilde_06_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->delaytilde_06_rampInSamples = (long)(this->mstosamps(50));
        this->delaytilde_06_lastDelay = -1;
        this->delaytilde_06_setupDone = true;
        this->delaytilde_06_del_dspsetup();
    }
    
    void delaytilde_07_del_step() {
        this->delaytilde_07_del_reader++;
    
        if (this->delaytilde_07_del_reader >= (int)(this->delaytilde_07_del_buffer->getSize()))
            this->delaytilde_07_del_reader = 0;
    }
    
    number delaytilde_07_del_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? 1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_07_del_wrap))
            ));
        } else if (interp == 6) {
            number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? 1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->fastcubicinterp(frac, this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_07_del_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? 1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_07_del_wrap))
            ));
        } else if (interp == 7) {
            number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? 1 + this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
            Index index5 = (Index)(index4 + 1);
            Index index6 = (Index)(index5 + 1);
    
            return this->spline6interp(frac, this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_07_del_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
            ), this->delaytilde_07_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_07_del_wrap))
            ));
        }
    
        number r = (int)(this->delaytilde_07_del_buffer->getSize()) + this->delaytilde_07_del_reader - ((size > this->delaytilde_07_del__maxdelay ? this->delaytilde_07_del__maxdelay : (size < (this->delaytilde_07_del_reader != this->delaytilde_07_del_writer) ? this->delaytilde_07_del_reader != this->delaytilde_07_del_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->delaytilde_07_del_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_07_del_wrap))
        );
    }
    
    void delaytilde_07_del_write(number v) {
        this->delaytilde_07_del_writer = this->delaytilde_07_del_reader;
        this->delaytilde_07_del_buffer[(Index)this->delaytilde_07_del_writer] = v;
    }
    
    number delaytilde_07_del_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->delaytilde_07_del__maxdelay : size);
        number val = this->delaytilde_07_del_read(effectiveSize, 0);
        this->delaytilde_07_del_write(v);
        this->delaytilde_07_del_step();
        return val;
    }
    
    array<Index, 2> delaytilde_07_del_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->delaytilde_07_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->delaytilde_07_del_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void delaytilde_07_del_init() {
        auto result = this->delaytilde_07_del_calcSizeInSamples();
        this->delaytilde_07_del__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->delaytilde_07_del_buffer->requestSize(requestedSizeInSamples, 1);
        this->delaytilde_07_del_wrap = requestedSizeInSamples - 1;
    }
    
    void delaytilde_07_del_clear() {
        this->delaytilde_07_del_buffer->setZero();
    }
    
    void delaytilde_07_del_reset() {
        auto result = this->delaytilde_07_del_calcSizeInSamples();
        this->delaytilde_07_del__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->delaytilde_07_del_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->delaytilde_07_del_buffer);
        this->delaytilde_07_del_wrap = this->delaytilde_07_del_buffer->getSize() - 1;
        this->delaytilde_07_del_clear();
    
        if (this->delaytilde_07_del_reader >= this->delaytilde_07_del__maxdelay || this->delaytilde_07_del_writer >= this->delaytilde_07_del__maxdelay) {
            this->delaytilde_07_del_reader = 0;
            this->delaytilde_07_del_writer = 0;
        }
    }
    
    void delaytilde_07_del_dspsetup() {
        this->delaytilde_07_del_reset();
    }
    
    number delaytilde_07_del_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        return 441;
    }
    
    number delaytilde_07_del_size() {
        return this->delaytilde_07_del__maxdelay;
    }
    
    void delaytilde_07_dspsetup(bool force) {
        if ((bool)(this->delaytilde_07_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->delaytilde_07_rampInSamples = (long)(this->mstosamps(0));
        this->delaytilde_07_lastDelay = -1;
        this->delaytilde_07_setupDone = true;
        this->delaytilde_07_del_dspsetup();
    }
    
    void delaytilde_08_del_step() {
        this->delaytilde_08_del_reader++;
    
        if (this->delaytilde_08_del_reader >= (int)(this->delaytilde_08_del_buffer->getSize()))
            this->delaytilde_08_del_reader = 0;
    }
    
    number delaytilde_08_del_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? 1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_08_del_wrap))
            ));
        } else if (interp == 6) {
            number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? 1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->fastcubicinterp(frac, this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_08_del_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? 1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_08_del_wrap))
            ));
        } else if (interp == 7) {
            number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? 1 + this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
            Index index5 = (Index)(index4 + 1);
            Index index6 = (Index)(index5 + 1);
    
            return this->spline6interp(frac, this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_08_del_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
            ), this->delaytilde_08_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_08_del_wrap))
            ));
        }
    
        number r = (int)(this->delaytilde_08_del_buffer->getSize()) + this->delaytilde_08_del_reader - ((size > this->delaytilde_08_del__maxdelay ? this->delaytilde_08_del__maxdelay : (size < (this->delaytilde_08_del_reader != this->delaytilde_08_del_writer) ? this->delaytilde_08_del_reader != this->delaytilde_08_del_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->delaytilde_08_del_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_08_del_wrap))
        );
    }
    
    void delaytilde_08_del_write(number v) {
        this->delaytilde_08_del_writer = this->delaytilde_08_del_reader;
        this->delaytilde_08_del_buffer[(Index)this->delaytilde_08_del_writer] = v;
    }
    
    number delaytilde_08_del_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->delaytilde_08_del__maxdelay : size);
        number val = this->delaytilde_08_del_read(effectiveSize, 0);
        this->delaytilde_08_del_write(v);
        this->delaytilde_08_del_step();
        return val;
    }
    
    array<Index, 2> delaytilde_08_del_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->delaytilde_08_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->delaytilde_08_del_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void delaytilde_08_del_init() {
        auto result = this->delaytilde_08_del_calcSizeInSamples();
        this->delaytilde_08_del__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->delaytilde_08_del_buffer->requestSize(requestedSizeInSamples, 1);
        this->delaytilde_08_del_wrap = requestedSizeInSamples - 1;
    }
    
    void delaytilde_08_del_clear() {
        this->delaytilde_08_del_buffer->setZero();
    }
    
    void delaytilde_08_del_reset() {
        auto result = this->delaytilde_08_del_calcSizeInSamples();
        this->delaytilde_08_del__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->delaytilde_08_del_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->delaytilde_08_del_buffer);
        this->delaytilde_08_del_wrap = this->delaytilde_08_del_buffer->getSize() - 1;
        this->delaytilde_08_del_clear();
    
        if (this->delaytilde_08_del_reader >= this->delaytilde_08_del__maxdelay || this->delaytilde_08_del_writer >= this->delaytilde_08_del__maxdelay) {
            this->delaytilde_08_del_reader = 0;
            this->delaytilde_08_del_writer = 0;
        }
    }
    
    void delaytilde_08_del_dspsetup() {
        this->delaytilde_08_del_reset();
    }
    
    number delaytilde_08_del_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        return samplerate * 8;
    }
    
    number delaytilde_08_del_size() {
        return this->delaytilde_08_del__maxdelay;
    }
    
    void delaytilde_08_dspsetup(bool force) {
        if ((bool)(this->delaytilde_08_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->delaytilde_08_rampInSamples = (long)(this->mstosamps(50));
        this->delaytilde_08_lastDelay = -1;
        this->delaytilde_08_setupDone = true;
        this->delaytilde_08_del_dspsetup();
    }
    
    void numberobj_35_init() {
        this->numberobj_35_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-63"), 1, this->_currentTime);
    }
    
    void numberobj_35_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_35_value;
    }
    
    void numberobj_35_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_35_value_set(preset["value"]);
    }
    
    number reson_tilde_01_d_next(number x) {
        number temp = (number)(x - this->reson_tilde_01_d_prev);
        this->reson_tilde_01_d_prev = x;
        return temp;
    }
    
    void reson_tilde_01_d_dspsetup() {
        this->reson_tilde_01_d_reset();
    }
    
    void reson_tilde_01_d_reset() {
        this->reson_tilde_01_d_prev = 0;
    }
    
    number reson_tilde_01_d2_next(number x) {
        number temp = (number)(x - this->reson_tilde_01_d2_prev);
        this->reson_tilde_01_d2_prev = x;
        return temp;
    }
    
    void reson_tilde_01_d2_dspsetup() {
        this->reson_tilde_01_d2_reset();
    }
    
    void reson_tilde_01_d2_reset() {
        this->reson_tilde_01_d2_prev = 0;
    }
    
    void reson_tilde_01_reset() {
        this->reson_tilde_01_xm1 = 0;
        this->reson_tilde_01_xm2 = 0;
        this->reson_tilde_01_ym1 = 0;
        this->reson_tilde_01_ym2 = 0;
    }
    
    void reson_tilde_01_dspsetup(bool force) {
        if ((bool)(this->reson_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->reson_tilde_01_reset();
        this->reson_tilde_01_setupDone = true;
        this->reson_tilde_01_d_dspsetup();
        this->reson_tilde_01_d2_dspsetup();
    }
    
    void delaytilde_09_del_step() {
        this->delaytilde_09_del_reader++;
    
        if (this->delaytilde_09_del_reader >= (int)(this->delaytilde_09_del_buffer->getSize()))
            this->delaytilde_09_del_reader = 0;
    }
    
    number delaytilde_09_del_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? 1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_09_del_wrap))
            ));
        } else if (interp == 6) {
            number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? 1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->fastcubicinterp(frac, this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_09_del_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? 1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_09_del_wrap))
            ));
        } else if (interp == 7) {
            number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? 1 + this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
            Index index5 = (Index)(index4 + 1);
            Index index6 = (Index)(index5 + 1);
    
            return this->spline6interp(frac, this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_09_del_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
            ), this->delaytilde_09_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_09_del_wrap))
            ));
        }
    
        number r = (int)(this->delaytilde_09_del_buffer->getSize()) + this->delaytilde_09_del_reader - ((size > this->delaytilde_09_del__maxdelay ? this->delaytilde_09_del__maxdelay : (size < (this->delaytilde_09_del_reader != this->delaytilde_09_del_writer) ? this->delaytilde_09_del_reader != this->delaytilde_09_del_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->delaytilde_09_del_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_09_del_wrap))
        );
    }
    
    void delaytilde_09_del_write(number v) {
        this->delaytilde_09_del_writer = this->delaytilde_09_del_reader;
        this->delaytilde_09_del_buffer[(Index)this->delaytilde_09_del_writer] = v;
    }
    
    number delaytilde_09_del_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->delaytilde_09_del__maxdelay : size);
        number val = this->delaytilde_09_del_read(effectiveSize, 0);
        this->delaytilde_09_del_write(v);
        this->delaytilde_09_del_step();
        return val;
    }
    
    array<Index, 2> delaytilde_09_del_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->delaytilde_09_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->delaytilde_09_del_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void delaytilde_09_del_init() {
        auto result = this->delaytilde_09_del_calcSizeInSamples();
        this->delaytilde_09_del__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->delaytilde_09_del_buffer->requestSize(requestedSizeInSamples, 1);
        this->delaytilde_09_del_wrap = requestedSizeInSamples - 1;
    }
    
    void delaytilde_09_del_clear() {
        this->delaytilde_09_del_buffer->setZero();
    }
    
    void delaytilde_09_del_reset() {
        auto result = this->delaytilde_09_del_calcSizeInSamples();
        this->delaytilde_09_del__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->delaytilde_09_del_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->delaytilde_09_del_buffer);
        this->delaytilde_09_del_wrap = this->delaytilde_09_del_buffer->getSize() - 1;
        this->delaytilde_09_del_clear();
    
        if (this->delaytilde_09_del_reader >= this->delaytilde_09_del__maxdelay || this->delaytilde_09_del_writer >= this->delaytilde_09_del__maxdelay) {
            this->delaytilde_09_del_reader = 0;
            this->delaytilde_09_del_writer = 0;
        }
    }
    
    void delaytilde_09_del_dspsetup() {
        this->delaytilde_09_del_reset();
    }
    
    number delaytilde_09_del_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        return samplerate * 8;
    }
    
    number delaytilde_09_del_size() {
        return this->delaytilde_09_del__maxdelay;
    }
    
    void delaytilde_09_dspsetup(bool force) {
        if ((bool)(this->delaytilde_09_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->delaytilde_09_rampInSamples = (long)(this->mstosamps(50));
        this->delaytilde_09_lastDelay = -1;
        this->delaytilde_09_setupDone = true;
        this->delaytilde_09_del_dspsetup();
    }
    
    void numberobj_36_init() {
        this->numberobj_36_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-65"), 1, this->_currentTime);
    }
    
    void numberobj_36_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_36_value;
    }
    
    void numberobj_36_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_36_value_set(preset["value"]);
    }
    
    number reson_tilde_02_d_next(number x) {
        number temp = (number)(x - this->reson_tilde_02_d_prev);
        this->reson_tilde_02_d_prev = x;
        return temp;
    }
    
    void reson_tilde_02_d_dspsetup() {
        this->reson_tilde_02_d_reset();
    }
    
    void reson_tilde_02_d_reset() {
        this->reson_tilde_02_d_prev = 0;
    }
    
    number reson_tilde_02_d2_next(number x) {
        number temp = (number)(x - this->reson_tilde_02_d2_prev);
        this->reson_tilde_02_d2_prev = x;
        return temp;
    }
    
    void reson_tilde_02_d2_dspsetup() {
        this->reson_tilde_02_d2_reset();
    }
    
    void reson_tilde_02_d2_reset() {
        this->reson_tilde_02_d2_prev = 0;
    }
    
    void reson_tilde_02_reset() {
        this->reson_tilde_02_xm1 = 0;
        this->reson_tilde_02_xm2 = 0;
        this->reson_tilde_02_ym1 = 0;
        this->reson_tilde_02_ym2 = 0;
    }
    
    void reson_tilde_02_dspsetup(bool force) {
        if ((bool)(this->reson_tilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->reson_tilde_02_reset();
        this->reson_tilde_02_setupDone = true;
        this->reson_tilde_02_d_dspsetup();
        this->reson_tilde_02_d2_dspsetup();
    }
    
    void delaytilde_10_del_step() {
        this->delaytilde_10_del_reader++;
    
        if (this->delaytilde_10_del_reader >= (int)(this->delaytilde_10_del_buffer->getSize()))
            this->delaytilde_10_del_reader = 0;
    }
    
    number delaytilde_10_del_read(number size, Int interp) {
        if (interp == 0) {
            number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            long index2 = (long)(index1 + 1);
    
            return this->linearinterp(frac, this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
            ));
        } else if (interp == 1) {
            number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? 1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->cubicinterp(frac, this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_10_del_wrap))
            ));
        } else if (interp == 6) {
            number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? 1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->fastcubicinterp(frac, this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_10_del_wrap))
            ));
        } else if (interp == 2) {
            number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? 1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
    
            return this->splineinterp(frac, this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_10_del_wrap))
            ));
        } else if (interp == 7) {
            number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? 1 + this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
            Index index3 = (Index)(index2 + 1);
            Index index4 = (Index)(index3 + 1);
            Index index5 = (Index)(index4 + 1);
            Index index6 = (Index)(index5 + 1);
    
            return this->spline6interp(frac, this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_10_del_wrap))
            ));
        } else if (interp == 3) {
            number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
            long index1 = (long)(rnbo_floor(r));
            number frac = r - index1;
            Index index2 = (Index)(index1 + 1);
    
            return this->cosineinterp(frac, this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
            ), this->delaytilde_10_del_buffer->getSample(
                0,
                (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_10_del_wrap))
            ));
        }
    
        number r = (int)(this->delaytilde_10_del_buffer->getSize()) + this->delaytilde_10_del_reader - ((size > this->delaytilde_10_del__maxdelay ? this->delaytilde_10_del__maxdelay : (size < (this->delaytilde_10_del_reader != this->delaytilde_10_del_writer) ? this->delaytilde_10_del_reader != this->delaytilde_10_del_writer : size)));
        long index1 = (long)(rnbo_floor(r));
    
        return this->delaytilde_10_del_buffer->getSample(
            0,
            (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_10_del_wrap))
        );
    }
    
    void delaytilde_10_del_write(number v) {
        this->delaytilde_10_del_writer = this->delaytilde_10_del_reader;
        this->delaytilde_10_del_buffer[(Index)this->delaytilde_10_del_writer] = v;
    }
    
    number delaytilde_10_del_next(number v, int size) {
        number effectiveSize = (size == -1 ? this->delaytilde_10_del__maxdelay : size);
        number val = this->delaytilde_10_del_read(effectiveSize, 0);
        this->delaytilde_10_del_write(v);
        this->delaytilde_10_del_step();
        return val;
    }
    
    array<Index, 2> delaytilde_10_del_calcSizeInSamples() {
        number sizeInSamples = 0;
        Index allocatedSizeInSamples = 0;
    
        {
            sizeInSamples = this->delaytilde_10_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
            this->delaytilde_10_del_sizemode = 0;
        }
    
        sizeInSamples = rnbo_floor(sizeInSamples);
        sizeInSamples = this->maximum(sizeInSamples, 2);
        allocatedSizeInSamples = (Index)(sizeInSamples);
        allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
        return {sizeInSamples, allocatedSizeInSamples};
    }
    
    void delaytilde_10_del_init() {
        auto result = this->delaytilde_10_del_calcSizeInSamples();
        this->delaytilde_10_del__maxdelay = result[0];
        Index requestedSizeInSamples = (Index)(result[1]);
        this->delaytilde_10_del_buffer->requestSize(requestedSizeInSamples, 1);
        this->delaytilde_10_del_wrap = requestedSizeInSamples - 1;
    }
    
    void delaytilde_10_del_clear() {
        this->delaytilde_10_del_buffer->setZero();
    }
    
    void delaytilde_10_del_reset() {
        auto result = this->delaytilde_10_del_calcSizeInSamples();
        this->delaytilde_10_del__maxdelay = result[0];
        Index allocatedSizeInSamples = (Index)(result[1]);
        this->delaytilde_10_del_buffer->setSize(allocatedSizeInSamples);
        updateDataRef(this, this->delaytilde_10_del_buffer);
        this->delaytilde_10_del_wrap = this->delaytilde_10_del_buffer->getSize() - 1;
        this->delaytilde_10_del_clear();
    
        if (this->delaytilde_10_del_reader >= this->delaytilde_10_del__maxdelay || this->delaytilde_10_del_writer >= this->delaytilde_10_del__maxdelay) {
            this->delaytilde_10_del_reader = 0;
            this->delaytilde_10_del_writer = 0;
        }
    }
    
    void delaytilde_10_del_dspsetup() {
        this->delaytilde_10_del_reset();
    }
    
    number delaytilde_10_del_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        return samplerate * 8;
    }
    
    number delaytilde_10_del_size() {
        return this->delaytilde_10_del__maxdelay;
    }
    
    void delaytilde_10_dspsetup(bool force) {
        if ((bool)(this->delaytilde_10_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->delaytilde_10_rampInSamples = (long)(this->mstosamps(50));
        this->delaytilde_10_lastDelay = -1;
        this->delaytilde_10_setupDone = true;
        this->delaytilde_10_del_dspsetup();
    }
    
    void numberobj_37_init() {
        this->numberobj_37_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-68"), 1, this->_currentTime);
    }
    
    void numberobj_37_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_37_value;
    }
    
    void numberobj_37_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_37_value_set(preset["value"]);
    }
    
    void numberobj_38_init() {
        this->numberobj_38_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-80"), 1, this->_currentTime);
    }
    
    void numberobj_38_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_38_value;
    }
    
    void numberobj_38_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_38_value_set(preset["value"]);
    }
    
    void numberobj_39_init() {
        this->numberobj_39_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-82"), 1, this->_currentTime);
    }
    
    void numberobj_39_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_39_value;
    }
    
    void numberobj_39_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_39_value_set(preset["value"]);
    }
    
    void numberobj_40_init() {
        this->numberobj_40_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-35"), 1, this->_currentTime);
    }
    
    void numberobj_40_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_40_value;
    }
    
    void numberobj_40_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_40_value_set(preset["value"]);
    }
    
    void numberobj_41_init() {
        this->numberobj_41_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-1"), 1, this->_currentTime);
    }
    
    void numberobj_41_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_41_value;
    }
    
    void numberobj_41_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_41_value_set(preset["value"]);
    }
    
    void metro_01_onTransportChanged(number ) {}
    
    void metro_01_onBeatTimeChanged(number ) {}
    
    void numberobj_42_init() {
        this->numberobj_42_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-5"), 1, this->_currentTime);
    }
    
    void numberobj_42_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_42_value;
    }
    
    void numberobj_42_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_42_value_set(preset["value"]);
    }
    
    void counter_01_inc() {
        this->counter_01_count = ((bool)(this->counter_01_phase) ? this->counter_01_count + 1 : this->counter_01_count - 1);
    }
    
    void counter_01_input() {
        this->counter_01_output_set(this->counter_01_count);
        this->counter_01_inc();
    
        if (this->counter_01_count > this->counter_01_maximum) {
            if (this->counter_01_direction == 2) {
                this->counter_01_phase = !(bool)(this->counter_01_phase);
                this->counter_01_count = this->counter_01_maximum;
                this->counter_01_inc();
            } else
                this->counter_01_count = this->counter_01_minimum;
    
            if ((bool)(!(bool)(this->counter_01_overflow_number))) {
                if (this->counter_01_carryflag == 1)
                    this->counter_01_overflow_bang_bang();
                else
                    this->counter_01_overflow_number_set(1);
            }
    
            this->counter_01_carry_set(this->counter_01_carry + 1);
        } else if ((bool)(this->counter_01_overflow_number) && this->counter_01_carryflag == 0)
            this->counter_01_overflow_number_set(0);
    
        if (this->counter_01_count < this->counter_01_minimum) {
            if (this->counter_01_direction == 2) {
                this->counter_01_phase = !(bool)(this->counter_01_phase);
                this->counter_01_count = this->counter_01_minimum;
                this->counter_01_inc();
            } else
                this->counter_01_count = this->counter_01_maximum;
    
            if ((bool)(!(bool)(this->counter_01_underflow_number))) {
                if (this->counter_01_carryflag == 1)
                    this->counter_01_underflow_bang_bang();
                else
                    this->counter_01_underflow_number_set(1);
            }
    
            this->counter_01_carry_set(this->counter_01_carry + 1);
        } else if ((bool)(this->counter_01_underflow_number) && this->counter_01_carryflag == 0)
            this->counter_01_underflow_number_set(0);
    }
    
    void numberobj_43_init() {
        this->numberobj_43_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-45"), 1, this->_currentTime);
    }
    
    void numberobj_43_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_43_value;
    }
    
    void numberobj_43_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_43_value_set(preset["value"]);
    }
    
    void counter_02_inc() {
        this->counter_02_count = ((bool)(this->counter_02_phase) ? this->counter_02_count + 1 : this->counter_02_count - 1);
    }
    
    void counter_02_input() {
        this->counter_02_output_set(this->counter_02_count);
        this->counter_02_inc();
    
        if (this->counter_02_count > this->counter_02_maximum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_maximum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_minimum;
    
            if ((bool)(!(bool)(this->counter_02_overflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_overflow_bang_bang();
                else
                    this->counter_02_overflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_overflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_overflow_number_set(0);
    
        if (this->counter_02_count < this->counter_02_minimum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_minimum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_maximum;
    
            if ((bool)(!(bool)(this->counter_02_underflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_underflow_bang_bang();
                else
                    this->counter_02_underflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_underflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_underflow_number_set(0);
    }
    
    void metro_02_onTransportChanged(number ) {}
    
    void metro_02_onBeatTimeChanged(number ) {}
    
    void message_04_init() {
        this->message_04_set_set({1});
    }
    
    void transport_01_onTempoChanged(number state) {
        this->transport_01_outtempo_set(state);
    }
    
    void transport_01_onTransportChanged(number state) {
        this->transport_01_state_set(state);
    }
    
    void transport_01_onTimeSignatureChanged(number numerator, number denominator) {
        this->transport_01_outtimesig_set({numerator, denominator});
    }
    
    void message_05_init() {
        this->message_05_set_set({0});
    }
    
    void message_06_init() {
        this->message_06_set_set({-1});
    }
    
    void numberobj_44_init() {
        this->numberobj_44_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Bubble/number_obj-21"), 1, this->_currentTime);
    }
    
    void numberobj_44_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_44_value;
    }
    
    void numberobj_44_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_44_value_set(preset["value"]);
    }
    
    void param_06_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_06_value;
    }
    
    void param_06_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_06_value_set(preset["value"]);
    }
    
    void timevalue_01_sendValue() {
        {
            {
                {
                    {
                        this->timevalue_01_out_set(this->tickstoms(480));
                    }
                }
            }
        }
    }
    
    void timevalue_01_onTempoChanged(number tempo) {
        RNBO_UNUSED(tempo);
    
        {
            this->timevalue_01_sendValue();
        }
    }
    
    void timevalue_01_onSampleRateChanged(number ) {}
    
    void timevalue_01_onTimeSignatureChanged(number , number ) {}
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        mstosamps_tilde_01_ms = 0;
        dspexpr_26_in1 = 0;
        p_05_target = 0;
        slide_tilde_01_x = 0;
        slide_tilde_01_up = 1000;
        slide_tilde_01_down = 1000;
        p_06_target = 0;
        dspexpr_27_in1 = 0;
        dspexpr_27_in2 = 5;
        numberobj_32_value = 0;
        numberobj_32_value_setter(numberobj_32_value);
        param_04_value = 25;
        triangle_tilde_01_phase = 0;
        triangle_tilde_01_duty = 0.5;
        numbertilde_07_input_number = 0;
        numbertilde_07_ramp = 0;
        dspexpr_28_in1 = 0;
        slide_tilde_02_x = 0;
        slide_tilde_02_up = 1000;
        slide_tilde_02_down = 1000;
        dspexpr_29_in1 = 0;
        dspexpr_29_in2 = 5;
        triangle_tilde_02_phase = 0;
        triangle_tilde_02_duty = 0.5;
        numbertilde_08_input_number = 0;
        numbertilde_08_ramp = 0;
        numberobj_33_value = 0;
        numberobj_33_value_setter(numberobj_33_value);
        scale_03_inlow = 0;
        scale_03_inhigh = 100;
        scale_03_outlow = 0;
        scale_03_outhigh = 5;
        scale_03_power = 1.325;
        numberobj_34_value = 0;
        numberobj_34_value_setter(numberobj_34_value);
        param_05_value = 0;
        delaytilde_05_delay = 0;
        dspexpr_30_in1 = 0;
        dspexpr_30_in2 = 0;
        delaytilde_06_delay = 0;
        mstosamps_02_ms = 0;
        delaytilde_07_delay = 0;
        dspexpr_31_in1 = 0;
        dspexpr_31_in2 = 0;
        delaytilde_08_delay = 0;
        numberobj_35_value = 0;
        numberobj_35_value_setter(numberobj_35_value);
        reson_tilde_01_x = 0;
        reson_tilde_01_centerFreq = 0;
        reson_tilde_01_resonanceValue = 0;
        delaytilde_09_delay = 0;
        mstosamps_03_ms = 0;
        dspexpr_32_in1 = 0;
        dspexpr_32_in2 = 0;
        dspexpr_33_in1 = 0;
        dspexpr_33_in2 = 0;
        dspexpr_34_in1 = 0;
        dspexpr_34_in2 = 0;
        numberobj_36_value = 0;
        numberobj_36_value_setter(numberobj_36_value);
        reson_tilde_02_x = 0;
        reson_tilde_02_centerFreq = 0;
        reson_tilde_02_resonanceValue = 0;
        delaytilde_10_delay = 0;
        dspexpr_35_in1 = 0;
        dspexpr_35_in2 = 0;
        dspexpr_36_in1 = 0;
        dspexpr_36_in2 = 0;
        dspexpr_37_in1 = 0;
        dspexpr_37_in2 = 0;
        numberobj_37_value = 0;
        numberobj_37_value_setter(numberobj_37_value);
        mstosamps_04_ms = 0;
        linetilde_06_time = 20;
        linetilde_06_keepramp = 1;
        numberobj_38_value = 0;
        numberobj_38_value_setter(numberobj_38_value);
        linetilde_07_time = 50;
        linetilde_07_keepramp = 1;
        numberobj_39_value = 0;
        numberobj_39_value_setter(numberobj_39_value);
        scale_04_inlow = 0;
        scale_04_inhigh = 100;
        scale_04_outlow = 0;
        scale_04_outhigh = 0.99;
        scale_04_power = 1;
        numberobj_40_value = 0;
        numberobj_40_value_setter(numberobj_40_value);
        numberobj_41_value = 0;
        numberobj_41_value_setter(numberobj_41_value);
        accum_01_x = 0;
        accum_01_reset = 0;
        metro_01_on = 1;
        metro_01_interval = 500;
        metro_01_interval_setter(metro_01_interval);
        expr_21_in1 = 0;
        expr_21_in2 = 0;
        expr_21_out1 = 0;
        numberobj_42_value = 0;
        numberobj_42_value_setter(numberobj_42_value);
        counter_01_carryflag = 0;
        counter_01_direction = 0;
        counter_01_resetnext_number = 0;
        counter_01_resetnow_number = 0;
        counter_01_maximum = 7;
        counter_01_output = 0;
        counter_01_underflow_number = 0;
        counter_01_overflow_number = 0;
        counter_01_carry = 0;
        counter_01_minimum = 0;
        expr_22_in1 = 0;
        expr_22_in2 = 0;
        expr_22_out1 = 0;
        numberobj_43_value = 0;
        numberobj_43_value_setter(numberobj_43_value);
        counter_02_carryflag = 0;
        counter_02_direction = 0;
        counter_02_resetnext_number = 0;
        counter_02_resetnow_number = 0;
        counter_02_maximum = 7;
        counter_02_output = 0;
        counter_02_underflow_number = 0;
        counter_02_overflow_number = 0;
        counter_02_carry = 0;
        counter_02_minimum = 0;
        metro_02_on = 0;
        metro_02_interval = 0;
        metro_02_interval_setter(metro_02_interval);
        transport_01_input_number = 0;
        transport_01_position = 0;
        transport_01_tempo = 120;
        transport_01_ticks = 0;
        select_02_test1 = 1;
        numberobj_44_value = 0;
        numberobj_44_value_setter(numberobj_44_value);
        listlookup_02_lookup = { 3, 7, 15 };
        param_06_value = 7;
        ctlin_02_input = 0;
        ctlin_02_controller = 1;
        ctlin_02_channel = -1;
        expr_19_in1 = 0;
        expr_19_in2 = 0.007874015748;
        expr_19_out1 = 0;
        ctlin_03_input = 0;
        ctlin_03_controller = 2;
        ctlin_03_channel = -1;
        expr_20_in1 = 0;
        expr_20_in2 = 0.007874015748;
        expr_20_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        signals[5] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        slide_tilde_01_prev = 0;
        numberobj_32_currentFormat = 6;
        numberobj_32_lastValue = 0;
        param_04_lastValue = 0;
        numbertilde_07_currentInterval = 0;
        numbertilde_07_currentIntervalInSamples = 0;
        numbertilde_07_lastValue = 0;
        numbertilde_07_outValue = 0;
        numbertilde_07_rampInSamples = 0;
        numbertilde_07_currentMode = 0;
        numbertilde_07_smooth_d_prev = 0;
        numbertilde_07_smooth_prev = 0;
        numbertilde_07_smooth_index = 0;
        numbertilde_07_smooth_increment = 0;
        numbertilde_07_setupDone = false;
        slide_tilde_02_prev = 0;
        numbertilde_08_currentInterval = 0;
        numbertilde_08_currentIntervalInSamples = 0;
        numbertilde_08_lastValue = 0;
        numbertilde_08_outValue = 0;
        numbertilde_08_rampInSamples = 0;
        numbertilde_08_currentMode = 0;
        numbertilde_08_smooth_d_prev = 0;
        numbertilde_08_smooth_prev = 0;
        numbertilde_08_smooth_index = 0;
        numbertilde_08_smooth_increment = 0;
        numbertilde_08_setupDone = false;
        numberobj_33_currentFormat = 6;
        numberobj_33_lastValue = 0;
        numberobj_34_currentFormat = 6;
        numberobj_34_lastValue = 0;
        param_05_lastValue = 0;
        delaytilde_05_lastDelay = -1;
        delaytilde_05_crossfadeDelay = 0;
        delaytilde_05_ramp = 0;
        delaytilde_05_rampInSamples = 0;
        delaytilde_05_del__maxdelay = 0;
        delaytilde_05_del_sizemode = 0;
        delaytilde_05_del_wrap = 0;
        delaytilde_05_del_reader = 0;
        delaytilde_05_del_writer = 0;
        delaytilde_05_setupDone = false;
        delaytilde_06_lastDelay = -1;
        delaytilde_06_crossfadeDelay = 0;
        delaytilde_06_ramp = 0;
        delaytilde_06_rampInSamples = 0;
        delaytilde_06_del__maxdelay = 0;
        delaytilde_06_del_sizemode = 0;
        delaytilde_06_del_wrap = 0;
        delaytilde_06_del_reader = 0;
        delaytilde_06_del_writer = 0;
        delaytilde_06_setupDone = false;
        delaytilde_07_lastDelay = -1;
        delaytilde_07_crossfadeDelay = 0;
        delaytilde_07_ramp = 0;
        delaytilde_07_rampInSamples = 0;
        delaytilde_07_del__maxdelay = 0;
        delaytilde_07_del_sizemode = 0;
        delaytilde_07_del_wrap = 0;
        delaytilde_07_del_reader = 0;
        delaytilde_07_del_writer = 0;
        delaytilde_07_setupDone = false;
        delaytilde_08_lastDelay = -1;
        delaytilde_08_crossfadeDelay = 0;
        delaytilde_08_ramp = 0;
        delaytilde_08_rampInSamples = 0;
        delaytilde_08_del__maxdelay = 0;
        delaytilde_08_del_sizemode = 0;
        delaytilde_08_del_wrap = 0;
        delaytilde_08_del_reader = 0;
        delaytilde_08_del_writer = 0;
        delaytilde_08_setupDone = false;
        numberobj_35_currentFormat = 6;
        numberobj_35_lastValue = 0;
        reson_tilde_01_r = 0;
        reson_tilde_01_c1 = 0;
        reson_tilde_01_c2 = 0;
        reson_tilde_01_gainScale = 0;
        reson_tilde_01_xm1 = 0;
        reson_tilde_01_xm2 = 0;
        reson_tilde_01_ym1 = 0;
        reson_tilde_01_ym2 = 0;
        reson_tilde_01_d_prev = 0;
        reson_tilde_01_d2_prev = 0;
        reson_tilde_01_setupDone = false;
        delaytilde_09_lastDelay = -1;
        delaytilde_09_crossfadeDelay = 0;
        delaytilde_09_ramp = 0;
        delaytilde_09_rampInSamples = 0;
        delaytilde_09_del__maxdelay = 0;
        delaytilde_09_del_sizemode = 0;
        delaytilde_09_del_wrap = 0;
        delaytilde_09_del_reader = 0;
        delaytilde_09_del_writer = 0;
        delaytilde_09_setupDone = false;
        numberobj_36_currentFormat = 6;
        numberobj_36_lastValue = 0;
        reson_tilde_02_r = 0;
        reson_tilde_02_c1 = 0;
        reson_tilde_02_c2 = 0;
        reson_tilde_02_gainScale = 0;
        reson_tilde_02_xm1 = 0;
        reson_tilde_02_xm2 = 0;
        reson_tilde_02_ym1 = 0;
        reson_tilde_02_ym2 = 0;
        reson_tilde_02_d_prev = 0;
        reson_tilde_02_d2_prev = 0;
        reson_tilde_02_setupDone = false;
        delaytilde_10_lastDelay = -1;
        delaytilde_10_crossfadeDelay = 0;
        delaytilde_10_ramp = 0;
        delaytilde_10_rampInSamples = 0;
        delaytilde_10_del__maxdelay = 0;
        delaytilde_10_del_sizemode = 0;
        delaytilde_10_del_wrap = 0;
        delaytilde_10_del_reader = 0;
        delaytilde_10_del_writer = 0;
        delaytilde_10_setupDone = false;
        numberobj_37_currentFormat = 6;
        numberobj_37_lastValue = 0;
        linetilde_06_currentValue = 0;
        numberobj_38_currentFormat = 6;
        numberobj_38_lastValue = 0;
        linetilde_07_currentValue = 0;
        numberobj_39_currentFormat = 6;
        numberobj_39_lastValue = 0;
        numberobj_40_currentFormat = 6;
        numberobj_40_lastValue = 0;
        numberobj_41_currentFormat = 6;
        numberobj_41_lastValue = 0;
        accum_01_value = 250;
        metro_01_last = -1;
        metro_01_next = -1;
        numberobj_42_currentFormat = 6;
        numberobj_42_lastValue = 0;
        counter_01_count = 0;
        counter_01_phase = true;
        numberobj_43_currentFormat = 6;
        numberobj_43_lastValue = 0;
        counter_02_count = 0;
        counter_02_phase = true;
        metro_02_last = -1;
        metro_02_next = -1;
        numberobj_44_currentFormat = 6;
        numberobj_44_lastValue = 0;
        param_06_lastValue = 0;
        ctlin_02_status = 0;
        ctlin_02_byte1 = -1;
        ctlin_02_inchan = 0;
        ctlin_03_status = 0;
        ctlin_03_byte1 = -1;
        ctlin_03_inchan = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number mstosamps_tilde_01_ms;
        number dspexpr_26_in1;
        number p_05_target;
        number slide_tilde_01_x;
        number slide_tilde_01_up;
        number slide_tilde_01_down;
        number p_06_target;
        number dspexpr_27_in1;
        number dspexpr_27_in2;
        number numberobj_32_value;
        number param_04_value;
        number triangle_tilde_01_phase;
        number triangle_tilde_01_duty;
        number numbertilde_07_input_number;
        number numbertilde_07_ramp;
        number dspexpr_28_in1;
        number slide_tilde_02_x;
        number slide_tilde_02_up;
        number slide_tilde_02_down;
        number dspexpr_29_in1;
        number dspexpr_29_in2;
        number triangle_tilde_02_phase;
        number triangle_tilde_02_duty;
        number numbertilde_08_input_number;
        number numbertilde_08_ramp;
        number numberobj_33_value;
        list scale_03_input;
        number scale_03_inlow;
        number scale_03_inhigh;
        number scale_03_outlow;
        number scale_03_outhigh;
        number scale_03_power;
        list scale_03_out;
        number numberobj_34_value;
        number param_05_value;
        number delaytilde_05_delay;
        number dspexpr_30_in1;
        number dspexpr_30_in2;
        number delaytilde_06_delay;
        number mstosamps_02_ms;
        number delaytilde_07_delay;
        number dspexpr_31_in1;
        number dspexpr_31_in2;
        number delaytilde_08_delay;
        number numberobj_35_value;
        number reson_tilde_01_x;
        number reson_tilde_01_centerFreq;
        number reson_tilde_01_resonanceValue;
        number delaytilde_09_delay;
        number mstosamps_03_ms;
        number dspexpr_32_in1;
        number dspexpr_32_in2;
        number dspexpr_33_in1;
        number dspexpr_33_in2;
        number dspexpr_34_in1;
        number dspexpr_34_in2;
        number numberobj_36_value;
        number reson_tilde_02_x;
        number reson_tilde_02_centerFreq;
        number reson_tilde_02_resonanceValue;
        number delaytilde_10_delay;
        number dspexpr_35_in1;
        number dspexpr_35_in2;
        number dspexpr_36_in1;
        number dspexpr_36_in2;
        number dspexpr_37_in1;
        number dspexpr_37_in2;
        number numberobj_37_value;
        number mstosamps_04_ms;
        list linetilde_06_segments;
        number linetilde_06_time;
        number linetilde_06_keepramp;
        number numberobj_38_value;
        list linetilde_07_segments;
        number linetilde_07_time;
        number linetilde_07_keepramp;
        number numberobj_39_value;
        list scale_04_input;
        number scale_04_inlow;
        number scale_04_inhigh;
        number scale_04_outlow;
        number scale_04_outhigh;
        number scale_04_power;
        list scale_04_out;
        number numberobj_40_value;
        number numberobj_41_value;
        number accum_01_x;
        number accum_01_reset;
        number metro_01_on;
        number metro_01_interval;
        number expr_21_in1;
        number expr_21_in2;
        number expr_21_out1;
        number numberobj_42_value;
        Int counter_01_carryflag;
        number counter_01_direction;
        number counter_01_resetnext_number;
        number counter_01_resetnow_number;
        number counter_01_maximum;
        number counter_01_output;
        number counter_01_underflow_number;
        number counter_01_overflow_number;
        number counter_01_carry;
        number counter_01_minimum;
        number expr_22_in1;
        number expr_22_in2;
        number expr_22_out1;
        number numberobj_43_value;
        Int counter_02_carryflag;
        number counter_02_direction;
        number counter_02_resetnext_number;
        number counter_02_resetnow_number;
        number counter_02_maximum;
        number counter_02_output;
        number counter_02_underflow_number;
        number counter_02_overflow_number;
        number counter_02_carry;
        number counter_02_minimum;
        number metro_02_on;
        number metro_02_interval;
        list message_04_set;
        number transport_01_input_number;
        number transport_01_position;
        number transport_01_tempo;
        list transport_01_timesig;
        number transport_01_ticks;
        list message_05_set;
        number select_02_test1;
        list message_06_set;
        number numberobj_44_value;
        list listlookup_02_input;
        list listlookup_02_lookup;
        number param_06_value;
        number ctlin_02_input;
        number ctlin_02_controller;
        number ctlin_02_channel;
        number expr_19_in1;
        number expr_19_in2;
        number expr_19_out1;
        number ctlin_03_input;
        number ctlin_03_controller;
        number ctlin_03_channel;
        number expr_20_in1;
        number expr_20_in2;
        number expr_20_out1;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[6];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number slide_tilde_01_prev;
        Int numberobj_32_currentFormat;
        number numberobj_32_lastValue;
        number param_04_lastValue;
        SampleIndex numbertilde_07_currentInterval;
        SampleIndex numbertilde_07_currentIntervalInSamples;
        number numbertilde_07_lastValue;
        number numbertilde_07_outValue;
        number numbertilde_07_rampInSamples;
        Int numbertilde_07_currentMode;
        number numbertilde_07_smooth_d_prev;
        number numbertilde_07_smooth_prev;
        number numbertilde_07_smooth_index;
        number numbertilde_07_smooth_increment;
        bool numbertilde_07_setupDone;
        number slide_tilde_02_prev;
        SampleIndex numbertilde_08_currentInterval;
        SampleIndex numbertilde_08_currentIntervalInSamples;
        number numbertilde_08_lastValue;
        number numbertilde_08_outValue;
        number numbertilde_08_rampInSamples;
        Int numbertilde_08_currentMode;
        number numbertilde_08_smooth_d_prev;
        number numbertilde_08_smooth_prev;
        number numbertilde_08_smooth_index;
        number numbertilde_08_smooth_increment;
        bool numbertilde_08_setupDone;
        Int numberobj_33_currentFormat;
        number numberobj_33_lastValue;
        Int numberobj_34_currentFormat;
        number numberobj_34_lastValue;
        number param_05_lastValue;
        number delaytilde_05_lastDelay;
        number delaytilde_05_crossfadeDelay;
        number delaytilde_05_ramp;
        long delaytilde_05_rampInSamples;
        Float64BufferRef delaytilde_05_del_buffer;
        Index delaytilde_05_del__maxdelay;
        Int delaytilde_05_del_sizemode;
        Index delaytilde_05_del_wrap;
        Int delaytilde_05_del_reader;
        Int delaytilde_05_del_writer;
        bool delaytilde_05_setupDone;
        number delaytilde_06_lastDelay;
        number delaytilde_06_crossfadeDelay;
        number delaytilde_06_ramp;
        long delaytilde_06_rampInSamples;
        Float64BufferRef delaytilde_06_del_buffer;
        Index delaytilde_06_del__maxdelay;
        Int delaytilde_06_del_sizemode;
        Index delaytilde_06_del_wrap;
        Int delaytilde_06_del_reader;
        Int delaytilde_06_del_writer;
        bool delaytilde_06_setupDone;
        number delaytilde_07_lastDelay;
        number delaytilde_07_crossfadeDelay;
        number delaytilde_07_ramp;
        long delaytilde_07_rampInSamples;
        Float64BufferRef delaytilde_07_del_buffer;
        Index delaytilde_07_del__maxdelay;
        Int delaytilde_07_del_sizemode;
        Index delaytilde_07_del_wrap;
        Int delaytilde_07_del_reader;
        Int delaytilde_07_del_writer;
        bool delaytilde_07_setupDone;
        number delaytilde_08_lastDelay;
        number delaytilde_08_crossfadeDelay;
        number delaytilde_08_ramp;
        long delaytilde_08_rampInSamples;
        Float64BufferRef delaytilde_08_del_buffer;
        Index delaytilde_08_del__maxdelay;
        Int delaytilde_08_del_sizemode;
        Index delaytilde_08_del_wrap;
        Int delaytilde_08_del_reader;
        Int delaytilde_08_del_writer;
        bool delaytilde_08_setupDone;
        Int numberobj_35_currentFormat;
        number numberobj_35_lastValue;
        number reson_tilde_01_r;
        number reson_tilde_01_c1;
        number reson_tilde_01_c2;
        number reson_tilde_01_gainScale;
        number reson_tilde_01_xm1;
        number reson_tilde_01_xm2;
        number reson_tilde_01_ym1;
        number reson_tilde_01_ym2;
        number reson_tilde_01_d_prev;
        number reson_tilde_01_d2_prev;
        bool reson_tilde_01_setupDone;
        number delaytilde_09_lastDelay;
        number delaytilde_09_crossfadeDelay;
        number delaytilde_09_ramp;
        long delaytilde_09_rampInSamples;
        Float64BufferRef delaytilde_09_del_buffer;
        Index delaytilde_09_del__maxdelay;
        Int delaytilde_09_del_sizemode;
        Index delaytilde_09_del_wrap;
        Int delaytilde_09_del_reader;
        Int delaytilde_09_del_writer;
        bool delaytilde_09_setupDone;
        Int numberobj_36_currentFormat;
        number numberobj_36_lastValue;
        number reson_tilde_02_r;
        number reson_tilde_02_c1;
        number reson_tilde_02_c2;
        number reson_tilde_02_gainScale;
        number reson_tilde_02_xm1;
        number reson_tilde_02_xm2;
        number reson_tilde_02_ym1;
        number reson_tilde_02_ym2;
        number reson_tilde_02_d_prev;
        number reson_tilde_02_d2_prev;
        bool reson_tilde_02_setupDone;
        number delaytilde_10_lastDelay;
        number delaytilde_10_crossfadeDelay;
        number delaytilde_10_ramp;
        long delaytilde_10_rampInSamples;
        Float64BufferRef delaytilde_10_del_buffer;
        Index delaytilde_10_del__maxdelay;
        Int delaytilde_10_del_sizemode;
        Index delaytilde_10_del_wrap;
        Int delaytilde_10_del_reader;
        Int delaytilde_10_del_writer;
        bool delaytilde_10_setupDone;
        Int numberobj_37_currentFormat;
        number numberobj_37_lastValue;
        list linetilde_06_activeRamps;
        number linetilde_06_currentValue;
        Int numberobj_38_currentFormat;
        number numberobj_38_lastValue;
        list linetilde_07_activeRamps;
        number linetilde_07_currentValue;
        Int numberobj_39_currentFormat;
        number numberobj_39_lastValue;
        Int numberobj_40_currentFormat;
        number numberobj_40_lastValue;
        Int numberobj_41_currentFormat;
        number numberobj_41_lastValue;
        number accum_01_value;
        MillisecondTime metro_01_last;
        MillisecondTime metro_01_next;
        Int numberobj_42_currentFormat;
        number numberobj_42_lastValue;
        number counter_01_count;
        bool counter_01_phase;
        Int numberobj_43_currentFormat;
        number numberobj_43_lastValue;
        number counter_02_count;
        bool counter_02_phase;
        MillisecondTime metro_02_last;
        MillisecondTime metro_02_next;
        Int numberobj_44_currentFormat;
        number numberobj_44_lastValue;
        number param_06_lastValue;
        int ctlin_02_status;
        int ctlin_02_byte1;
        int ctlin_02_inchan;
        int ctlin_03_status;
        int ctlin_03_byte1;
        int ctlin_03_inchan;
        number stackprotect_count;
        DataRef delaytilde_05_del_bufferobj;
        DataRef delaytilde_06_del_bufferobj;
        DataRef delaytilde_07_del_bufferobj;
        DataRef delaytilde_08_del_bufferobj;
        DataRef delaytilde_09_del_bufferobj;
        DataRef delaytilde_10_del_bufferobj;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_53* p_05;
        RNBOSubpatcher_54* p_06;
    
};

class RNBOSubpatcher_63 : public PatcherInterfaceImpl {
    
    friend class RnboBubble;
    
    public:
    
    RNBOSubpatcher_63()
    {
    }
    
    ~RNBOSubpatcher_63()
    {
    }
    
    virtual RnboBubble* getPatcher() const {
        return static_cast<RnboBubble *>(_parentPatcher);
    }
    
    RnboBubble* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 1696335371, false);
        getEngine()->flushClockEvents(this, -1735137014, false);
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, -62043057, false);
        getEngine()->flushClockEvents(this, -1621164530, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
        getEngine()->flushClockEvents(this, 2098551528, false);
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    ParameterValue fromnormalized(ParameterIndex index, ParameterValue normalizedValue) {
        return this->convertFromNormalizedParameterValue(index, normalizedValue);
    }
    
    Index getNumMidiInputPorts() const {
        return 1;
    }
    
    void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
        this->updateTime(time);
        this->ctlin_04_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
    }
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->dspexpr_43_perform(in1, this->signals[0], n);
        this->dspexpr_44_perform(in2, this->signals[1], n);
        this->maximum_tilde_01_perform(this->signals[0], this->signals[1], this->signals[2], n);
    
        this->rampsmooth_tilde_02_perform(
            this->signals[2],
            this->rampsmooth_tilde_02_up,
            this->rampsmooth_tilde_02_down,
            this->signals[1],
            n
        );
    
        this->linetilde_08_perform(this->signals[2], n);
        this->linetilde_09_perform(this->signals[0], n);
        this->dspexpr_46_perform(this->signals[2], this->signals[0], this->signals[3], n);
        this->numbertilde_10_perform(this->signals[3], this->dummyBuffer, n);
        this->dspexpr_45_perform(this->signals[2], this->signals[3], this->signals[0], n);
        this->dspexpr_42_perform(this->signals[1], this->signals[3], this->signals[2], n);
        this->dspexpr_41_perform(this->signals[2], this->signals[0], this->signals[3], n);
    
        this->dspexpr_40_perform(
            this->signals[3],
            this->dspexpr_40_in2,
            this->dspexpr_40_in3,
            this->signals[0],
            n
        );
    
        this->numbertilde_09_perform(this->signals[0], this->dummyBuffer, n);
        this->dspexpr_39_perform(in2, this->signals[0], out2, n);
        this->dspexpr_38_perform(in1, this->signals[0], out1, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->rampsmooth_tilde_02_dspsetup(forceDSPSetup);
        this->numbertilde_10_dspsetup(forceDSPSetup);
        this->numbertilde_09_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_07_getPresetValue(getSubState(preset, "threshold"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_07_value_set(v);
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_07_value;
            }
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 1;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "threshold";
            }
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "Gate/threshold";
            }
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = -100;
                info->min = -100;
                info->max = 0;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Threshold";
                info->unit = "dB";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            {
                value = (value < -100 ? -100 : (value > 0 ? 0 : value));
                ParameterValue normalizedValue = (value - -100) / (0 - -100);
                return normalizedValue;
            }
            }
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 0:
            {
            {
                {
                    return -100 + value * (0 - -100);
                }
            }
            }
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_07_value_constrain(value);
            }
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 1696335371:
            {
            this->loadbang_04_startupbang_bang();
            break;
            }
        case -1735137014:
            {
            this->loadbang_05_startupbang_bang();
            break;
            }
        case -871642103:
            {
            this->loadbang_06_startupbang_bang();
            break;
            }
        case -62043057:
            {
            this->linetilde_08_target_bang();
            break;
            }
        case -1621164530:
            {
            this->linetilde_09_target_bang();
            break;
            }
        case -1494586265:
            {
            this->numbertilde_10_value_set(value);
            break;
            }
        case 2098551528:
            {
            this->numbertilde_09_value_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("Gate/number~_obj-51") == objectId)
                this->numbertilde_09_sig_number_set(payload);
    
            if (TAG("Gate/number~_obj-70") == objectId)
                this->numbertilde_10_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("Gate/number~_obj-51") == objectId)
                this->numbertilde_09_mode_set(payload);
    
            if (TAG("Gate/number~_obj-70") == objectId)
                this->numbertilde_10_mode_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("Gate/number_obj-99") == objectId)
                this->numberobj_45_valin_set(payload);
    
            if (TAG("Gate/number_obj-53") == objectId)
                this->numberobj_46_valin_set(payload);
    
            if (TAG("Gate/number_obj-6") == objectId)
                this->numberobj_47_valin_set(payload);
    
            if (TAG("Gate/number_obj-31") == objectId)
                this->numberobj_48_valin_set(payload);
    
            if (TAG("Gate/number_obj-73") == objectId)
                this->numberobj_49_valin_set(payload);
    
            if (TAG("Gate/number_obj-67") == objectId)
                this->numberobj_50_valin_set(payload);
    
            if (TAG("Gate/number_obj-30") == objectId)
                this->numberobj_51_valin_set(payload);
    
            if (TAG("Gate/number_obj-32") == objectId)
                this->numberobj_52_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Gate/number_obj-99") == objectId)
                this->numberobj_45_format_set(payload);
    
            if (TAG("Gate/number_obj-53") == objectId)
                this->numberobj_46_format_set(payload);
    
            if (TAG("Gate/number_obj-6") == objectId)
                this->numberobj_47_format_set(payload);
    
            if (TAG("Gate/number_obj-31") == objectId)
                this->numberobj_48_format_set(payload);
    
            if (TAG("Gate/number_obj-73") == objectId)
                this->numberobj_49_format_set(payload);
    
            if (TAG("Gate/number_obj-67") == objectId)
                this->numberobj_50_format_set(payload);
    
            if (TAG("Gate/number_obj-30") == objectId)
                this->numberobj_51_format_set(payload);
    
            if (TAG("Gate/number_obj-32") == objectId)
                this->numberobj_52_format_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("Gate/number~_obj-51") == objectId)
                this->numbertilde_09_sig_list_set(payload);
    
            if (TAG("Gate/number~_obj-70") == objectId)
                this->numbertilde_10_sig_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("Gate/loadbang_obj-5") == objectId)
                this->loadbang_04_startupbang_bang();
    
            if (TAG("Gate/loadbang_obj-10") == objectId)
                this->loadbang_05_startupbang_bang();
    
            if (TAG("Gate/loadbang_obj-21") == objectId)
                this->loadbang_06_startupbang_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("Gate/number~_obj-51"):
            {
            return "Gate/number~_obj-51";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Gate/number_obj-99"):
            {
            return "Gate/number_obj-99";
            }
        case TAG("atten"):
            {
            return "atten";
            }
        case TAG(""):
            {
            return "";
            }
        case TAG("Gate/number_obj-53"):
            {
            return "Gate/number_obj-53";
            }
        case TAG("Gate/number~_obj-70"):
            {
            return "Gate/number~_obj-70";
            }
        case TAG("Gate/number_obj-6"):
            {
            return "Gate/number_obj-6";
            }
        case TAG("Gate/number_obj-31"):
            {
            return "Gate/number_obj-31";
            }
        case TAG("Gate/number_obj-73"):
            {
            return "Gate/number_obj-73";
            }
        case TAG("Gate/number_obj-67"):
            {
            return "Gate/number_obj-67";
            }
        case TAG("Gate/number_obj-30"):
            {
            return "Gate/number_obj-30";
            }
        case TAG("Gate/number_obj-32"):
            {
            return "Gate/number_obj-32";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("Gate/loadbang_obj-5"):
            {
            return "Gate/loadbang_obj-5";
            }
        case TAG("Gate/loadbang_obj-10"):
            {
            return "Gate/loadbang_obj-10";
            }
        case TAG("Gate/loadbang_obj-21"):
            {
            return "Gate/loadbang_obj-21";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void param_07_value_set(number v) {
        v = this->param_07_value_constrain(v);
        this->param_07_value = v;
        this->sendParameter(0, false);
    
        if (this->param_07_value != this->param_07_lastValue) {
            this->getEngine()->presetTouched();
            this->param_07_lastValue = this->param_07_value;
        }
    
        this->numberobj_46_value_set(v);
    }
    
    void numbertilde_09_sig_number_set(number v) {
        this->numbertilde_09_outValue = v;
    }
    
    void numbertilde_09_sig_list_set(const list& v) {
        this->numbertilde_09_outValue = v[0];
    }
    
    void numbertilde_09_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_09_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_09_currentMode = 1;
        }
    }
    
    void numberobj_45_valin_set(number v) {
        this->numberobj_45_value_set(v);
    }
    
    void numberobj_45_format_set(number v) {
        this->numberobj_45_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_46_valin_set(number v) {
        this->numberobj_46_value_set(v);
    }
    
    void numberobj_46_format_set(number v) {
        this->numberobj_46_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void loadbang_04_startupbang_bang() {
        this->loadbang_04_output_bang();
    }
    
    void numbertilde_10_sig_number_set(number v) {
        this->numbertilde_10_outValue = v;
    }
    
    void numbertilde_10_sig_list_set(const list& v) {
        this->numbertilde_10_outValue = v[0];
    }
    
    void numbertilde_10_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_10_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_10_currentMode = 1;
        }
    }
    
    void numberobj_47_valin_set(number v) {
        this->numberobj_47_value_set(v);
    }
    
    void numberobj_47_format_set(number v) {
        this->numberobj_47_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_48_valin_set(number v) {
        this->numberobj_48_value_set(v);
    }
    
    void numberobj_48_format_set(number v) {
        this->numberobj_48_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_49_valin_set(number v) {
        this->numberobj_49_value_set(v);
    }
    
    void numberobj_49_format_set(number v) {
        this->numberobj_49_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_50_valin_set(number v) {
        this->numberobj_50_value_set(v);
    }
    
    void numberobj_50_format_set(number v) {
        this->numberobj_50_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void loadbang_05_startupbang_bang() {
        this->loadbang_05_output_bang();
    }
    
    void numberobj_51_valin_set(number v) {
        this->numberobj_51_value_set(v);
    }
    
    void numberobj_51_format_set(number v) {
        this->numberobj_51_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_52_valin_set(number v) {
        this->numberobj_52_value_set(v);
    }
    
    void numberobj_52_format_set(number v) {
        this->numberobj_52_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void loadbang_06_startupbang_bang() {
        this->loadbang_06_output_bang();
    }
    
    void linetilde_08_target_bang() {}
    
    void linetilde_09_target_bang() {}
    
    void numbertilde_10_value_set(number v) {
        this->expr_26_in1_set(v);
    }
    
    void numbertilde_09_value_set(number v) {
        this->expr_23_in1_set(v);
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numbertilde_09_init();
        this->numberobj_45_init();
        this->numberobj_46_init();
        this->numbertilde_10_init();
        this->numberobj_47_init();
        this->numberobj_48_init();
        this->numberobj_49_init();
        this->numberobj_50_init();
        this->numberobj_51_init();
        this->numberobj_52_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->getEngine()->scheduleClockEvent(this, 1696335371, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, -1735137014, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    
        {
            this->scheduleParamInit(0, 1);
        }
    }
    
    void allocateDataRefs() {}
    
    number param_07_value_constrain(number v) const {
        v = (v > 0 ? 0 : (v < -100 ? -100 : v));
        return v;
    }
    
    void linetilde_08_time_set(number v) {
        this->linetilde_08_time = v;
    }
    
    void linetilde_08_segments_set(const list& v) {
        this->linetilde_08_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_08_time == 0) {
                this->linetilde_08_activeRamps->length = 0;
                this->linetilde_08_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_08_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_08_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_08_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_08_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_08_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_08_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_08_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_08_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_08_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_08_activeRamps->push(lastRampValue);
                    this->linetilde_08_activeRamps->push(0);
                    this->linetilde_08_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_08_keepramp)) {
                            this->linetilde_08_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_08_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_08_activeRamps->push(destinationValue);
                    this->linetilde_08_activeRamps->push(inc);
                    this->linetilde_08_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void expr_25_out1_set(number v) {
        this->expr_25_out1 = v;
    
        {
            list converted = {this->expr_25_out1};
            this->linetilde_08_segments_set(converted);
        }
    }
    
    void expr_25_in1_set(number in1) {
        this->expr_25_in1 = in1;
        this->expr_25_out1_set(rnbo_pow(10, this->expr_25_in1 * 0.05));//#map:Gate/dbtoa_obj-49:1
    }
    
    void numberobj_46_output_set(number v) {
        this->expr_25_in1_set(v);
    }
    
    void numberobj_46_value_set(number v) {
        this->numberobj_46_value_setter(v);
        v = this->numberobj_46_value;
        number localvalue = v;
    
        if (this->numberobj_46_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Gate/number_obj-53"), localvalue, this->_currentTime);
        this->numberobj_46_output_set(localvalue);
    }
    
    void outport_01_input_number_set(number v) {
        this->getEngine()->sendNumMessage(TAG("atten"), TAG(""), v, this->_currentTime);
    }
    
    void numberobj_45_output_set(number v) {
        this->outport_01_input_number_set(v);
    }
    
    void numberobj_45_value_set(number v) {
        this->numberobj_45_value_setter(v);
        v = this->numberobj_45_value;
        number localvalue = v;
    
        if (this->numberobj_45_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Gate/number_obj-99"), localvalue, this->_currentTime);
        this->numberobj_45_output_set(localvalue);
    }
    
    void rampsmooth_tilde_02_up_set(number v) {
        this->rampsmooth_tilde_02_up = v;
    }
    
    void numberobj_48_output_set(number v) {
        this->rampsmooth_tilde_02_up_set(v);
    }
    
    void numberobj_48_value_set(number v) {
        this->numberobj_48_value_setter(v);
        v = this->numberobj_48_value;
        number localvalue = v;
    
        if (this->numberobj_48_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Gate/number_obj-31"), localvalue, this->_currentTime);
        this->numberobj_48_output_set(localvalue);
    }
    
    void mstosamps_05_out1_set(number v) {
        this->numberobj_48_value_set(v);
    }
    
    void mstosamps_05_ms_set(number ms) {
        this->mstosamps_05_ms = ms;
    
        {
            this->mstosamps_05_out1_set(ms * this->sr * 0.001);
            return;
        }
    }
    
    void numberobj_47_output_set(number v) {
        this->mstosamps_05_ms_set(v);
    }
    
    void numberobj_47_value_set(number v) {
        this->numberobj_47_value_setter(v);
        v = this->numberobj_47_value;
        number localvalue = v;
    
        if (this->numberobj_47_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Gate/number_obj-6"), localvalue, this->_currentTime);
        this->numberobj_47_output_set(localvalue);
    }
    
    void floatnum_02_out_set(number v) {
        this->numberobj_47_value_set(v);
    }
    
    void floatnum_02_input_bang_bang() {
        this->floatnum_02_out_set(this->floatnum_02_stored);
    }
    
    void loadbang_04_output_bang() {
        this->floatnum_02_input_bang_bang();
    }
    
    void numberobj_49_output_set(number ) {}
    
    void numberobj_49_value_set(number v) {
        this->numberobj_49_value_setter(v);
        v = this->numberobj_49_value;
        number localvalue = v;
    
        if (this->numberobj_49_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Gate/number_obj-73"), localvalue, this->_currentTime);
        this->numberobj_49_output_set(localvalue);
    }
    
    void linetilde_09_time_set(number v) {
        this->linetilde_09_time = v;
    }
    
    void linetilde_09_segments_set(const list& v) {
        this->linetilde_09_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_09_time == 0) {
                this->linetilde_09_activeRamps->length = 0;
                this->linetilde_09_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_09_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_09_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_09_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_09_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_09_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_09_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_09_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_09_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_09_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_09_activeRamps->push(lastRampValue);
                    this->linetilde_09_activeRamps->push(0);
                    this->linetilde_09_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_09_keepramp)) {
                            this->linetilde_09_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_09_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_09_activeRamps->push(destinationValue);
                    this->linetilde_09_activeRamps->push(inc);
                    this->linetilde_09_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void expr_27_out1_set(number v) {
        this->expr_27_out1 = v;
    
        {
            list converted = {this->expr_27_out1};
            this->linetilde_09_segments_set(converted);
        }
    }
    
    void expr_27_in1_set(number in1) {
        this->expr_27_in1 = in1;
        this->expr_27_out1_set(rnbo_pow(10, this->expr_27_in1 * 0.05));//#map:Gate/dbtoa_obj-101:1
    }
    
    void numberobj_50_output_set(number v) {
        this->expr_27_in1_set(v);
    }
    
    void numberobj_50_value_set(number v) {
        this->numberobj_50_value_setter(v);
        v = this->numberobj_50_value;
        number localvalue = v;
    
        if (this->numberobj_50_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Gate/number_obj-67"), localvalue, this->_currentTime);
        this->numberobj_50_output_set(localvalue);
    }
    
    void rampsmooth_tilde_02_down_set(number v) {
        this->rampsmooth_tilde_02_down = v;
    }
    
    void numberobj_51_output_set(number v) {
        this->rampsmooth_tilde_02_down_set(v);
    }
    
    void numberobj_51_value_set(number v) {
        this->numberobj_51_value_setter(v);
        v = this->numberobj_51_value;
        number localvalue = v;
    
        if (this->numberobj_51_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Gate/number_obj-30"), localvalue, this->_currentTime);
        this->numberobj_51_output_set(localvalue);
    }
    
    void mstosamps_06_out1_set(number v) {
        this->numberobj_51_value_set(v);
    }
    
    void mstosamps_06_ms_set(number ms) {
        this->mstosamps_06_ms = ms;
    
        {
            this->mstosamps_06_out1_set(ms * this->sr * 0.001);
            return;
        }
    }
    
    void numberobj_52_output_set(number v) {
        this->mstosamps_06_ms_set(v);
    }
    
    void numberobj_52_value_set(number v) {
        this->numberobj_52_value_setter(v);
        v = this->numberobj_52_value;
        number localvalue = v;
    
        if (this->numberobj_52_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Gate/number_obj-32"), localvalue, this->_currentTime);
        this->numberobj_52_output_set(localvalue);
    }
    
    void floatnum_03_out_set(number v) {
        this->numberobj_52_value_set(v);
    }
    
    void floatnum_03_input_bang_bang() {
        this->floatnum_03_out_set(this->floatnum_03_stored);
    }
    
    void loadbang_05_output_bang() {
        this->floatnum_03_input_bang_bang();
    }
    
    void floatnum_04_out_set(number v) {
        this->numberobj_50_value_set(v);
    }
    
    void floatnum_04_input_bang_bang() {
        this->floatnum_04_out_set(this->floatnum_04_stored);
    }
    
    void loadbang_06_output_bang() {
        this->floatnum_04_input_bang_bang();
    }
    
    void ctlin_04_outchannel_set(number ) {}
    
    void ctlin_04_outcontroller_set(number ) {}
    
    void fromnormalized_04_output_set(number v) {
        this->param_07_value_set(v);
    }
    
    void fromnormalized_04_input_set(number v) {
        this->fromnormalized_04_output_set(this->fromnormalized(0, v));
    }
    
    void expr_24_out1_set(number v) {
        this->expr_24_out1 = v;
        this->fromnormalized_04_input_set(this->expr_24_out1);
    }
    
    void expr_24_in1_set(number in1) {
        this->expr_24_in1 = in1;
        this->expr_24_out1_set(this->expr_24_in1 * this->expr_24_in2);//#map:expr_24:1
    }
    
    void ctlin_04_value_set(number v) {
        this->expr_24_in1_set(v);
    }
    
    void ctlin_04_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_04_channel || this->ctlin_04_channel == -1) && (data[1] == this->ctlin_04_controller || this->ctlin_04_controller == -1)) {
            this->ctlin_04_outchannel_set(channel);
            this->ctlin_04_outcontroller_set(data[1]);
            this->ctlin_04_value_set(data[2]);
            this->ctlin_04_status = 0;
        }
    }
    
    void dspexpr_43_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_abs(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_44_perform(const Sample * in1, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = rnbo_abs(in1[(Index)i]);//#map:_###_obj_###_:1
        }
    }
    
    void maximum_tilde_01_perform(const Sample * x, const Sample * y, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = (x[(Index)i] < y[(Index)i] ? y[(Index)i] : x[(Index)i]);
        }
    }
    
    void rampsmooth_tilde_02_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
        auto __rampsmooth_tilde_02_increment = this->rampsmooth_tilde_02_increment;
        auto __rampsmooth_tilde_02_index = this->rampsmooth_tilde_02_index;
        auto __rampsmooth_tilde_02_prev = this->rampsmooth_tilde_02_prev;
        Index i;
    
        for (i = 0; i < n; i++) {
            if (this->rampsmooth_tilde_02_d_next(x[(Index)i]) != 0.) {
                if (x[(Index)i] > __rampsmooth_tilde_02_prev) {
                    number _up = up;
    
                    if (_up < 1)
                        _up = 1;
    
                    __rampsmooth_tilde_02_index = _up;
                    __rampsmooth_tilde_02_increment = (x[(Index)i] - __rampsmooth_tilde_02_prev) / _up;
                } else if (x[(Index)i] < __rampsmooth_tilde_02_prev) {
                    number _down = down;
    
                    if (_down < 1)
                        _down = 1;
    
                    __rampsmooth_tilde_02_index = _down;
                    __rampsmooth_tilde_02_increment = (x[(Index)i] - __rampsmooth_tilde_02_prev) / _down;
                }
            }
    
            if (__rampsmooth_tilde_02_index > 0) {
                __rampsmooth_tilde_02_prev += __rampsmooth_tilde_02_increment;
                __rampsmooth_tilde_02_index -= 1;
            } else {
                __rampsmooth_tilde_02_prev = x[(Index)i];
            }
    
            out1[(Index)i] = __rampsmooth_tilde_02_prev;
        }
    
        this->rampsmooth_tilde_02_prev = __rampsmooth_tilde_02_prev;
        this->rampsmooth_tilde_02_index = __rampsmooth_tilde_02_index;
        this->rampsmooth_tilde_02_increment = __rampsmooth_tilde_02_increment;
    }
    
    void linetilde_08_perform(SampleValue * out, Index n) {
        auto __linetilde_08_time = this->linetilde_08_time;
        auto __linetilde_08_keepramp = this->linetilde_08_keepramp;
        auto __linetilde_08_currentValue = this->linetilde_08_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_08_activeRamps->length)) {
            while ((bool)(this->linetilde_08_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_08_activeRamps[0];
                number inc = this->linetilde_08_activeRamps[1];
                number rampTimeInSamples = this->linetilde_08_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_08_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_08_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_08_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -62043057,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_08_keepramp))) {
                            __linetilde_08_time = 0;
                        }
                    }
                }
    
                __linetilde_08_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_08_currentValue;
            i++;
        }
    
        this->linetilde_08_currentValue = __linetilde_08_currentValue;
        this->linetilde_08_time = __linetilde_08_time;
    }
    
    void linetilde_09_perform(SampleValue * out, Index n) {
        auto __linetilde_09_time = this->linetilde_09_time;
        auto __linetilde_09_keepramp = this->linetilde_09_keepramp;
        auto __linetilde_09_currentValue = this->linetilde_09_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_09_activeRamps->length)) {
            while ((bool)(this->linetilde_09_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_09_activeRamps[0];
                number inc = this->linetilde_09_activeRamps[1];
                number rampTimeInSamples = this->linetilde_09_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_09_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_09_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_09_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -1621164530,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_09_keepramp))) {
                            __linetilde_09_time = 0;
                        }
                    }
                }
    
                __linetilde_09_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_09_currentValue;
            i++;
        }
    
        this->linetilde_09_currentValue = __linetilde_09_currentValue;
        this->linetilde_09_time = __linetilde_09_time;
    }
    
    void dspexpr_46_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void expr_26_out1_set(number v) {
        this->expr_26_out1 = v;
        this->numberobj_49_value_set(this->expr_26_out1);
    }
    
    void expr_26_in1_set(number in1) {
        this->expr_26_in1 = in1;
    
        this->expr_26_out1_set(
            (this->expr_26_in1 <= 0 ? -999 : 20 * rnbo_log10((this->expr_26_in1 <= 0.0000000001 ? 0.0000000001 : this->expr_26_in1)))
        );//#map:Gate/atodb_obj-74:1
    }
    
    void numbertilde_10_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_10_currentIntervalInSamples = this->numbertilde_10_currentIntervalInSamples;
        auto __numbertilde_10_lastValue = this->numbertilde_10_lastValue;
        auto __numbertilde_10_currentInterval = this->numbertilde_10_currentInterval;
        auto __numbertilde_10_rampInSamples = this->numbertilde_10_rampInSamples;
        auto __numbertilde_10_outValue = this->numbertilde_10_outValue;
        auto __numbertilde_10_currentMode = this->numbertilde_10_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_10_currentMode == 0) {
                output[(Index)i] = this->numbertilde_10_smooth_next(
                    __numbertilde_10_outValue,
                    __numbertilde_10_rampInSamples,
                    __numbertilde_10_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_10_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_10_lastValue && __numbertilde_10_currentInterval <= 0) {
            __numbertilde_10_currentInterval = __numbertilde_10_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_10_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Gate/number~_obj-70"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_10_currentInterval = __numbertilde_10_currentInterval;
        this->numbertilde_10_lastValue = __numbertilde_10_lastValue;
    }
    
    void dspexpr_45_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] - in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_42_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] - in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_41_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = (in2[(Index)i] == 0 ? 0 : (in2[(Index)i] == 0. ? 0. : in1[(Index)i] / in2[(Index)i]));//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_40_perform(const Sample * in1, number in2, number in3, SampleValue * out1, Index n) {
        RNBO_UNUSED(in3);
        RNBO_UNUSED(in2);
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = (in1[(Index)i] > 1 ? 1 : (in1[(Index)i] < 0 ? 0 : in1[(Index)i]));//#map:_###_obj_###_:1
        }
    }
    
    void expr_23_out1_set(number v) {
        this->expr_23_out1 = v;
        this->numberobj_45_value_set(this->expr_23_out1);
    }
    
    void expr_23_in1_set(number in1) {
        this->expr_23_in1 = in1;
    
        this->expr_23_out1_set(
            (this->expr_23_in1 <= 0 ? -999 : 20 * rnbo_log10((this->expr_23_in1 <= 0.0000000001 ? 0.0000000001 : this->expr_23_in1)))
        );//#map:Gate/atodb_obj-97:1
    }
    
    void numbertilde_09_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_09_currentIntervalInSamples = this->numbertilde_09_currentIntervalInSamples;
        auto __numbertilde_09_lastValue = this->numbertilde_09_lastValue;
        auto __numbertilde_09_currentInterval = this->numbertilde_09_currentInterval;
        auto __numbertilde_09_rampInSamples = this->numbertilde_09_rampInSamples;
        auto __numbertilde_09_outValue = this->numbertilde_09_outValue;
        auto __numbertilde_09_currentMode = this->numbertilde_09_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_09_currentMode == 0) {
                output[(Index)i] = this->numbertilde_09_smooth_next(
                    __numbertilde_09_outValue,
                    __numbertilde_09_rampInSamples,
                    __numbertilde_09_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_09_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_09_lastValue && __numbertilde_09_currentInterval <= 0) {
            __numbertilde_09_currentInterval = __numbertilde_09_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                2098551528,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_09_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Gate/number~_obj-51"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_09_currentInterval = __numbertilde_09_currentInterval;
        this->numbertilde_09_lastValue = __numbertilde_09_lastValue;
    }
    
    void dspexpr_39_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_38_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_45_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_45_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_45_value = localvalue;
    }
    
    void numberobj_46_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_46_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_46_value = localvalue;
    }
    
    void numberobj_47_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_47_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_47_value = localvalue;
    }
    
    void numberobj_48_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_48_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_48_value = localvalue;
    }
    
    void numberobj_49_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_49_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_49_value = localvalue;
    }
    
    void numberobj_50_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_50_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_50_value = localvalue;
    }
    
    void numberobj_51_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_51_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_51_value = localvalue;
    }
    
    void numberobj_52_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_52_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_52_value = localvalue;
    }
    
    number numbertilde_09_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_09_smooth_d_prev);
        this->numbertilde_09_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_09_smooth_d_dspsetup() {
        this->numbertilde_09_smooth_d_reset();
    }
    
    void numbertilde_09_smooth_d_reset() {
        this->numbertilde_09_smooth_d_prev = 0;
    }
    
    number numbertilde_09_smooth_next(number x, number up, number down) {
        if (this->numbertilde_09_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_09_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_09_smooth_index = _up;
                this->numbertilde_09_smooth_increment = (x - this->numbertilde_09_smooth_prev) / _up;
            } else if (x < this->numbertilde_09_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_09_smooth_index = _down;
                this->numbertilde_09_smooth_increment = (x - this->numbertilde_09_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_09_smooth_index > 0) {
            this->numbertilde_09_smooth_prev += this->numbertilde_09_smooth_increment;
            this->numbertilde_09_smooth_index -= 1;
        } else {
            this->numbertilde_09_smooth_prev = x;
        }
    
        return this->numbertilde_09_smooth_prev;
    }
    
    void numbertilde_09_smooth_reset() {
        this->numbertilde_09_smooth_prev = 0;
        this->numbertilde_09_smooth_index = 0;
        this->numbertilde_09_smooth_increment = 0;
        this->numbertilde_09_smooth_d_reset();
    }
    
    void numbertilde_09_init() {
        this->numbertilde_09_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Gate/number~_obj-51"), 1, this->_currentTime);
    }
    
    void numbertilde_09_dspsetup(bool force) {
        if ((bool)(this->numbertilde_09_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_09_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_09_currentInterval = this->numbertilde_09_currentIntervalInSamples;
        this->numbertilde_09_rampInSamples = this->mstosamps(this->numbertilde_09_ramp);
        this->numbertilde_09_setupDone = true;
        this->numbertilde_09_smooth_d_dspsetup();
    }
    
    number rampsmooth_tilde_02_d_next(number x) {
        number temp = (number)(x - this->rampsmooth_tilde_02_d_prev);
        this->rampsmooth_tilde_02_d_prev = x;
        return temp;
    }
    
    void rampsmooth_tilde_02_d_dspsetup() {
        this->rampsmooth_tilde_02_d_reset();
    }
    
    void rampsmooth_tilde_02_d_reset() {
        this->rampsmooth_tilde_02_d_prev = 0;
    }
    
    void rampsmooth_tilde_02_dspsetup(bool force) {
        if ((bool)(this->rampsmooth_tilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->rampsmooth_tilde_02_setupDone = true;
        this->rampsmooth_tilde_02_d_dspsetup();
    }
    
    void numberobj_45_init() {
        this->numberobj_45_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Gate/number_obj-99"), 1, this->_currentTime);
    }
    
    void numberobj_45_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_45_value;
    }
    
    void numberobj_45_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_45_value_set(preset["value"]);
    }
    
    void param_07_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_07_value;
    }
    
    void param_07_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_07_value_set(preset["value"]);
    }
    
    void numberobj_46_init() {
        this->numberobj_46_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Gate/number_obj-53"), 1, this->_currentTime);
    }
    
    void numberobj_46_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_46_value;
    }
    
    void numberobj_46_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_46_value_set(preset["value"]);
    }
    
    number numbertilde_10_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_10_smooth_d_prev);
        this->numbertilde_10_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_10_smooth_d_dspsetup() {
        this->numbertilde_10_smooth_d_reset();
    }
    
    void numbertilde_10_smooth_d_reset() {
        this->numbertilde_10_smooth_d_prev = 0;
    }
    
    number numbertilde_10_smooth_next(number x, number up, number down) {
        if (this->numbertilde_10_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_10_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_10_smooth_index = _up;
                this->numbertilde_10_smooth_increment = (x - this->numbertilde_10_smooth_prev) / _up;
            } else if (x < this->numbertilde_10_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_10_smooth_index = _down;
                this->numbertilde_10_smooth_increment = (x - this->numbertilde_10_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_10_smooth_index > 0) {
            this->numbertilde_10_smooth_prev += this->numbertilde_10_smooth_increment;
            this->numbertilde_10_smooth_index -= 1;
        } else {
            this->numbertilde_10_smooth_prev = x;
        }
    
        return this->numbertilde_10_smooth_prev;
    }
    
    void numbertilde_10_smooth_reset() {
        this->numbertilde_10_smooth_prev = 0;
        this->numbertilde_10_smooth_index = 0;
        this->numbertilde_10_smooth_increment = 0;
        this->numbertilde_10_smooth_d_reset();
    }
    
    void numbertilde_10_init() {
        this->numbertilde_10_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Gate/number~_obj-70"), 1, this->_currentTime);
    }
    
    void numbertilde_10_dspsetup(bool force) {
        if ((bool)(this->numbertilde_10_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_10_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_10_currentInterval = this->numbertilde_10_currentIntervalInSamples;
        this->numbertilde_10_rampInSamples = this->mstosamps(this->numbertilde_10_ramp);
        this->numbertilde_10_setupDone = true;
        this->numbertilde_10_smooth_d_dspsetup();
    }
    
    void numberobj_47_init() {
        this->numberobj_47_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Gate/number_obj-6"), 1, this->_currentTime);
    }
    
    void numberobj_47_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_47_value;
    }
    
    void numberobj_47_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_47_value_set(preset["value"]);
    }
    
    void numberobj_48_init() {
        this->numberobj_48_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Gate/number_obj-31"), 1, this->_currentTime);
    }
    
    void numberobj_48_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_48_value;
    }
    
    void numberobj_48_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_48_value_set(preset["value"]);
    }
    
    void numberobj_49_init() {
        this->numberobj_49_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Gate/number_obj-73"), 1, this->_currentTime);
    }
    
    void numberobj_49_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_49_value;
    }
    
    void numberobj_49_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_49_value_set(preset["value"]);
    }
    
    void numberobj_50_init() {
        this->numberobj_50_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Gate/number_obj-67"), 1, this->_currentTime);
    }
    
    void numberobj_50_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_50_value;
    }
    
    void numberobj_50_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_50_value_set(preset["value"]);
    }
    
    void numberobj_51_init() {
        this->numberobj_51_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Gate/number_obj-30"), 1, this->_currentTime);
    }
    
    void numberobj_51_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_51_value;
    }
    
    void numberobj_51_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_51_value_set(preset["value"]);
    }
    
    void numberobj_52_init() {
        this->numberobj_52_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Gate/number_obj-32"), 1, this->_currentTime);
    }
    
    void numberobj_52_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_52_value;
    }
    
    void numberobj_52_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_52_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        dspexpr_38_in1 = 0;
        dspexpr_38_in2 = 0;
        dspexpr_39_in1 = 0;
        dspexpr_39_in2 = 0;
        numbertilde_09_input_number = 0;
        numbertilde_09_ramp = 0;
        dspexpr_40_in1 = 0;
        dspexpr_40_in2 = 0;
        dspexpr_40_in3 = 1;
        dspexpr_41_in1 = 0;
        dspexpr_41_in2 = 0;
        dspexpr_42_in1 = 0;
        dspexpr_42_in2 = 0;
        rampsmooth_tilde_02_x = 0;
        rampsmooth_tilde_02_up = 0;
        rampsmooth_tilde_02_down = 0;
        maximum_tilde_01_x = 0;
        maximum_tilde_01_y = 0;
        dspexpr_43_in1 = 0;
        numberobj_45_value = 0;
        numberobj_45_value_setter(numberobj_45_value);
        expr_23_in1 = 0;
        expr_23_out1 = 0;
        dspexpr_44_in1 = 0;
        linetilde_08_time = 10;
        linetilde_08_keepramp = 1;
        param_07_value = -100;
        numberobj_46_value = 0;
        numberobj_46_value_setter(numberobj_46_value);
        expr_25_in1 = 0;
        expr_25_out1 = 0;
        dspexpr_45_in1 = 0;
        dspexpr_45_in2 = 0;
        floatnum_02_input_number = 0;
        floatnum_02_value = 0;
        numbertilde_10_input_number = 0;
        numbertilde_10_ramp = 0;
        numberobj_47_value = 0;
        numberobj_47_value_setter(numberobj_47_value);
        dspexpr_46_in1 = 0;
        dspexpr_46_in2 = 0;
        numberobj_48_value = 0;
        numberobj_48_value_setter(numberobj_48_value);
        mstosamps_05_ms = 0;
        numberobj_49_value = 0;
        numberobj_49_value_setter(numberobj_49_value);
        expr_26_in1 = 0;
        expr_26_out1 = 0;
        numberobj_50_value = 0;
        numberobj_50_value_setter(numberobj_50_value);
        expr_27_in1 = 0;
        expr_27_out1 = 0;
        linetilde_09_time = 10;
        linetilde_09_keepramp = 1;
        floatnum_03_input_number = 0;
        floatnum_03_value = 0;
        numberobj_51_value = 0;
        numberobj_51_value_setter(numberobj_51_value);
        numberobj_52_value = 0;
        numberobj_52_value_setter(numberobj_52_value);
        mstosamps_06_ms = 0;
        floatnum_04_input_number = 0;
        floatnum_04_value = 0;
        ctlin_04_input = 0;
        ctlin_04_controller = 1;
        ctlin_04_channel = -1;
        expr_24_in1 = 0;
        expr_24_in2 = 0.007874015748;
        expr_24_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numbertilde_09_currentInterval = 0;
        numbertilde_09_currentIntervalInSamples = 0;
        numbertilde_09_lastValue = 0;
        numbertilde_09_outValue = 0;
        numbertilde_09_rampInSamples = 0;
        numbertilde_09_currentMode = 0;
        numbertilde_09_smooth_d_prev = 0;
        numbertilde_09_smooth_prev = 0;
        numbertilde_09_smooth_index = 0;
        numbertilde_09_smooth_increment = 0;
        numbertilde_09_setupDone = false;
        rampsmooth_tilde_02_prev = 0;
        rampsmooth_tilde_02_index = 0;
        rampsmooth_tilde_02_increment = 0;
        rampsmooth_tilde_02_d_prev = 0;
        rampsmooth_tilde_02_setupDone = false;
        numberobj_45_currentFormat = 6;
        numberobj_45_lastValue = 0;
        linetilde_08_currentValue = 0;
        param_07_lastValue = 0;
        numberobj_46_currentFormat = 6;
        numberobj_46_lastValue = 0;
        floatnum_02_stored = 1;
        numbertilde_10_currentInterval = 0;
        numbertilde_10_currentIntervalInSamples = 0;
        numbertilde_10_lastValue = 0;
        numbertilde_10_outValue = 0;
        numbertilde_10_rampInSamples = 0;
        numbertilde_10_currentMode = 0;
        numbertilde_10_smooth_d_prev = 0;
        numbertilde_10_smooth_prev = 0;
        numbertilde_10_smooth_index = 0;
        numbertilde_10_smooth_increment = 0;
        numbertilde_10_setupDone = false;
        numberobj_47_currentFormat = 6;
        numberobj_47_lastValue = 0;
        numberobj_48_currentFormat = 6;
        numberobj_48_lastValue = 0;
        numberobj_49_currentFormat = 6;
        numberobj_49_lastValue = 0;
        numberobj_50_currentFormat = 6;
        numberobj_50_lastValue = 0;
        linetilde_09_currentValue = 0;
        floatnum_03_stored = 300;
        numberobj_51_currentFormat = 6;
        numberobj_51_lastValue = 0;
        numberobj_52_currentFormat = 6;
        numberobj_52_lastValue = 0;
        floatnum_04_stored = -3;
        ctlin_04_status = 0;
        ctlin_04_byte1 = -1;
        ctlin_04_inchan = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number dspexpr_38_in1;
        number dspexpr_38_in2;
        number dspexpr_39_in1;
        number dspexpr_39_in2;
        number numbertilde_09_input_number;
        number numbertilde_09_ramp;
        number dspexpr_40_in1;
        number dspexpr_40_in2;
        number dspexpr_40_in3;
        number dspexpr_41_in1;
        number dspexpr_41_in2;
        number dspexpr_42_in1;
        number dspexpr_42_in2;
        number rampsmooth_tilde_02_x;
        number rampsmooth_tilde_02_up;
        number rampsmooth_tilde_02_down;
        number maximum_tilde_01_x;
        number maximum_tilde_01_y;
        number dspexpr_43_in1;
        number numberobj_45_value;
        number expr_23_in1;
        number expr_23_out1;
        number dspexpr_44_in1;
        list linetilde_08_segments;
        number linetilde_08_time;
        number linetilde_08_keepramp;
        number param_07_value;
        number numberobj_46_value;
        number expr_25_in1;
        number expr_25_out1;
        number dspexpr_45_in1;
        number dspexpr_45_in2;
        number floatnum_02_input_number;
        number floatnum_02_value;
        number numbertilde_10_input_number;
        number numbertilde_10_ramp;
        number numberobj_47_value;
        number dspexpr_46_in1;
        number dspexpr_46_in2;
        number numberobj_48_value;
        number mstosamps_05_ms;
        number numberobj_49_value;
        number expr_26_in1;
        number expr_26_out1;
        number numberobj_50_value;
        number expr_27_in1;
        number expr_27_out1;
        list linetilde_09_segments;
        number linetilde_09_time;
        number linetilde_09_keepramp;
        number floatnum_03_input_number;
        number floatnum_03_value;
        number numberobj_51_value;
        number numberobj_52_value;
        number mstosamps_06_ms;
        number floatnum_04_input_number;
        number floatnum_04_value;
        number ctlin_04_input;
        number ctlin_04_controller;
        number ctlin_04_channel;
        number expr_24_in1;
        number expr_24_in2;
        number expr_24_out1;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        SampleIndex numbertilde_09_currentInterval;
        SampleIndex numbertilde_09_currentIntervalInSamples;
        number numbertilde_09_lastValue;
        number numbertilde_09_outValue;
        number numbertilde_09_rampInSamples;
        Int numbertilde_09_currentMode;
        number numbertilde_09_smooth_d_prev;
        number numbertilde_09_smooth_prev;
        number numbertilde_09_smooth_index;
        number numbertilde_09_smooth_increment;
        bool numbertilde_09_setupDone;
        number rampsmooth_tilde_02_prev;
        number rampsmooth_tilde_02_index;
        number rampsmooth_tilde_02_increment;
        number rampsmooth_tilde_02_d_prev;
        bool rampsmooth_tilde_02_setupDone;
        Int numberobj_45_currentFormat;
        number numberobj_45_lastValue;
        list linetilde_08_activeRamps;
        number linetilde_08_currentValue;
        number param_07_lastValue;
        Int numberobj_46_currentFormat;
        number numberobj_46_lastValue;
        number floatnum_02_stored;
        SampleIndex numbertilde_10_currentInterval;
        SampleIndex numbertilde_10_currentIntervalInSamples;
        number numbertilde_10_lastValue;
        number numbertilde_10_outValue;
        number numbertilde_10_rampInSamples;
        Int numbertilde_10_currentMode;
        number numbertilde_10_smooth_d_prev;
        number numbertilde_10_smooth_prev;
        number numbertilde_10_smooth_index;
        number numbertilde_10_smooth_increment;
        bool numbertilde_10_setupDone;
        Int numberobj_47_currentFormat;
        number numberobj_47_lastValue;
        Int numberobj_48_currentFormat;
        number numberobj_48_lastValue;
        Int numberobj_49_currentFormat;
        number numberobj_49_lastValue;
        Int numberobj_50_currentFormat;
        number numberobj_50_lastValue;
        list linetilde_09_activeRamps;
        number linetilde_09_currentValue;
        number floatnum_03_stored;
        Int numberobj_51_currentFormat;
        number numberobj_51_lastValue;
        Int numberobj_52_currentFormat;
        number numberobj_52_lastValue;
        number floatnum_04_stored;
        int ctlin_04_status;
        int ctlin_04_byte1;
        int ctlin_04_inchan;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_64 : public PatcherInterfaceImpl {
    
    friend class RnboBubble;
    
    public:
    
    class RNBOSubpatcher_55 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_64;
            friend class RnboBubble;
            
            public:
            
            RNBOSubpatcher_55()
            {
            }
            
            ~RNBOSubpatcher_55()
            {
            }
            
            virtual RNBOSubpatcher_64* getPatcher() const {
                return static_cast<RNBOSubpatcher_64 *>(_parentPatcher);
            }
            
            RnboBubble* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 1646922831, false);
                getEngine()->flushClockEvents(this, -444440180, false);
                getEngine()->flushClockEvents(this, 1114681293, false);
                getEngine()->flushClockEvents(this, -1621164530, false);
                getEngine()->flushClockEvents(this, -62043057, false);
                getEngine()->flushClockEvents(this, -1494586265, false);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            ParameterValue fromnormalized(ParameterIndex index, ParameterValue normalizedValue) {
                return this->convertFromNormalizedParameterValue(index, normalizedValue);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            MillisecondTime currenttime() {
                return this->_currentTime;
            }
            
            number tempo() {
                return this->getTopLevelPatcher()->globaltransport_getTempo(this->currenttime());
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->linetilde_10_perform(this->signals[0], n);
                this->linetilde_11_perform(this->signals[1], n);
                this->linetilde_12_perform(this->signals[2], n);
                this->linetilde_13_perform(this->signals[3], n);
            
                this->selector_01_perform(
                    this->selector_01_onoff,
                    this->signals[0],
                    this->signals[1],
                    this->signals[2],
                    this->signals[3],
                    this->signals[4],
                    n
                );
            
                this->snapshot_01_perform(this->signals[4], n);
                this->numbertilde_11_perform(this->signals[4], this->dummyBuffer, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 5; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->numbertilde_11_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                this->updateTime(time);
                this->tempo_01_onTempoChanged(tempo);
            }
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void processBBUEvent(MillisecondTime , number , number , number ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& preset) {
                this->param_08_getPresetValue(getSubState(preset, "quant"));
                this->param_09_getPresetValue(getSubState(preset, "TimeInMS"));
                this->param_10_getPresetValue(getSubState(preset, "TimeInBeats"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                this->updateTime(time);
            
                switch (index) {
                case 0:
                    {
                    this->param_08_value_set(v);
                    break;
                    }
                case 1:
                    {
                    this->param_09_value_set(v);
                    break;
                    }
                case 2:
                    {
                    this->param_10_value_set(v);
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                case 0:
                    {
                    return this->param_08_value;
                    }
                case 1:
                    {
                    return this->param_09_value;
                    }
                case 2:
                    {
                    return this->param_10_value;
                    }
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 3;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "quant";
                    }
                case 1:
                    {
                    return "TimeInMS";
                    }
                case 2:
                    {
                    return "TimeInBeats";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "DelayTime/Quant/quant";
                    }
                case 1:
                    {
                    return "DelayTime/Quant/TimeInMS";
                    }
                case 2:
                    {
                    return "DelayTime/Quant/TimeInBeats";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    case 0:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 1;
                        info->min = 0;
                        info->max = 3;
                        info->exponent = 1;
                        info->steps = 4;
                        static const char * eVal0[] = {"free", "beat", "triplet", "dotted"};
                        info->enumValues = eVal0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 1:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 500;
                        info->min = 0;
                        info->max = 3000;
                        info->exponent = 1;
                        info->steps = 0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "Time";
                        info->unit = "ms";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    case 2:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 3;
                        info->min = 0;
                        info->max = 4;
                        info->exponent = 1;
                        info->steps = 5;
                        static const char * eVal2[] = {"1/8", "1/4", "1/2", "1x", "2x"};
                        info->enumValues = eVal2;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "Note";
                        info->unit = "beats";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 3 ? 3 : value));
                        ParameterValue normalizedValue = (value - 0) / (3 - 0);
            
                        {
                            normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 4);
                        }
            
                        return normalizedValue;
                    }
                    }
                case 2:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 4 ? 4 : value));
                        ParameterValue normalizedValue = (value - 0) / (4 - 0);
            
                        {
                            normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 5);
                        }
            
                        return normalizedValue;
                    }
                    }
                case 1:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 3000 ? 3000 : value));
                        ParameterValue normalizedValue = (value - 0) / (3000 - 0);
                        return normalizedValue;
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                case 0:
                    {
                    {
                        {
                            value = this->applyStepsToNormalizedParameterValue(value, 4);
                        }
            
                        {
                            return 0 + value * (3 - 0);
                        }
                    }
                    }
                case 2:
                    {
                    {
                        {
                            value = this->applyStepsToNormalizedParameterValue(value, 5);
                        }
            
                        {
                            return 0 + value * (4 - 0);
                        }
                    }
                    }
                case 1:
                    {
                    {
                        {
                            return 0 + value * (3000 - 0);
                        }
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                    {
                    return this->param_08_value_constrain(value);
                    }
                case 1:
                    {
                    return this->param_09_value_constrain(value);
                    }
                case 2:
                    {
                    return this->param_10_value_constrain(value);
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 1646922831:
                    {
                    this->snapshot_01_out_set(value);
                    break;
                    }
                case -444440180:
                    {
                    this->linetilde_10_target_bang();
                    break;
                    }
                case 1114681293:
                    {
                    this->linetilde_11_target_bang();
                    break;
                    }
                case -1621164530:
                    {
                    this->linetilde_12_target_bang();
                    break;
                    }
                case -62043057:
                    {
                    this->linetilde_13_target_bang();
                    break;
                    }
                case -1494586265:
                    {
                    this->numbertilde_11_value_set(value);
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("DelayTime/Quant/message_obj-18") == objectId)
                        this->message_07_listin_number_set(payload);
            
                    break;
                    }
                case TAG("sig"):
                    {
                    if (TAG("DelayTime/Quant/number~_obj-22") == objectId)
                        this->numbertilde_11_sig_number_set(payload);
            
                    break;
                    }
                case TAG("mode"):
                    {
                    if (TAG("DelayTime/Quant/number~_obj-22") == objectId)
                        this->numbertilde_11_mode_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("DelayTime/Quant/message_obj-18") == objectId)
                        this->message_07_listin_list_set(payload);
            
                    break;
                    }
                case TAG("sig"):
                    {
                    if (TAG("DelayTime/Quant/number~_obj-22") == objectId)
                        this->numbertilde_11_sig_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("DelayTime/Quant/message_obj-18") == objectId)
                        this->message_07_listin_bang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("DelayTime/Quant/button_obj-23") == objectId)
                        this->button_05_bangin_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("DelayTime/Quant/message_obj-18"):
                    {
                    return "DelayTime/Quant/message_obj-18";
                    }
                case TAG("monitor"):
                    {
                    return "monitor";
                    }
                case TAG("DelayTime/Quant/number~_obj-22"):
                    {
                    return "DelayTime/Quant/number~_obj-22";
                    }
                case TAG("assign"):
                    {
                    return "assign";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("DelayTime/Quant/button_obj-23"):
                    {
                    return "DelayTime/Quant/button_obj-23";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("sig"):
                    {
                    return "sig";
                    }
                case TAG("mode"):
                    {
                    return "mode";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void param_08_value_set(number v) {
                v = this->param_08_value_constrain(v);
                this->param_08_value = v;
                this->sendParameter(0, false);
            
                if (this->param_08_value != this->param_08_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_08_lastValue = this->param_08_value;
                }
            
                this->expr_28_in1_set(v);
            }
            
            void param_09_value_set(number v) {
                v = this->param_09_value_constrain(v);
                this->param_09_value = v;
                this->sendParameter(1, false);
            
                if (this->param_09_value != this->param_09_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_09_lastValue = this->param_09_value;
                }
            
                {
                    list converted = {v};
                    this->linetilde_10_segments_set(converted);
                }
            }
            
            void param_10_value_set(number v) {
                v = this->param_10_value_constrain(v);
                this->param_10_value = v;
                this->sendParameter(2, false);
            
                if (this->param_10_value != this->param_10_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_10_lastValue = this->param_10_value;
                }
            
                {
                    list converted = {v};
                    this->listlookup_03_input_set(converted);
                }
            }
            
            void snapshot_01_out_set(number v) {
                this->snapshot_01_out = v;
                this->trigger_04_input_number_set(v);
            }
            
            void message_07_listin_list_set(const list& v) {
                this->message_07_set_set(v);
            }
            
            void message_07_listin_number_set(number v) {
                this->message_07_set_set(v);
            }
            
            void message_07_listin_bang_bang() {
                this->message_07_trigger_bang();
            }
            
            void numbertilde_11_sig_number_set(number v) {
                this->numbertilde_11_outValue = v;
            }
            
            void numbertilde_11_sig_list_set(const list& v) {
                this->numbertilde_11_outValue = v[0];
            }
            
            void numbertilde_11_mode_set(number v) {
                if (v == 1) {
                    this->numbertilde_11_currentMode = 0;
                } else if (v == 2) {
                    this->numbertilde_11_currentMode = 1;
                }
            }
            
            void button_05_bangin_bang() {
                this->button_05_bangval_bang();
            }
            
            void linetilde_10_target_bang() {}
            
            void linetilde_11_target_bang() {}
            
            void linetilde_12_target_bang() {}
            
            void linetilde_13_target_bang() {}
            
            void numbertilde_11_value_set(number v) {
                this->eventoutlet_05_in1_number_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->message_07_init();
                this->numbertilde_11_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
            
                {
                    this->scheduleParamInit(0, 0);
                }
            
                {
                    this->scheduleParamInit(1, 0);
                }
            
                {
                    this->scheduleParamInit(2, 0);
                }
            }
            
            void allocateDataRefs() {}
            
            number param_08_value_constrain(number v) const {
                v = (v > 3 ? 3 : (v < 0 ? 0 : v));
            
                {
                    number oneStep = (number)3 / (number)3;
                    number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
                    number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
                    v = numberOfSteps * oneStep;
                }
            
                return v;
            }
            
            void selector_01_onoff_set(number v) {
                this->selector_01_onoff = v;
            }
            
            void expr_28_out1_set(number v) {
                this->expr_28_out1 = v;
                this->selector_01_onoff_set(this->expr_28_out1);
            }
            
            void expr_28_in1_set(number in1) {
                this->expr_28_in1 = in1;
                this->expr_28_out1_set(this->expr_28_in1 + this->expr_28_in2);//#map:DelayTime/Quant/+_obj-103:1
            }
            
            number param_09_value_constrain(number v) const {
                v = (v > 3000 ? 3000 : (v < 0 ? 0 : v));
                return v;
            }
            
            void linetilde_10_time_set(number v) {
                this->linetilde_10_time = v;
            }
            
            void linetilde_10_segments_set(const list& v) {
                this->linetilde_10_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_10_time == 0) {
                        this->linetilde_10_activeRamps->length = 0;
                        this->linetilde_10_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_10_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_10_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_10_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_10_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_10_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_10_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_10_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_10_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_10_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_10_activeRamps->push(lastRampValue);
                            this->linetilde_10_activeRamps->push(0);
                            this->linetilde_10_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_10_keepramp)) {
                                    this->linetilde_10_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_10_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_10_activeRamps->push(destinationValue);
                            this->linetilde_10_activeRamps->push(inc);
                            this->linetilde_10_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            number param_10_value_constrain(number v) const {
                v = (v > 4 ? 4 : (v < 0 ? 0 : v));
            
                {
                    number oneStep = (number)4 / (number)4;
                    number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
                    number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
                    v = numberOfSteps * oneStep;
                }
            
                return v;
            }
            
            void linetilde_13_time_set(number v) {
                this->linetilde_13_time = v;
            }
            
            void linetilde_13_segments_set(const list& v) {
                this->linetilde_13_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_13_time == 0) {
                        this->linetilde_13_activeRamps->length = 0;
                        this->linetilde_13_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_13_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_13_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_13_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_13_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_13_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_13_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_13_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_13_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_13_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_13_activeRamps->push(lastRampValue);
                            this->linetilde_13_activeRamps->push(0);
                            this->linetilde_13_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_13_keepramp)) {
                                    this->linetilde_13_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_13_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_13_activeRamps->push(destinationValue);
                            this->linetilde_13_activeRamps->push(inc);
                            this->linetilde_13_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void expr_30_out1_set(number v) {
                this->expr_30_out1 = v;
            
                {
                    list converted = {this->expr_30_out1};
                    this->linetilde_13_segments_set(converted);
                }
            }
            
            void expr_30_in1_set(number in1) {
                this->expr_30_in1 = in1;
                this->expr_30_out1_set(this->expr_30_in1 * this->expr_30_in2);//#map:DelayTime/Quant/*_obj-16:1
            }
            
            void linetilde_12_time_set(number v) {
                this->linetilde_12_time = v;
            }
            
            void linetilde_12_segments_set(const list& v) {
                this->linetilde_12_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_12_time == 0) {
                        this->linetilde_12_activeRamps->length = 0;
                        this->linetilde_12_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_12_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_12_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_12_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_12_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_12_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_12_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_12_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_12_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_12_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_12_activeRamps->push(lastRampValue);
                            this->linetilde_12_activeRamps->push(0);
                            this->linetilde_12_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_12_keepramp)) {
                                    this->linetilde_12_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_12_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_12_activeRamps->push(destinationValue);
                            this->linetilde_12_activeRamps->push(inc);
                            this->linetilde_12_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void expr_29_out1_set(number v) {
                this->expr_29_out1 = v;
            
                {
                    list converted = {this->expr_29_out1};
                    this->linetilde_12_segments_set(converted);
                }
            }
            
            void expr_29_in1_set(number in1) {
                this->expr_29_in1 = in1;
                this->expr_29_out1_set(this->expr_29_in1 * 4 / (number)3);//#map:DelayTime/Quant/expr_obj-15:1
            }
            
            void linetilde_11_time_set(number v) {
                this->linetilde_11_time = v;
            }
            
            void linetilde_11_segments_set(const list& v) {
                this->linetilde_11_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_11_time == 0) {
                        this->linetilde_11_activeRamps->length = 0;
                        this->linetilde_11_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_11_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_11_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_11_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_11_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_11_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_11_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_11_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_11_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_11_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_11_activeRamps->push(lastRampValue);
                            this->linetilde_11_activeRamps->push(0);
                            this->linetilde_11_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_11_keepramp)) {
                                    this->linetilde_11_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_11_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_11_activeRamps->push(destinationValue);
                            this->linetilde_11_activeRamps->push(inc);
                            this->linetilde_11_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void beatstoms_01_out1_set(number v) {
                this->expr_30_in1_set(v);
                this->expr_29_in1_set(v);
            
                {
                    list converted = {v};
                    this->linetilde_11_segments_set(converted);
                }
            }
            
            void beatstoms_01_beattime_set(number beattime) {
                this->beatstoms_01_beattime = beattime;
            
                {
                    this->beatstoms_01_out1_set(this->safediv(beattime * 60000, this->tempo()));
                    return;
                }
            }
            
            void listlookup_03_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->beatstoms_01_beattime_set(converted);
                }
            }
            
            void listlookup_03_input_set(const list& v) {
                this->listlookup_03_input = jsCreateListCopy(v);
                list tmp = list();
            
                for (Index i = 0; i < v->length; i++) {
                    long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
            
                    if (j >= 0 && (Index)(j) < this->listlookup_03_lookup->length)
                        tmp->push(this->listlookup_03_lookup[(Index)j]);
                }
            
                if ((bool)(tmp->length))
                    this->listlookup_03_out_set(tmp);
            }
            
            void message_07_set_set(const list& v) {
                this->message_07_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("DelayTime/Quant/message_obj-18"),
                    v,
                    this->_currentTime
                );
            }
            
            void trigger_04_out2_set(number v) {
                {
                    list converted = {v};
                    this->message_07_set_set(converted);
                }
            }
            
            void param_09_normalizedvalue_set(number v) {
                this->param_09_value_set(this->fromnormalized(1, v));
            }
            
            void message_07_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->param_09_normalizedvalue_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->param_09_value_set(converted);
                }
            }
            
            void message_07_trigger_bang() {
                this->message_07_out_set(this->message_07_set);
            }
            
            void trigger_04_out1_bang() {
                this->message_07_trigger_bang();
            }
            
            void trigger_04_input_number_set(number v) {
                this->trigger_04_out2_set(v);
                this->trigger_04_out1_bang();
            }
            
            void beatstoms_01_beattime_bang() {
                number beattime = this->beatstoms_01_beattime;
            
                {
                    this->beatstoms_01_out1_set(this->safediv(beattime * 60000, this->tempo()));
                    return;
                }
            }
            
            void button_05_output_bang() {
                this->beatstoms_01_beattime_bang();
            }
            
            void button_05_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("DelayTime/Quant/button_obj-23"), this->_currentTime);;
                this->button_05_output_bang();
            }
            
            void tempo_01_tempo_set(number v) {
                RNBO_UNUSED(v);
                this->button_05_bangval_bang();
            }
            
            void linetilde_10_perform(SampleValue * out, Index n) {
                auto __linetilde_10_time = this->linetilde_10_time;
                auto __linetilde_10_keepramp = this->linetilde_10_keepramp;
                auto __linetilde_10_currentValue = this->linetilde_10_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_10_activeRamps->length)) {
                    while ((bool)(this->linetilde_10_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_10_activeRamps[0];
                        number inc = this->linetilde_10_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_10_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_10_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_10_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_10_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -444440180,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_10_keepramp))) {
                                    __linetilde_10_time = 0;
                                }
                            }
                        }
            
                        __linetilde_10_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_10_currentValue;
                    i++;
                }
            
                this->linetilde_10_currentValue = __linetilde_10_currentValue;
                this->linetilde_10_time = __linetilde_10_time;
            }
            
            void linetilde_11_perform(SampleValue * out, Index n) {
                auto __linetilde_11_time = this->linetilde_11_time;
                auto __linetilde_11_keepramp = this->linetilde_11_keepramp;
                auto __linetilde_11_currentValue = this->linetilde_11_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_11_activeRamps->length)) {
                    while ((bool)(this->linetilde_11_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_11_activeRamps[0];
                        number inc = this->linetilde_11_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_11_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_11_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_11_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_11_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    1114681293,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_11_keepramp))) {
                                    __linetilde_11_time = 0;
                                }
                            }
                        }
            
                        __linetilde_11_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_11_currentValue;
                    i++;
                }
            
                this->linetilde_11_currentValue = __linetilde_11_currentValue;
                this->linetilde_11_time = __linetilde_11_time;
            }
            
            void linetilde_12_perform(SampleValue * out, Index n) {
                auto __linetilde_12_time = this->linetilde_12_time;
                auto __linetilde_12_keepramp = this->linetilde_12_keepramp;
                auto __linetilde_12_currentValue = this->linetilde_12_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_12_activeRamps->length)) {
                    while ((bool)(this->linetilde_12_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_12_activeRamps[0];
                        number inc = this->linetilde_12_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_12_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_12_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_12_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_12_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -1621164530,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_12_keepramp))) {
                                    __linetilde_12_time = 0;
                                }
                            }
                        }
            
                        __linetilde_12_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_12_currentValue;
                    i++;
                }
            
                this->linetilde_12_currentValue = __linetilde_12_currentValue;
                this->linetilde_12_time = __linetilde_12_time;
            }
            
            void linetilde_13_perform(SampleValue * out, Index n) {
                auto __linetilde_13_time = this->linetilde_13_time;
                auto __linetilde_13_keepramp = this->linetilde_13_keepramp;
                auto __linetilde_13_currentValue = this->linetilde_13_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_13_activeRamps->length)) {
                    while ((bool)(this->linetilde_13_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_13_activeRamps[0];
                        number inc = this->linetilde_13_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_13_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_13_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_13_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_13_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -62043057,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_13_keepramp))) {
                                    __linetilde_13_time = 0;
                                }
                            }
                        }
            
                        __linetilde_13_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_13_currentValue;
                    i++;
                }
            
                this->linetilde_13_currentValue = __linetilde_13_currentValue;
                this->linetilde_13_time = __linetilde_13_time;
            }
            
            void selector_01_perform(
                number onoff,
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (onoff >= 1 && onoff < 2)
                        out[(Index)i] = in1[(Index)i];
                    else if (onoff >= 2 && onoff < 3)
                        out[(Index)i] = in2[(Index)i];
                    else if (onoff >= 3 && onoff < 4)
                        out[(Index)i] = in3[(Index)i];
                    else if (onoff >= 4 && onoff < 5)
                        out[(Index)i] = in4[(Index)i];
                    else
                        out[(Index)i] = 0;
                }
            }
            
            void snapshot_01_perform(const SampleValue * input_signal, Index n) {
                auto __snapshot_01_lastValue = this->snapshot_01_lastValue;
                auto __snapshot_01_calc = this->snapshot_01_calc;
                auto __snapshot_01_count = this->snapshot_01_count;
                auto __snapshot_01_nextTime = this->snapshot_01_nextTime;
                auto __snapshot_01_interval = this->snapshot_01_interval;
                number timeInSamples = this->msToSamps(__snapshot_01_interval, this->sr);
            
                if (__snapshot_01_interval > 0) {
                    for (Index i = 0; i < n; i++) {
                        if (__snapshot_01_nextTime <= __snapshot_01_count + (SampleIndex)(i)) {
                            {
                                __snapshot_01_calc = input_signal[(Index)i];
                            }
            
                            this->getEngine()->scheduleClockEventWithValue(
                                this,
                                1646922831,
                                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                __snapshot_01_calc
                            );;
            
                            __snapshot_01_calc = 0;
                            __snapshot_01_nextTime += timeInSamples;
                        }
                    }
            
                    __snapshot_01_count += this->vs;
                }
            
                __snapshot_01_lastValue = input_signal[(Index)(n - 1)];
                this->snapshot_01_nextTime = __snapshot_01_nextTime;
                this->snapshot_01_count = __snapshot_01_count;
                this->snapshot_01_calc = __snapshot_01_calc;
                this->snapshot_01_lastValue = __snapshot_01_lastValue;
            }
            
            void eventoutlet_05_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out1_number_set(v);
            }
            
            void numbertilde_11_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
                auto __numbertilde_11_currentIntervalInSamples = this->numbertilde_11_currentIntervalInSamples;
                auto __numbertilde_11_lastValue = this->numbertilde_11_lastValue;
                auto __numbertilde_11_currentInterval = this->numbertilde_11_currentInterval;
                auto __numbertilde_11_rampInSamples = this->numbertilde_11_rampInSamples;
                auto __numbertilde_11_outValue = this->numbertilde_11_outValue;
                auto __numbertilde_11_currentMode = this->numbertilde_11_currentMode;
                number monitorvalue = input_signal[0];
            
                for (Index i = 0; i < n; i++) {
                    if (__numbertilde_11_currentMode == 0) {
                        output[(Index)i] = this->numbertilde_11_smooth_next(
                            __numbertilde_11_outValue,
                            __numbertilde_11_rampInSamples,
                            __numbertilde_11_rampInSamples
                        );
                    } else {
                        output[(Index)i] = input_signal[(Index)i];
                    }
                }
            
                __numbertilde_11_currentInterval -= n;
            
                if (monitorvalue != __numbertilde_11_lastValue && __numbertilde_11_currentInterval <= 0) {
                    __numbertilde_11_currentInterval = __numbertilde_11_currentIntervalInSamples;
            
                    this->getEngine()->scheduleClockEventWithValue(
                        this,
                        -1494586265,
                        this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                        monitorvalue
                    );;
            
                    __numbertilde_11_lastValue = monitorvalue;
            
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("DelayTime/Quant/number~_obj-22"),
                        {monitorvalue},
                        this->_currentTime
                    );;
                }
            
                this->numbertilde_11_currentInterval = __numbertilde_11_currentInterval;
                this->numbertilde_11_lastValue = __numbertilde_11_lastValue;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void message_07_init() {
                this->message_07_set_set({500});
            }
            
            void param_08_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_08_value;
            }
            
            void param_08_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_08_value_set(preset["value"]);
            }
            
            number numbertilde_11_smooth_d_next(number x) {
                number temp = (number)(x - this->numbertilde_11_smooth_d_prev);
                this->numbertilde_11_smooth_d_prev = x;
                return temp;
            }
            
            void numbertilde_11_smooth_d_dspsetup() {
                this->numbertilde_11_smooth_d_reset();
            }
            
            void numbertilde_11_smooth_d_reset() {
                this->numbertilde_11_smooth_d_prev = 0;
            }
            
            number numbertilde_11_smooth_next(number x, number up, number down) {
                if (this->numbertilde_11_smooth_d_next(x) != 0.) {
                    if (x > this->numbertilde_11_smooth_prev) {
                        number _up = up;
            
                        if (_up < 1)
                            _up = 1;
            
                        this->numbertilde_11_smooth_index = _up;
                        this->numbertilde_11_smooth_increment = (x - this->numbertilde_11_smooth_prev) / _up;
                    } else if (x < this->numbertilde_11_smooth_prev) {
                        number _down = down;
            
                        if (_down < 1)
                            _down = 1;
            
                        this->numbertilde_11_smooth_index = _down;
                        this->numbertilde_11_smooth_increment = (x - this->numbertilde_11_smooth_prev) / _down;
                    }
                }
            
                if (this->numbertilde_11_smooth_index > 0) {
                    this->numbertilde_11_smooth_prev += this->numbertilde_11_smooth_increment;
                    this->numbertilde_11_smooth_index -= 1;
                } else {
                    this->numbertilde_11_smooth_prev = x;
                }
            
                return this->numbertilde_11_smooth_prev;
            }
            
            void numbertilde_11_smooth_reset() {
                this->numbertilde_11_smooth_prev = 0;
                this->numbertilde_11_smooth_index = 0;
                this->numbertilde_11_smooth_increment = 0;
                this->numbertilde_11_smooth_d_reset();
            }
            
            void numbertilde_11_init() {
                this->numbertilde_11_currentMode = 1;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("DelayTime/Quant/number~_obj-22"), 1, this->_currentTime);
            }
            
            void numbertilde_11_dspsetup(bool force) {
                if ((bool)(this->numbertilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->numbertilde_11_currentIntervalInSamples = this->mstosamps(100);
                this->numbertilde_11_currentInterval = this->numbertilde_11_currentIntervalInSamples;
                this->numbertilde_11_rampInSamples = this->mstosamps(this->numbertilde_11_ramp);
                this->numbertilde_11_setupDone = true;
                this->numbertilde_11_smooth_d_dspsetup();
            }
            
            void param_09_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_09_value;
            }
            
            void param_09_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_09_value_set(preset["value"]);
            }
            
            void param_10_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_10_value;
            }
            
            void param_10_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_10_value_set(preset["value"]);
            }
            
            void tempo_01_onTempoChanged(number tempo) {
                this->tempo_01_tempo_set(tempo);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                snapshot_01_interval = 250;
                snapshot_01_out = 0;
                expr_28_in1 = 0;
                expr_28_in2 = 1;
                expr_28_out1 = 0;
                selector_01_onoff = 1;
                param_08_value = 1;
                numbertilde_11_input_number = 0;
                numbertilde_11_ramp = 0;
                linetilde_10_time = 10;
                linetilde_10_keepramp = 1;
                param_09_value = 500;
                beatstoms_01_beattime = 0;
                listlookup_03_lookup = { 0.125, 0.25, 0.5, 1, 2 };
                linetilde_11_time = 10;
                linetilde_11_keepramp = 1;
                param_10_value = 3;
                expr_29_in1 = 0;
                expr_29_out1 = 0;
                linetilde_12_time = 10;
                linetilde_12_keepramp = 1;
                tempo_01_input_number = 0;
                expr_30_in1 = 0;
                expr_30_in2 = 1.5;
                expr_30_out1 = 0;
                linetilde_13_time = 10;
                linetilde_13_keepramp = 1;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                snapshot_01_calc = 0;
                snapshot_01_nextTime = 0;
                snapshot_01_count = 0;
                snapshot_01_lastValue = 0;
                param_08_lastValue = 0;
                numbertilde_11_currentInterval = 0;
                numbertilde_11_currentIntervalInSamples = 0;
                numbertilde_11_lastValue = 0;
                numbertilde_11_outValue = 0;
                numbertilde_11_rampInSamples = 0;
                numbertilde_11_currentMode = 0;
                numbertilde_11_smooth_d_prev = 0;
                numbertilde_11_smooth_prev = 0;
                numbertilde_11_smooth_index = 0;
                numbertilde_11_smooth_increment = 0;
                numbertilde_11_setupDone = false;
                linetilde_10_currentValue = 0;
                param_09_lastValue = 0;
                linetilde_11_currentValue = 0;
                param_10_lastValue = 0;
                linetilde_12_currentValue = 0;
                linetilde_13_currentValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number snapshot_01_interval;
                number snapshot_01_out;
                list message_07_set;
                number expr_28_in1;
                number expr_28_in2;
                number expr_28_out1;
                number selector_01_onoff;
                number param_08_value;
                number numbertilde_11_input_number;
                number numbertilde_11_ramp;
                list linetilde_10_segments;
                number linetilde_10_time;
                number linetilde_10_keepramp;
                number param_09_value;
                number beatstoms_01_beattime;
                list listlookup_03_input;
                list listlookup_03_lookup;
                list linetilde_11_segments;
                number linetilde_11_time;
                number linetilde_11_keepramp;
                number param_10_value;
                number expr_29_in1;
                number expr_29_out1;
                list linetilde_12_segments;
                number linetilde_12_time;
                number linetilde_12_keepramp;
                number tempo_01_input_number;
                number expr_30_in1;
                number expr_30_in2;
                number expr_30_out1;
                list linetilde_13_segments;
                number linetilde_13_time;
                number linetilde_13_keepramp;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[5];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number snapshot_01_calc;
                number snapshot_01_nextTime;
                SampleIndex snapshot_01_count;
                number snapshot_01_lastValue;
                number param_08_lastValue;
                SampleIndex numbertilde_11_currentInterval;
                SampleIndex numbertilde_11_currentIntervalInSamples;
                number numbertilde_11_lastValue;
                number numbertilde_11_outValue;
                number numbertilde_11_rampInSamples;
                Int numbertilde_11_currentMode;
                number numbertilde_11_smooth_d_prev;
                number numbertilde_11_smooth_prev;
                number numbertilde_11_smooth_index;
                number numbertilde_11_smooth_increment;
                bool numbertilde_11_setupDone;
                list linetilde_10_activeRamps;
                number linetilde_10_currentValue;
                number param_09_lastValue;
                list linetilde_11_activeRamps;
                number linetilde_11_currentValue;
                number param_10_lastValue;
                list linetilde_12_activeRamps;
                number linetilde_12_currentValue;
                list linetilde_13_activeRamps;
                number linetilde_13_currentValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_64()
    {
    }
    
    ~RNBOSubpatcher_64()
    {
        delete this->p_07;
    }
    
    virtual RnboBubble* getPatcher() const {
        return static_cast<RnboBubble *>(_parentPatcher);
    }
    
    RnboBubble* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_07_perform(n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
        this->p_07->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_07->processTempoEvent(time, tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_07->processTransportEvent(time, state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_07->processBeatTimeEvent(time, beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_07->processTimeSignatureEvent(time, numerator, denominator);
    }
    
    void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
        this->updateTime(time);
        this->p_07->processBBUEvent(time, bars, beats, units);
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_07 = new RNBOSubpatcher_55();
        this->p_07->setEngineAndPatcher(this->getEngine(), this);
        this->p_07->initialize();
        this->p_07->setParameterOffset(this->getParameterOffset(this->p_07));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->p_07->getPreset(getSubState(getSubState(preset, "__sps"), "Quant"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        RNBO_UNUSED(v);
        this->updateTime(time);
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                this->p_07->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0 + this->p_07->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            default:
                {
                index -= 0;
    
                if (index < this->p_07->getNumParameters())
                    this->p_07->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_07)
            return 0;
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("DelayTime/number_obj-7") == objectId)
                this->numberobj_53_valin_set(payload);
    
            if (TAG("DelayTime/number_obj-6") == objectId)
                this->numberobj_54_valin_set(payload);
    
            if (TAG("DelayTime/number_obj-123") == objectId)
                this->numberobj_55_valin_set(payload);
    
            if (TAG("DelayTime/number_obj-13") == objectId)
                this->numberobj_56_valin_set(payload);
    
            if (TAG("DelayTime/number_obj-30") == objectId)
                this->numberobj_57_valin_set(payload);
    
            if (TAG("DelayTime/number_obj-35") == objectId)
                this->numberobj_58_valin_set(payload);
    
            if (TAG("DelayTime/number_obj-11") == objectId)
                this->numberobj_59_valin_set(payload);
    
            if (TAG("DelayTime/number_obj-15") == objectId)
                this->numberobj_60_valin_set(payload);
    
            if (TAG("DelayTime/number_obj-26") == objectId)
                this->numberobj_61_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("DelayTime/number_obj-7") == objectId)
                this->numberobj_53_format_set(payload);
    
            if (TAG("DelayTime/number_obj-6") == objectId)
                this->numberobj_54_format_set(payload);
    
            if (TAG("DelayTime/number_obj-123") == objectId)
                this->numberobj_55_format_set(payload);
    
            if (TAG("DelayTime/number_obj-13") == objectId)
                this->numberobj_56_format_set(payload);
    
            if (TAG("DelayTime/number_obj-30") == objectId)
                this->numberobj_57_format_set(payload);
    
            if (TAG("DelayTime/number_obj-35") == objectId)
                this->numberobj_58_format_set(payload);
    
            if (TAG("DelayTime/number_obj-11") == objectId)
                this->numberobj_59_format_set(payload);
    
            if (TAG("DelayTime/number_obj-15") == objectId)
                this->numberobj_60_format_set(payload);
    
            if (TAG("DelayTime/number_obj-26") == objectId)
                this->numberobj_61_format_set(payload);
    
            break;
            }
        }
    
        this->p_07->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_07->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_07->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("DelayTime/number_obj-7"):
            {
            return "DelayTime/number_obj-7";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("DelayTime/number_obj-6"):
            {
            return "DelayTime/number_obj-6";
            }
        case TAG("DelayTime/number_obj-123"):
            {
            return "DelayTime/number_obj-123";
            }
        case TAG("DelayTime/number_obj-13"):
            {
            return "DelayTime/number_obj-13";
            }
        case TAG("DelayTime/number_obj-30"):
            {
            return "DelayTime/number_obj-30";
            }
        case TAG("DelayTime/number_obj-35"):
            {
            return "DelayTime/number_obj-35";
            }
        case TAG("DelayTime/number_obj-11"):
            {
            return "DelayTime/number_obj-11";
            }
        case TAG("DelayTime/number_obj-15"):
            {
            return "DelayTime/number_obj-15";
            }
        case TAG("DelayTime/number_obj-26"):
            {
            return "DelayTime/number_obj-26";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        auto subpatchResult_0 = this->p_07->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->p_07->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void numberobj_53_valin_set(number v) {
        this->numberobj_53_value_set(v);
    }
    
    void numberobj_53_format_set(number v) {
        this->numberobj_53_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_54_valin_set(number v) {
        this->numberobj_54_value_set(v);
    }
    
    void numberobj_54_format_set(number v) {
        this->numberobj_54_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_55_valin_set(number v) {
        this->numberobj_55_value_set(v);
    }
    
    void numberobj_55_format_set(number v) {
        this->numberobj_55_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_56_valin_set(number v) {
        this->numberobj_56_value_set(v);
    }
    
    void numberobj_56_format_set(number v) {
        this->numberobj_56_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_57_valin_set(number v) {
        this->numberobj_57_value_set(v);
    }
    
    void numberobj_57_format_set(number v) {
        this->numberobj_57_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_58_valin_set(number v) {
        this->numberobj_58_value_set(v);
    }
    
    void numberobj_58_format_set(number v) {
        this->numberobj_58_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_59_valin_set(number v) {
        this->numberobj_59_value_set(v);
    }
    
    void numberobj_59_format_set(number v) {
        this->numberobj_59_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_12_out1_bang_bang() {
        this->numberobj_59_value_bang();
    }
    
    void eventinlet_12_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_59_value_set(converted);
        }
    }
    
    void numberobj_60_valin_set(number v) {
        this->numberobj_60_value_set(v);
    }
    
    void numberobj_60_format_set(number v) {
        this->numberobj_60_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_61_valin_set(number v) {
        this->numberobj_61_value_set(v);
    }
    
    void numberobj_61_format_set(number v) {
        this->numberobj_61_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_53_init();
        this->numberobj_54_init();
        this->numberobj_55_init();
        this->numberobj_56_init();
        this->numberobj_57_init();
        this->numberobj_58_init();
        this->numberobj_59_init();
        this->numberobj_60_init();
        this->numberobj_61_init();
        this->p_07->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_07->startup();
    }
    
    void allocateDataRefs() {
        this->p_07->allocateDataRefs();
    }
    
    void eventoutlet_06_in1_list_set(const list& v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_16_out1_list_set((list)v);
    }
    
    void numberobj_53_output_set(number ) {}
    
    void numberobj_53_value_set(number v) {
        this->numberobj_53_value_setter(v);
        v = this->numberobj_53_value;
        number localvalue = v;
    
        if (this->numberobj_53_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DelayTime/number_obj-7"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_53_output_set(localvalue);
    }
    
    void pak_01_out_set(const list& v) {
        this->eventoutlet_06_in1_list_set(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_53_value_set(converted);
        }
    }
    
    void pak_01_in2_set(number v) {
        this->pak_01_in2 = v;
        list array = list(0, 0, 0);
        array[0] = this->pak_01_in1;
        array[1] = this->pak_01_in2;
        array[2] = this->pak_01_in3;
        this->pak_01_out_set(array);
    }
    
    void numberobj_55_output_set(number v) {
        this->pak_01_in2_set(v);
    }
    
    void numberobj_55_value_set(number v) {
        this->numberobj_55_value_setter(v);
        v = this->numberobj_55_value;
        number localvalue = v;
    
        if (this->numberobj_55_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DelayTime/number_obj-123"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_55_output_set(localvalue);
    }
    
    void expr_32_out1_set(number v) {
        this->expr_32_out1 = v;
        this->numberobj_55_value_set(this->expr_32_out1);
    }
    
    void expr_32_in1_set(number in1) {
        this->expr_32_in1 = in1;
        this->expr_32_out1_set(this->expr_32_in1 - this->expr_32_in2);//#map:DelayTime/-_obj-23:1
    }
    
    void expr_32_in2_set(number v) {
        this->expr_32_in2 = v;
        this->expr_32_in1_set(this->expr_32_in1);
    }
    
    void numberobj_60_output_set(number v) {
        this->expr_32_in2_set(v);
    }
    
    void numberobj_60_value_set(number v) {
        this->numberobj_60_value_setter(v);
        v = this->numberobj_60_value;
        number localvalue = v;
    
        if (this->numberobj_60_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DelayTime/number_obj-15"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_60_output_set(localvalue);
    }
    
    void expr_34_out1_set(number v) {
        this->expr_34_out1 = v;
        this->numberobj_60_value_set(this->expr_34_out1);
    }
    
    void expr_34_in1_set(number in1) {
        this->expr_34_in1 = in1;
        this->expr_34_out1_set(this->expr_34_in1 * this->expr_34_in2);//#map:DelayTime/*_obj-28:1
    }
    
    void expr_34_in2_set(number v) {
        this->expr_34_in2 = v;
        this->expr_34_in1_set(this->expr_34_in1);
    }
    
    void trigger_05_out2_set(number v) {
        this->expr_34_in2_set(v);
    }
    
    void pak_01_in1_set(number v) {
        this->pak_01_in1 = v;
        list array = list(0, 0, 0);
        array[0] = this->pak_01_in1;
        array[1] = this->pak_01_in2;
        array[2] = this->pak_01_in3;
        this->pak_01_out_set(array);
    }
    
    void numberobj_54_output_set(number v) {
        this->pak_01_in1_set(v);
    }
    
    void numberobj_54_value_set(number v) {
        this->numberobj_54_value_setter(v);
        v = this->numberobj_54_value;
        number localvalue = v;
    
        if (this->numberobj_54_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DelayTime/number_obj-6"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_54_output_set(localvalue);
    }
    
    void expr_31_out1_set(number v) {
        this->expr_31_out1 = v;
        this->numberobj_54_value_set(this->expr_31_out1);
    }
    
    void expr_31_in1_set(number in1) {
        this->expr_31_in1 = in1;
        this->expr_31_out1_set(this->expr_31_in1 - this->expr_31_in2);//#map:DelayTime/-_obj-20:1
    }
    
    void expr_31_in2_set(number v) {
        this->expr_31_in2 = v;
        this->expr_31_in1_set(this->expr_31_in1);
    }
    
    void numberobj_56_output_set(number v) {
        this->expr_31_in2_set(v);
    }
    
    void numberobj_56_value_set(number v) {
        this->numberobj_56_value_setter(v);
        v = this->numberobj_56_value;
        number localvalue = v;
    
        if (this->numberobj_56_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DelayTime/number_obj-13"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_56_output_set(localvalue);
    }
    
    void expr_33_out1_set(number v) {
        this->expr_33_out1 = v;
        this->numberobj_56_value_set(this->expr_33_out1);
    }
    
    void expr_33_in1_set(number in1) {
        this->expr_33_in1 = in1;
        this->expr_33_out1_set(this->expr_33_in1 * this->expr_33_in2);//#map:DelayTime/*_obj-10:1
    }
    
    void expr_33_in2_set(number v) {
        this->expr_33_in2 = v;
        this->expr_33_in1_set(this->expr_33_in1);
    }
    
    void trigger_05_out1_set(number v) {
        this->expr_33_in2_set(v);
    }
    
    void trigger_05_input_number_set(number v) {
        this->trigger_05_out2_set(0);
        this->trigger_05_out1_set(v);
    }
    
    void numberobj_58_output_set(number v) {
        this->trigger_05_input_number_set(v);
    }
    
    void numberobj_58_value_set(number v) {
        this->numberobj_58_value_setter(v);
        v = this->numberobj_58_value;
        number localvalue = v;
    
        if (this->numberobj_58_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DelayTime/number_obj-35"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_58_output_set(localvalue);
    }
    
    void scale_05_out_set(const list& v) {
        this->scale_05_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_58_value_set(converted);
        }
    }
    
    void scale_05_input_set(const list& v) {
        this->scale_05_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_05_inlow,
                this->scale_05_inhigh,
                this->scale_05_outlow,
                this->scale_05_outhigh,
                this->scale_05_power
            ));
        }
    
        this->scale_05_out_set(tmp);
    }
    
    void split_02_out1_set(number v) {
        {
            list converted = {v};
            this->scale_05_input_set(converted);
        }
    }
    
    void trigger_06_out2_set(number v) {
        this->expr_33_in2_set(v);
    }
    
    void trigger_06_out1_set(number v) {
        this->expr_34_in2_set(v);
    }
    
    void trigger_06_input_number_set(number v) {
        this->trigger_06_out2_set(0);
        this->trigger_06_out1_set(v);
    }
    
    void numberobj_61_output_set(number v) {
        this->trigger_06_input_number_set(v);
    }
    
    void numberobj_61_value_set(number v) {
        this->numberobj_61_value_setter(v);
        v = this->numberobj_61_value;
        number localvalue = v;
    
        if (this->numberobj_61_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DelayTime/number_obj-26"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_61_output_set(localvalue);
    }
    
    void scale_06_out_set(const list& v) {
        this->scale_06_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_61_value_set(converted);
        }
    }
    
    void scale_06_input_set(const list& v) {
        this->scale_06_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_06_inlow,
                this->scale_06_inhigh,
                this->scale_06_outlow,
                this->scale_06_outhigh,
                this->scale_06_power
            ));
        }
    
        this->scale_06_out_set(tmp);
    }
    
    void split_02_out2_set(number v) {
        {
            list converted = {v};
            this->scale_06_input_set(converted);
        }
    }
    
    void split_02_input_set(number v) {
        this->split_02_input = v;
    
        if (v >= this->split_02_min && v <= this->split_02_max)
            this->split_02_out1_set(v);
        else
            this->split_02_out2_set(v);
    }
    
    void numberobj_59_output_set(number v) {
        this->split_02_input_set(v);
    }
    
    void numberobj_59_value_set(number v) {
        this->numberobj_59_value_setter(v);
        v = this->numberobj_59_value;
        number localvalue = v;
    
        if (this->numberobj_59_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DelayTime/number_obj-11"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_59_output_set(localvalue);
    }
    
    void eventinlet_12_out1_number_set(number v) {
        this->numberobj_59_value_set(v);
    }
    
    void pak_01_in3_set(number v) {
        this->pak_01_in3 = v;
        list array = list(0, 0, 0);
        array[0] = this->pak_01_in1;
        array[1] = this->pak_01_in2;
        array[2] = this->pak_01_in3;
        this->pak_01_out_set(array);
    }
    
    void numberobj_57_output_set(number v) {
        this->pak_01_in3_set(v);
    }
    
    void numberobj_57_value_set(number v) {
        this->numberobj_57_value_setter(v);
        v = this->numberobj_57_value;
        number localvalue = v;
    
        if (this->numberobj_57_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DelayTime/number_obj-30"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_57_output_set(localvalue);
    }
    
    void numberobj_59_value_bang() {
        number v = this->numberobj_59_value;
        number localvalue = v;
    
        if (this->numberobj_59_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("DelayTime/number_obj-11"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_59_output_set(localvalue);
    }
    
    void p_07_perform(Index n) {
        // subpatcher: Quant
        this->p_07->process(nullptr, 0, nullptr, 0, n);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void p_07_out1_number_set(number v) {
        this->expr_34_in1_set(v);
        this->expr_33_in1_set(v);
        this->numberobj_57_value_set(v);
        this->expr_32_in1_set(v);
        this->expr_31_in1_set(v);
    }
    
    void numberobj_53_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_53_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_53_value = localvalue;
    }
    
    void numberobj_54_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_54_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_54_value = localvalue;
    }
    
    void numberobj_55_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_55_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_55_value = localvalue;
    }
    
    void numberobj_56_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_56_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_56_value = localvalue;
    }
    
    void numberobj_57_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_57_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_57_value = localvalue;
    }
    
    void numberobj_58_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_58_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_58_value = localvalue;
    }
    
    void numberobj_59_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_59_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_59_value = localvalue;
    }
    
    void numberobj_60_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_60_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_60_value = localvalue;
    }
    
    void numberobj_61_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_61_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_61_value = localvalue;
    }
    
    void numberobj_53_init() {
        this->numberobj_53_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DelayTime/number_obj-7"), 1, this->_currentTime);
    }
    
    void numberobj_53_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_53_value;
    }
    
    void numberobj_53_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_53_value_set(preset["value"]);
    }
    
    void numberobj_54_init() {
        this->numberobj_54_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DelayTime/number_obj-6"), 1, this->_currentTime);
    }
    
    void numberobj_54_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_54_value;
    }
    
    void numberobj_54_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_54_value_set(preset["value"]);
    }
    
    void numberobj_55_init() {
        this->numberobj_55_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DelayTime/number_obj-123"), 1, this->_currentTime);
    }
    
    void numberobj_55_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_55_value;
    }
    
    void numberobj_55_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_55_value_set(preset["value"]);
    }
    
    void numberobj_56_init() {
        this->numberobj_56_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DelayTime/number_obj-13"), 1, this->_currentTime);
    }
    
    void numberobj_56_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_56_value;
    }
    
    void numberobj_56_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_56_value_set(preset["value"]);
    }
    
    void numberobj_57_init() {
        this->numberobj_57_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DelayTime/number_obj-30"), 1, this->_currentTime);
    }
    
    void numberobj_57_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_57_value;
    }
    
    void numberobj_57_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_57_value_set(preset["value"]);
    }
    
    void numberobj_58_init() {
        this->numberobj_58_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DelayTime/number_obj-35"), 1, this->_currentTime);
    }
    
    void numberobj_58_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_58_value;
    }
    
    void numberobj_58_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_58_value_set(preset["value"]);
    }
    
    void numberobj_59_init() {
        this->numberobj_59_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DelayTime/number_obj-11"), 1, this->_currentTime);
    }
    
    void numberobj_59_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_59_value;
    }
    
    void numberobj_59_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_59_value_set(preset["value"]);
    }
    
    void numberobj_60_init() {
        this->numberobj_60_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DelayTime/number_obj-15"), 1, this->_currentTime);
    }
    
    void numberobj_60_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_60_value;
    }
    
    void numberobj_60_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_60_value_set(preset["value"]);
    }
    
    void numberobj_61_init() {
        this->numberobj_61_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("DelayTime/number_obj-26"), 1, this->_currentTime);
    }
    
    void numberobj_61_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_61_value;
    }
    
    void numberobj_61_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_61_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        numberobj_53_value = 0;
        numberobj_53_value_setter(numberobj_53_value);
        p_07_target = 0;
        expr_31_in1 = 0;
        expr_31_in2 = 0;
        expr_31_out1 = 0;
        numberobj_54_value = 0;
        numberobj_54_value_setter(numberobj_54_value);
        pak_01_in1 = 0;
        pak_01_in2 = 0;
        pak_01_in3 = 0;
        expr_32_in1 = 0;
        expr_32_in2 = 0;
        expr_32_out1 = 0;
        numberobj_55_value = 0;
        numberobj_55_value_setter(numberobj_55_value);
        numberobj_56_value = 0;
        numberobj_56_value_setter(numberobj_56_value);
        expr_33_in1 = 0;
        expr_33_in2 = 0;
        expr_33_out1 = 0;
        numberobj_57_value = 0;
        numberobj_57_value_setter(numberobj_57_value);
        numberobj_58_value = 0;
        numberobj_58_value_setter(numberobj_58_value);
        scale_05_inlow = -100;
        scale_05_inhigh = 0;
        scale_05_outlow = 0.5;
        scale_05_outhigh = 0;
        scale_05_power = 1;
        split_02_input = 0;
        split_02_min = -100;
        split_02_max = 0;
        numberobj_59_value = 0;
        numberobj_59_value_setter(numberobj_59_value);
        numberobj_60_value = 0;
        numberobj_60_value_setter(numberobj_60_value);
        expr_34_in1 = 0;
        expr_34_in2 = 0;
        expr_34_out1 = 0;
        numberobj_61_value = 0;
        numberobj_61_value_setter(numberobj_61_value);
        scale_06_inlow = 0;
        scale_06_inhigh = 100;
        scale_06_outlow = 0;
        scale_06_outhigh = 0.5;
        scale_06_power = 1;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_53_currentFormat = 6;
        numberobj_53_lastValue = 0;
        numberobj_54_currentFormat = 6;
        numberobj_54_lastValue = 0;
        numberobj_55_currentFormat = 6;
        numberobj_55_lastValue = 0;
        numberobj_56_currentFormat = 6;
        numberobj_56_lastValue = 0;
        numberobj_57_currentFormat = 6;
        numberobj_57_lastValue = 0;
        numberobj_58_currentFormat = 6;
        numberobj_58_lastValue = 0;
        numberobj_59_currentFormat = 6;
        numberobj_59_lastValue = 0;
        numberobj_60_currentFormat = 6;
        numberobj_60_lastValue = 0;
        numberobj_61_currentFormat = 6;
        numberobj_61_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number numberobj_53_value;
        number p_07_target;
        number expr_31_in1;
        number expr_31_in2;
        number expr_31_out1;
        number numberobj_54_value;
        number pak_01_in1;
        number pak_01_in2;
        number pak_01_in3;
        number expr_32_in1;
        number expr_32_in2;
        number expr_32_out1;
        number numberobj_55_value;
        number numberobj_56_value;
        number expr_33_in1;
        number expr_33_in2;
        number expr_33_out1;
        number numberobj_57_value;
        number numberobj_58_value;
        list scale_05_input;
        number scale_05_inlow;
        number scale_05_inhigh;
        number scale_05_outlow;
        number scale_05_outhigh;
        number scale_05_power;
        list scale_05_out;
        number split_02_input;
        number split_02_min;
        number split_02_max;
        number numberobj_59_value;
        number numberobj_60_value;
        number expr_34_in1;
        number expr_34_in2;
        number expr_34_out1;
        number numberobj_61_value;
        list scale_06_input;
        number scale_06_inlow;
        number scale_06_inhigh;
        number scale_06_outlow;
        number scale_06_outhigh;
        number scale_06_power;
        list scale_06_out;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int numberobj_53_currentFormat;
        number numberobj_53_lastValue;
        Int numberobj_54_currentFormat;
        number numberobj_54_lastValue;
        Int numberobj_55_currentFormat;
        number numberobj_55_lastValue;
        Int numberobj_56_currentFormat;
        number numberobj_56_lastValue;
        Int numberobj_57_currentFormat;
        number numberobj_57_lastValue;
        Int numberobj_58_currentFormat;
        number numberobj_58_lastValue;
        Int numberobj_59_currentFormat;
        number numberobj_59_lastValue;
        Int numberobj_60_currentFormat;
        number numberobj_60_lastValue;
        Int numberobj_61_currentFormat;
        number numberobj_61_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_55* p_07;
    
};

RnboBubble()
{
}

~RnboBubble()
{
    delete this->p_08;
    delete this->p_09;
    delete this->p_10;
    delete this->p_11;
    delete this->p_12;
    delete this->p_13;
    delete this->p_14;
    delete this->p_15;
    delete this->p_16;
}

RnboBubble* getTopLevelPatcher() {
    return this;
}

void cancelClockEvents()
{
}

template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    if (l < h) {
        Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
        this->listquicksort(arr, sortindices, l, p - 1, ascending);
        this->listquicksort(arr, sortindices, p + 1, h, ascending);
    }
}

template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    number x = arr[(Index)h];
    Int i = (Int)(l - 1);

    for (Int j = (Int)(l); j <= h - 1; j++) {
        bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
        bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);

        if ((bool)(asc) || (bool)(desc)) {
            i++;
            this->listswapelements(arr, i, j);
            this->listswapelements(sortindices, i, j);
        }
    }

    i++;
    this->listswapelements(arr, i, h);
    this->listswapelements(sortindices, i, h);
    return i;
}

template <typename T> void listswapelements(T& arr, Int a, Int b) {
    auto tmp = arr[(Index)a];
    arr[(Index)a] = arr[(Index)b];
    arr[(Index)b] = tmp;
}

number samplerate() const {
    return this->sr;
}

number mstosamps(MillisecondTime ms) {
    return ms * this->sr * 0.001;
}

number maximum(number x, number y) {
    return (x < y ? y : x);
}

MillisecondTime sampstoms(number samps) {
    return samps * 1000 / this->sr;
}

Index getNumMidiInputPorts() const {
    return 1;
}

void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
    this->updateTime(time);
    this->p_13_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
    this->p_14_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
    this->p_15_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
}

Index getNumMidiOutputPorts() const {
    return 0;
}

void process(
    const SampleValue * const* inputs,
    Index numInputs,
    SampleValue * const* outputs,
    Index numOutputs,
    Index n
) {
    this->vs = n;
    this->updateTime(this->getEngine()->getCurrentTime());
    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
    const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
    this->p_15_perform(in1, in2, this->signals[0], this->signals[1], n);

    this->p_08_perform(
        in1,
        in2,
        this->signals[0],
        this->signals[1],
        this->signals[2],
        this->signals[3],
        this->signals[4],
        this->signals[5],
        n
    );

    this->p_13_perform(this->signals[4], this->signals[5], this->signals[1], this->signals[0], n);
    this->p_16_perform(n);
    this->feedbackreader_01_perform(this->signals[5], n);
    this->feedbackreader_02_perform(this->signals[4], n);

    this->p_14_perform(
        this->signals[1],
        this->signals[0],
        this->signals[5],
        this->signals[4],
        this->signals[6],
        this->signals[7],
        this->signals[8],
        this->signals[9],
        n
    );

    this->p_12_perform(this->signals[6], this->signals[7], this->signals[4], this->signals[5], n);
    this->p_11_perform(this->signals[4], this->signals[5], this->signals[7], this->signals[6], n);

    this->p_09_perform(
        this->signals[2],
        this->signals[3],
        this->signals[7],
        this->signals[6],
        this->signals[5],
        this->signals[4],
        n
    );

    this->p_10_perform(this->signals[5], this->signals[4], this->signals[6], this->signals[7], n);
    this->limi_01_perform(this->signals[6], out1, n);
    this->limi_02_perform(this->signals[7], out2, n);
    this->feedbackwriter_01_perform(this->signals[8], n);
    this->feedbackwriter_02_perform(this->signals[9], n);
    this->stackprotect_perform(n);
    this->globaltransport_advance();
    this->audioProcessSampleCount += this->vs;
}

void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
        Index i;

        for (i = 0; i < 10; i++) {
            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
        }

        this->feedbacktilde_01_feedbackbuffer = resizeSignal(this->feedbacktilde_01_feedbackbuffer, this->maxvs, maxBlockSize);
        this->feedbacktilde_02_feedbackbuffer = resizeSignal(this->feedbacktilde_02_feedbackbuffer, this->maxvs, maxBlockSize);
        this->globaltransport_tempo = resizeSignal(this->globaltransport_tempo, this->maxvs, maxBlockSize);
        this->globaltransport_state = resizeSignal(this->globaltransport_state, this->maxvs, maxBlockSize);
        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
        this->didAllocateSignals = true;
    }

    const bool sampleRateChanged = sampleRate != this->sr;
    const bool maxvsChanged = maxBlockSize != this->maxvs;
    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;

    if (sampleRateChanged || maxvsChanged) {
        this->vs = maxBlockSize;
        this->maxvs = maxBlockSize;
        this->sr = sampleRate;
        this->invsr = 1 / sampleRate;
    }

    this->limi_01_dspsetup(forceDSPSetup);
    this->limi_02_dspsetup(forceDSPSetup);
    this->globaltransport_dspsetup(forceDSPSetup);
    this->p_08->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_09->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_10->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_11->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_12->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_13->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_14->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_15->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_16->prepareToProcess(sampleRate, maxBlockSize, force);

    if (sampleRateChanged)
        this->onSampleRateChanged(sampleRate);
}

void setProbingTarget(MessageTag id) {
    switch (id) {
    default:
        {
        this->setProbingIndex(-1);
        break;
        }
    }
}

void setProbingIndex(ProbingIndex ) {}

Index getProbingChannels(MessageTag outletId) const {
    RNBO_UNUSED(outletId);
    return 0;
}

DataRef* getDataRef(DataRefIndex index)  {
    switch (index) {
    default:
        {
        return nullptr;
        }
    }
}

DataRefIndex getNumDataRefs() const {
    return 0;
}

void fillDataRef(DataRefIndex , DataRef& ) {}

void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
    this->p_08->processDataViewUpdate(index, time);
    this->p_09->processDataViewUpdate(index, time);
    this->p_10->processDataViewUpdate(index, time);
    this->p_11->processDataViewUpdate(index, time);
    this->p_12->processDataViewUpdate(index, time);
    this->p_13->processDataViewUpdate(index, time);
    this->p_14->processDataViewUpdate(index, time);
    this->p_15->processDataViewUpdate(index, time);
    this->p_16->processDataViewUpdate(index, time);
}

void initialize() {
    this->assign_defaults();
    this->setState();
    this->initializeObjects();
    this->allocateDataRefs();
    this->startup();
}

Index getIsMuted()  {
    return this->isMuted;
}

void setIsMuted(Index v)  {
    this->isMuted = v;
}

void onSampleRateChanged(double ) {}

void processTempoEvent(MillisecondTime time, Tempo tempo) {
    this->updateTime(time);

    if (this->globaltransport_setTempo(this->_currentTime, tempo, false)) {
        this->p_08->processTempoEvent(time, tempo);
        this->p_09->processTempoEvent(time, tempo);
        this->p_10->processTempoEvent(time, tempo);
        this->p_11->processTempoEvent(time, tempo);
        this->p_12->processTempoEvent(time, tempo);
        this->p_13->processTempoEvent(time, tempo);
        this->p_14->processTempoEvent(time, tempo);
        this->p_15->processTempoEvent(time, tempo);
        this->p_16->processTempoEvent(time, tempo);
    }
}

void processTransportEvent(MillisecondTime time, TransportState state) {
    this->updateTime(time);

    if (this->globaltransport_setState(this->_currentTime, state, false)) {
        this->p_08->processTransportEvent(time, state);
        this->p_09->processTransportEvent(time, state);
        this->p_10->processTransportEvent(time, state);
        this->p_11->processTransportEvent(time, state);
        this->p_12->processTransportEvent(time, state);
        this->p_13->processTransportEvent(time, state);
        this->p_14->processTransportEvent(time, state);
        this->p_15->processTransportEvent(time, state);
        this->p_16->processTransportEvent(time, state);
    }
}

void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
    this->updateTime(time);

    if (this->globaltransport_setBeatTime(this->_currentTime, beattime, false)) {
        this->p_08->processBeatTimeEvent(time, beattime);
        this->p_09->processBeatTimeEvent(time, beattime);
        this->p_10->processBeatTimeEvent(time, beattime);
        this->p_11->processBeatTimeEvent(time, beattime);
        this->p_12->processBeatTimeEvent(time, beattime);
        this->p_13->processBeatTimeEvent(time, beattime);
        this->p_14->processBeatTimeEvent(time, beattime);
        this->p_15->processBeatTimeEvent(time, beattime);
        this->p_16->processBeatTimeEvent(time, beattime);
    }
}

void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
    this->updateTime(time);

    if (this->globaltransport_setTimeSignature(this->_currentTime, numerator, denominator, false)) {
        this->p_08->processTimeSignatureEvent(time, numerator, denominator);
        this->p_09->processTimeSignatureEvent(time, numerator, denominator);
        this->p_10->processTimeSignatureEvent(time, numerator, denominator);
        this->p_11->processTimeSignatureEvent(time, numerator, denominator);
        this->p_12->processTimeSignatureEvent(time, numerator, denominator);
        this->p_13->processTimeSignatureEvent(time, numerator, denominator);
        this->p_14->processTimeSignatureEvent(time, numerator, denominator);
        this->p_15->processTimeSignatureEvent(time, numerator, denominator);
        this->p_16->processTimeSignatureEvent(time, numerator, denominator);
    }
}

void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
    this->updateTime(time);

    if (this->globaltransport_setBBU(this->_currentTime, bars, beats, units, false)) {
        this->p_08->processBBUEvent(time, bars, beats, units);
        this->p_09->processBBUEvent(time, bars, beats, units);
        this->p_10->processBBUEvent(time, bars, beats, units);
        this->p_11->processBBUEvent(time, bars, beats, units);
        this->p_12->processBBUEvent(time, bars, beats, units);
        this->p_13->processBBUEvent(time, bars, beats, units);
        this->p_14->processBBUEvent(time, bars, beats, units);
        this->p_15->processBBUEvent(time, bars, beats, units);
        this->p_16->processBBUEvent(time, bars, beats, units);
    }
}

Index getPatcherSerial() const {
    return 0;
}

void getState(PatcherStateInterface& ) {}

void setState() {
    this->p_08 = new RNBOSubpatcher_56();
    this->p_08->setEngineAndPatcher(this->getEngine(), this);
    this->p_08->initialize();
    this->p_08->setParameterOffset(this->getParameterOffset(this->p_08));
    this->p_09 = new RNBOSubpatcher_57();
    this->p_09->setEngineAndPatcher(this->getEngine(), this);
    this->p_09->initialize();
    this->p_09->setParameterOffset(this->getParameterOffset(this->p_09));
    this->p_10 = new RNBOSubpatcher_58();
    this->p_10->setEngineAndPatcher(this->getEngine(), this);
    this->p_10->initialize();
    this->p_10->setParameterOffset(this->getParameterOffset(this->p_10));
    this->p_11 = new RNBOSubpatcher_59();
    this->p_11->setEngineAndPatcher(this->getEngine(), this);
    this->p_11->initialize();
    this->p_11->setParameterOffset(this->getParameterOffset(this->p_11));
    this->p_12 = new RNBOSubpatcher_60();
    this->p_12->setEngineAndPatcher(this->getEngine(), this);
    this->p_12->initialize();
    this->p_12->setParameterOffset(this->getParameterOffset(this->p_12));
    this->p_13 = new RNBOSubpatcher_61();
    this->p_13->setEngineAndPatcher(this->getEngine(), this);
    this->p_13->initialize();
    this->p_13->setParameterOffset(this->getParameterOffset(this->p_13));
    this->p_14 = new RNBOSubpatcher_62();
    this->p_14->setEngineAndPatcher(this->getEngine(), this);
    this->p_14->initialize();
    this->p_14->setParameterOffset(this->getParameterOffset(this->p_14));
    this->p_15 = new RNBOSubpatcher_63();
    this->p_15->setEngineAndPatcher(this->getEngine(), this);
    this->p_15->initialize();
    this->p_15->setParameterOffset(this->getParameterOffset(this->p_15));
    this->p_16 = new RNBOSubpatcher_64();
    this->p_16->setEngineAndPatcher(this->getEngine(), this);
    this->p_16->initialize();
    this->p_16->setParameterOffset(this->getParameterOffset(this->p_16));
}

void getPreset(PatcherStateInterface& preset) {
    preset["__presetid"] = "rnbo";
    this->param_11_getPresetValue(getSubState(preset, "saturation"));
    this->param_12_getPresetValue(getSubState(preset, "mix"));
    this->param_13_getPresetValue(getSubState(preset, "spread"));
    this->param_14_getPresetValue(getSubState(preset, "feedback"));
    this->param_15_getPresetValue(getSubState(preset, "freq"));
    this->param_16_getPresetValue(getSubState(preset, "res"));
    this->p_08->getPreset(getSubState(getSubState(preset, "__sps"), "ingain"));
    this->p_09->getPreset(getSubState(getSubState(preset, "__sps"), "Mix~"));
    this->p_10->getPreset(getSubState(getSubState(preset, "__sps"), "outgain"));
    this->p_11->getPreset(getSubState(getSubState(preset, "__sps"), "Saturation"));
    this->p_12->getPreset(getSubState(getSubState(preset, "__sps"), "LowPass"));
    this->p_13->getPreset(getSubState(getSubState(preset, "__sps"), "Pitch"));
    this->p_14->getPreset(getSubState(getSubState(preset, "__sps"), "Bubble"));
    this->p_15->getPreset(getSubState(getSubState(preset, "__sps"), "Gate"));
    this->p_16->getPreset(getSubState(getSubState(preset, "__sps"), "DelayTime"));
}

void setPreset(MillisecondTime time, PatcherStateInterface& preset) {
    this->updateTime(time);
    this->param_11_setPresetValue(getSubState(preset, "saturation"));
    this->param_12_setPresetValue(getSubState(preset, "mix"));
    this->param_13_setPresetValue(getSubState(preset, "spread"));
    this->param_14_setPresetValue(getSubState(preset, "feedback"));
    this->param_15_setPresetValue(getSubState(preset, "freq"));
    this->param_16_setPresetValue(getSubState(preset, "res"));
    this->p_08->param_01_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "ingain"), "in"));
    this->p_10->param_02_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "outgain"), "out"));
    this->p_14->param_06_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Bubble"), "burst"));

    this->p_16->p_07->param_08_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "DelayTime"), "__sps"), "Quant"), "quant")
    );

    this->p_16->p_07->param_09_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "DelayTime"), "__sps"), "Quant"), "TimeInMS")
    );

    this->p_16->p_07->param_10_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "DelayTime"), "__sps"), "Quant"), "TimeInBeats")
    );

    this->p_14->param_04_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Bubble"), "rate"));

    this->p_15->param_07_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "Gate"), "threshold")
    );

    this->p_13->param_03_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Pitch"), "transp"));
    this->p_14->param_05_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Bubble"), "depth"));
}

void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
    this->updateTime(time);

    switch (index) {
    case 0:
        {
        this->param_11_value_set(v);
        break;
        }
    case 1:
        {
        this->param_12_value_set(v);
        break;
        }
    case 2:
        {
        this->param_13_value_set(v);
        break;
        }
    case 3:
        {
        this->param_14_value_set(v);
        break;
        }
    case 4:
        {
        this->param_15_value_set(v);
        break;
        }
    case 5:
        {
        this->param_16_value_set(v);
        break;
        }
    default:
        {
        index -= 6;

        if (index < this->p_08->getNumParameters())
            this->p_08->setParameterValue(index, v, time);

        index -= this->p_08->getNumParameters();

        if (index < this->p_09->getNumParameters())
            this->p_09->setParameterValue(index, v, time);

        index -= this->p_09->getNumParameters();

        if (index < this->p_10->getNumParameters())
            this->p_10->setParameterValue(index, v, time);

        index -= this->p_10->getNumParameters();

        if (index < this->p_11->getNumParameters())
            this->p_11->setParameterValue(index, v, time);

        index -= this->p_11->getNumParameters();

        if (index < this->p_12->getNumParameters())
            this->p_12->setParameterValue(index, v, time);

        index -= this->p_12->getNumParameters();

        if (index < this->p_13->getNumParameters())
            this->p_13->setParameterValue(index, v, time);

        index -= this->p_13->getNumParameters();

        if (index < this->p_14->getNumParameters())
            this->p_14->setParameterValue(index, v, time);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            this->p_15->setParameterValue(index, v, time);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            this->p_16->setParameterValue(index, v, time);

        break;
        }
    }
}

void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValue(index, value, time);
}

void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
    this->setParameterValue(index, this->getParameterValue(index), time);
}

void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValueNormalized(index, value, time);
}

ParameterValue getParameterValue(ParameterIndex index)  {
    switch (index) {
    case 0:
        {
        return this->param_11_value;
        }
    case 1:
        {
        return this->param_12_value;
        }
    case 2:
        {
        return this->param_13_value;
        }
    case 3:
        {
        return this->param_14_value;
        }
    case 4:
        {
        return this->param_15_value;
        }
    case 5:
        {
        return this->param_16_value;
        }
    default:
        {
        index -= 6;

        if (index < this->p_08->getNumParameters())
            return this->p_08->getParameterValue(index);

        index -= this->p_08->getNumParameters();

        if (index < this->p_09->getNumParameters())
            return this->p_09->getParameterValue(index);

        index -= this->p_09->getNumParameters();

        if (index < this->p_10->getNumParameters())
            return this->p_10->getParameterValue(index);

        index -= this->p_10->getNumParameters();

        if (index < this->p_11->getNumParameters())
            return this->p_11->getParameterValue(index);

        index -= this->p_11->getNumParameters();

        if (index < this->p_12->getNumParameters())
            return this->p_12->getParameterValue(index);

        index -= this->p_12->getNumParameters();

        if (index < this->p_13->getNumParameters())
            return this->p_13->getParameterValue(index);

        index -= this->p_13->getNumParameters();

        if (index < this->p_14->getNumParameters())
            return this->p_14->getParameterValue(index);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->getParameterValue(index);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->getParameterValue(index);

        return 0;
        }
    }
}

ParameterIndex getNumSignalInParameters() const {
    return 0;
}

ParameterIndex getNumSignalOutParameters() const {
    return 0;
}

ParameterIndex getNumParameters() const {
    return 6 + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters();
}

ConstCharPointer getParameterName(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "saturation";
        }
    case 1:
        {
        return "mix";
        }
    case 2:
        {
        return "spread";
        }
    case 3:
        {
        return "feedback";
        }
    case 4:
        {
        return "freq";
        }
    case 5:
        {
        return "res";
        }
    default:
        {
        index -= 6;

        if (index < this->p_08->getNumParameters())
            return this->p_08->getParameterName(index);

        index -= this->p_08->getNumParameters();

        if (index < this->p_09->getNumParameters())
            return this->p_09->getParameterName(index);

        index -= this->p_09->getNumParameters();

        if (index < this->p_10->getNumParameters())
            return this->p_10->getParameterName(index);

        index -= this->p_10->getNumParameters();

        if (index < this->p_11->getNumParameters())
            return this->p_11->getParameterName(index);

        index -= this->p_11->getNumParameters();

        if (index < this->p_12->getNumParameters())
            return this->p_12->getParameterName(index);

        index -= this->p_12->getNumParameters();

        if (index < this->p_13->getNumParameters())
            return this->p_13->getParameterName(index);

        index -= this->p_13->getNumParameters();

        if (index < this->p_14->getNumParameters())
            return this->p_14->getParameterName(index);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->getParameterName(index);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->getParameterName(index);

        return "bogus";
        }
    }
}

ConstCharPointer getParameterId(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "saturation";
        }
    case 1:
        {
        return "mix";
        }
    case 2:
        {
        return "spread";
        }
    case 3:
        {
        return "feedback";
        }
    case 4:
        {
        return "freq";
        }
    case 5:
        {
        return "res";
        }
    default:
        {
        index -= 6;

        if (index < this->p_08->getNumParameters())
            return this->p_08->getParameterId(index);

        index -= this->p_08->getNumParameters();

        if (index < this->p_09->getNumParameters())
            return this->p_09->getParameterId(index);

        index -= this->p_09->getNumParameters();

        if (index < this->p_10->getNumParameters())
            return this->p_10->getParameterId(index);

        index -= this->p_10->getNumParameters();

        if (index < this->p_11->getNumParameters())
            return this->p_11->getParameterId(index);

        index -= this->p_11->getNumParameters();

        if (index < this->p_12->getNumParameters())
            return this->p_12->getParameterId(index);

        index -= this->p_12->getNumParameters();

        if (index < this->p_13->getNumParameters())
            return this->p_13->getParameterId(index);

        index -= this->p_13->getNumParameters();

        if (index < this->p_14->getNumParameters())
            return this->p_14->getParameterId(index);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->getParameterId(index);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->getParameterId(index);

        return "bogus";
        }
    }
}

void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
    {
        switch (index) {
        case 0:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 1;
            info->max = 10;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Saturation";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 1:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 100;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Mix";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 2:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = -10;
            info->max = 10;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Spread";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 3:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 75;
            info->min = 0;
            info->max = 100;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Feedback";
            info->unit = "%";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 4:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 500;
            info->min = 0;
            info->max = 5000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Frequency";
            info->unit = "Hz";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 5:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 1;
            info->max = 5;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Resonance";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        default:
            {
            index -= 6;

            if (index < this->p_08->getNumParameters())
                this->p_08->getParameterInfo(index, info);

            index -= this->p_08->getNumParameters();

            if (index < this->p_09->getNumParameters())
                this->p_09->getParameterInfo(index, info);

            index -= this->p_09->getNumParameters();

            if (index < this->p_10->getNumParameters())
                this->p_10->getParameterInfo(index, info);

            index -= this->p_10->getNumParameters();

            if (index < this->p_11->getNumParameters())
                this->p_11->getParameterInfo(index, info);

            index -= this->p_11->getNumParameters();

            if (index < this->p_12->getNumParameters())
                this->p_12->getParameterInfo(index, info);

            index -= this->p_12->getNumParameters();

            if (index < this->p_13->getNumParameters())
                this->p_13->getParameterInfo(index, info);

            index -= this->p_13->getNumParameters();

            if (index < this->p_14->getNumParameters())
                this->p_14->getParameterInfo(index, info);

            index -= this->p_14->getNumParameters();

            if (index < this->p_15->getNumParameters())
                this->p_15->getParameterInfo(index, info);

            index -= this->p_15->getNumParameters();

            if (index < this->p_16->getNumParameters())
                this->p_16->getParameterInfo(index, info);

            break;
            }
        }
    }
}

void sendParameter(ParameterIndex index, bool ignoreValue) {
    this->getEngine()->notifyParameterValueChanged(index, (ignoreValue ? 0 : this->getParameterValue(index)), ignoreValue);
}

ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
    if (subpatcher == this->p_08)
        return 6;

    if (subpatcher == this->p_09)
        return 6 + this->p_08->getNumParameters();

    if (subpatcher == this->p_10)
        return 6 + this->p_08->getNumParameters() + this->p_09->getNumParameters();

    if (subpatcher == this->p_11)
        return 6 + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters();

    if (subpatcher == this->p_12)
        return 6 + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters();

    if (subpatcher == this->p_13)
        return 6 + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters();

    if (subpatcher == this->p_14)
        return 6 + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters();

    if (subpatcher == this->p_15)
        return 6 + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters();

    if (subpatcher == this->p_16)
        return 6 + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters();

    return 0;
}

ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
    if (steps == 1) {
        if (normalizedValue > 0) {
            normalizedValue = 1.;
        }
    } else {
        ParameterValue oneStep = (number)1. / (steps - 1);
        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
        normalizedValue = numberOfSteps * oneStep;
    }

    return normalizedValue;
}

ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 1:
    case 3:
        {
        {
            value = (value < 0 ? 0 : (value > 100 ? 100 : value));
            ParameterValue normalizedValue = (value - 0) / (100 - 0);
            return normalizedValue;
        }
        }
    case 4:
        {
        {
            value = (value < 0 ? 0 : (value > 5000 ? 5000 : value));
            ParameterValue normalizedValue = (value - 0) / (5000 - 0);
            return normalizedValue;
        }
        }
    case 5:
        {
        {
            value = (value < 1 ? 1 : (value > 5 ? 5 : value));
            ParameterValue normalizedValue = (value - 1) / (5 - 1);
            return normalizedValue;
        }
        }
    case 0:
        {
        {
            value = (value < 1 ? 1 : (value > 10 ? 10 : value));
            ParameterValue normalizedValue = (value - 1) / (10 - 1);
            return normalizedValue;
        }
        }
    case 2:
        {
        {
            value = (value < -10 ? -10 : (value > 10 ? 10 : value));
            ParameterValue normalizedValue = (value - -10) / (10 - -10);
            return normalizedValue;
        }
        }
    default:
        {
        index -= 6;

        if (index < this->p_08->getNumParameters())
            return this->p_08->convertToNormalizedParameterValue(index, value);

        index -= this->p_08->getNumParameters();

        if (index < this->p_09->getNumParameters())
            return this->p_09->convertToNormalizedParameterValue(index, value);

        index -= this->p_09->getNumParameters();

        if (index < this->p_10->getNumParameters())
            return this->p_10->convertToNormalizedParameterValue(index, value);

        index -= this->p_10->getNumParameters();

        if (index < this->p_11->getNumParameters())
            return this->p_11->convertToNormalizedParameterValue(index, value);

        index -= this->p_11->getNumParameters();

        if (index < this->p_12->getNumParameters())
            return this->p_12->convertToNormalizedParameterValue(index, value);

        index -= this->p_12->getNumParameters();

        if (index < this->p_13->getNumParameters())
            return this->p_13->convertToNormalizedParameterValue(index, value);

        index -= this->p_13->getNumParameters();

        if (index < this->p_14->getNumParameters())
            return this->p_14->convertToNormalizedParameterValue(index, value);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->convertToNormalizedParameterValue(index, value);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->convertToNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    value = (value < 0 ? 0 : (value > 1 ? 1 : value));

    switch (index) {
    case 1:
    case 3:
        {
        {
            {
                return 0 + value * (100 - 0);
            }
        }
        }
    case 4:
        {
        {
            {
                return 0 + value * (5000 - 0);
            }
        }
        }
    case 5:
        {
        {
            {
                return 1 + value * (5 - 1);
            }
        }
        }
    case 0:
        {
        {
            {
                return 1 + value * (10 - 1);
            }
        }
        }
    case 2:
        {
        {
            {
                return -10 + value * (10 - -10);
            }
        }
        }
    default:
        {
        index -= 6;

        if (index < this->p_08->getNumParameters())
            return this->p_08->convertFromNormalizedParameterValue(index, value);

        index -= this->p_08->getNumParameters();

        if (index < this->p_09->getNumParameters())
            return this->p_09->convertFromNormalizedParameterValue(index, value);

        index -= this->p_09->getNumParameters();

        if (index < this->p_10->getNumParameters())
            return this->p_10->convertFromNormalizedParameterValue(index, value);

        index -= this->p_10->getNumParameters();

        if (index < this->p_11->getNumParameters())
            return this->p_11->convertFromNormalizedParameterValue(index, value);

        index -= this->p_11->getNumParameters();

        if (index < this->p_12->getNumParameters())
            return this->p_12->convertFromNormalizedParameterValue(index, value);

        index -= this->p_12->getNumParameters();

        if (index < this->p_13->getNumParameters())
            return this->p_13->convertFromNormalizedParameterValue(index, value);

        index -= this->p_13->getNumParameters();

        if (index < this->p_14->getNumParameters())
            return this->p_14->convertFromNormalizedParameterValue(index, value);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->convertFromNormalizedParameterValue(index, value);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->convertFromNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        {
        return this->param_11_value_constrain(value);
        }
    case 1:
        {
        return this->param_12_value_constrain(value);
        }
    case 2:
        {
        return this->param_13_value_constrain(value);
        }
    case 3:
        {
        return this->param_14_value_constrain(value);
        }
    case 4:
        {
        return this->param_15_value_constrain(value);
        }
    case 5:
        {
        return this->param_16_value_constrain(value);
        }
    default:
        {
        index -= 6;

        if (index < this->p_08->getNumParameters())
            return this->p_08->constrainParameterValue(index, value);

        index -= this->p_08->getNumParameters();

        if (index < this->p_09->getNumParameters())
            return this->p_09->constrainParameterValue(index, value);

        index -= this->p_09->getNumParameters();

        if (index < this->p_10->getNumParameters())
            return this->p_10->constrainParameterValue(index, value);

        index -= this->p_10->getNumParameters();

        if (index < this->p_11->getNumParameters())
            return this->p_11->constrainParameterValue(index, value);

        index -= this->p_11->getNumParameters();

        if (index < this->p_12->getNumParameters())
            return this->p_12->constrainParameterValue(index, value);

        index -= this->p_12->getNumParameters();

        if (index < this->p_13->getNumParameters())
            return this->p_13->constrainParameterValue(index, value);

        index -= this->p_13->getNumParameters();

        if (index < this->p_14->getNumParameters())
            return this->p_14->constrainParameterValue(index, value);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->constrainParameterValue(index, value);

        index -= this->p_15->getNumParameters();

        if (index < this->p_16->getNumParameters())
            return this->p_16->constrainParameterValue(index, value);

        return value;
        }
    }
}

void scheduleParamInit(ParameterIndex index, Index order) {
    this->paramInitIndices->push(index);
    this->paramInitOrder->push(order);
}

void processParamInitEvents() {
    this->listquicksort(
        this->paramInitOrder,
        this->paramInitIndices,
        0,
        (int)(this->paramInitOrder->length - 1),
        true
    );

    for (Index i = 0; i < this->paramInitOrder->length; i++) {
        this->getEngine()->scheduleParameterBang(this->paramInitIndices[i], 0);
    }
}

void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}

void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}

void processOutletEvent(
    EngineLink* sender,
    OutletIndex index,
    ParameterValue value,
    MillisecondTime time
) {
    this->updateTime(time);
    this->processOutletAtCurrentTime(sender, index, value);
}

void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
    RNBO_UNUSED(objectId);
    this->updateTime(time);
    this->p_08->processNumMessage(tag, objectId, time, payload);
    this->p_09->processNumMessage(tag, objectId, time, payload);
    this->p_10->processNumMessage(tag, objectId, time, payload);
    this->p_11->processNumMessage(tag, objectId, time, payload);
    this->p_12->processNumMessage(tag, objectId, time, payload);
    this->p_13->processNumMessage(tag, objectId, time, payload);
    this->p_14->processNumMessage(tag, objectId, time, payload);
    this->p_15->processNumMessage(tag, objectId, time, payload);
    this->p_16->processNumMessage(tag, objectId, time, payload);
}

void processListMessage(
    MessageTag tag,
    MessageTag objectId,
    MillisecondTime time,
    const list& payload
) {
    RNBO_UNUSED(objectId);
    this->updateTime(time);
    this->p_08->processListMessage(tag, objectId, time, payload);
    this->p_09->processListMessage(tag, objectId, time, payload);
    this->p_10->processListMessage(tag, objectId, time, payload);
    this->p_11->processListMessage(tag, objectId, time, payload);
    this->p_12->processListMessage(tag, objectId, time, payload);
    this->p_13->processListMessage(tag, objectId, time, payload);
    this->p_14->processListMessage(tag, objectId, time, payload);
    this->p_15->processListMessage(tag, objectId, time, payload);
    this->p_16->processListMessage(tag, objectId, time, payload);
}

void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
    RNBO_UNUSED(objectId);
    this->updateTime(time);
    this->p_08->processBangMessage(tag, objectId, time);
    this->p_09->processBangMessage(tag, objectId, time);
    this->p_10->processBangMessage(tag, objectId, time);
    this->p_11->processBangMessage(tag, objectId, time);
    this->p_12->processBangMessage(tag, objectId, time);
    this->p_13->processBangMessage(tag, objectId, time);
    this->p_14->processBangMessage(tag, objectId, time);
    this->p_15->processBangMessage(tag, objectId, time);
    this->p_16->processBangMessage(tag, objectId, time);
}

MessageTagInfo resolveTag(MessageTag tag) const {
    switch (tag) {

    }

    auto subpatchResult_0 = this->p_08->resolveTag(tag);

    if (subpatchResult_0)
        return subpatchResult_0;

    auto subpatchResult_1 = this->p_09->resolveTag(tag);

    if (subpatchResult_1)
        return subpatchResult_1;

    auto subpatchResult_2 = this->p_10->resolveTag(tag);

    if (subpatchResult_2)
        return subpatchResult_2;

    auto subpatchResult_3 = this->p_11->resolveTag(tag);

    if (subpatchResult_3)
        return subpatchResult_3;

    auto subpatchResult_4 = this->p_12->resolveTag(tag);

    if (subpatchResult_4)
        return subpatchResult_4;

    auto subpatchResult_5 = this->p_13->resolveTag(tag);

    if (subpatchResult_5)
        return subpatchResult_5;

    auto subpatchResult_6 = this->p_14->resolveTag(tag);

    if (subpatchResult_6)
        return subpatchResult_6;

    auto subpatchResult_7 = this->p_15->resolveTag(tag);

    if (subpatchResult_7)
        return subpatchResult_7;

    auto subpatchResult_8 = this->p_16->resolveTag(tag);

    if (subpatchResult_8)
        return subpatchResult_8;

    return "";
}

MessageIndex getNumMessages() const {
    return 3;
}

const MessageInfo& getMessageInfo(MessageIndex index) const {
    switch (index) {
    case 0:
        {
        static const MessageInfo r0 = {
            "tap-tempo",
            Inport
        };

        return r0;
        }
    case 1:
        {
        static const MessageInfo r1 = {
            "tap-mult",
            Inport
        };

        return r1;
        }
    case 2:
        {
        static const MessageInfo r2 = {
            "atten",
            Outport
        };

        return r2;
        }
    }

    return NullMessageInfo;
}

protected:

void param_11_value_set(number v) {
    v = this->param_11_value_constrain(v);
    this->param_11_value = v;
    this->sendParameter(0, false);

    if (this->param_11_value != this->param_11_lastValue) {
        this->getEngine()->presetTouched();
        this->param_11_lastValue = this->param_11_value;
    }

    this->p_11_in3_number_set(v);
}

void param_12_value_set(number v) {
    v = this->param_12_value_constrain(v);
    this->param_12_value = v;
    this->sendParameter(1, false);

    if (this->param_12_value != this->param_12_lastValue) {
        this->getEngine()->presetTouched();
        this->param_12_lastValue = this->param_12_value;
    }

    this->p_09_in5_number_set(v);
}

void param_13_value_set(number v) {
    v = this->param_13_value_constrain(v);
    this->param_13_value = v;
    this->sendParameter(2, false);

    if (this->param_13_value != this->param_13_lastValue) {
        this->getEngine()->presetTouched();
        this->param_13_lastValue = this->param_13_value;
    }

    this->p_16_in2_number_set(v);
}

void param_14_value_set(number v) {
    v = this->param_14_value_constrain(v);
    this->param_14_value = v;
    this->sendParameter(3, false);

    if (this->param_14_value != this->param_14_lastValue) {
        this->getEngine()->presetTouched();
        this->param_14_lastValue = this->param_14_value;
    }

    this->p_14_in4_number_set(v);
}

void param_15_value_set(number v) {
    v = this->param_15_value_constrain(v);
    this->param_15_value = v;
    this->sendParameter(4, false);

    if (this->param_15_value != this->param_15_lastValue) {
        this->getEngine()->presetTouched();
        this->param_15_lastValue = this->param_15_value;
    }

    this->p_14_in7_number_set(v);
}

void param_16_value_set(number v) {
    v = this->param_16_value_constrain(v);
    this->param_16_value = v;
    this->sendParameter(5, false);

    if (this->param_16_value != this->param_16_lastValue) {
        this->getEngine()->presetTouched();
        this->param_16_lastValue = this->param_16_value;
    }

    this->p_14_in8_number_set(v);
}

number msToSamps(MillisecondTime ms, number sampleRate) {
    return ms * sampleRate * 0.001;
}

MillisecondTime sampsToMs(SampleIndex samps) {
    return samps * (this->invsr * 1000);
}

Index getMaxBlockSize() const {
    return this->maxvs;
}

number getSampleRate() const {
    return this->sr;
}

bool hasFixedVectorSize() const {
    return false;
}

Index getNumInputChannels() const {
    return 2;
}

Index getNumOutputChannels() const {
    return 2;
}

void allocateDataRefs() {
    this->p_08->allocateDataRefs();
    this->p_09->allocateDataRefs();
    this->p_10->allocateDataRefs();
    this->p_11->allocateDataRefs();
    this->p_12->allocateDataRefs();
    this->p_13->allocateDataRefs();
    this->p_14->allocateDataRefs();
    this->p_15->allocateDataRefs();
    this->p_16->allocateDataRefs();
}

void initializeObjects() {
    this->p_08->initializeObjects();
    this->p_09->initializeObjects();
    this->p_10->initializeObjects();
    this->p_11->initializeObjects();
    this->p_12->initializeObjects();
    this->p_13->initializeObjects();
    this->p_14->initializeObjects();
    this->p_15->initializeObjects();
    this->p_16->initializeObjects();
}

void sendOutlet(OutletIndex index, ParameterValue value) {
    this->getEngine()->sendOutlet(this, index, value);
}

void startup() {
    this->updateTime(this->getEngine()->getCurrentTime());
    this->p_08->startup();
    this->p_09->startup();
    this->p_10->startup();
    this->p_11->startup();
    this->p_12->startup();
    this->p_13->startup();
    this->p_14->startup();
    this->p_15->startup();
    this->p_16->startup();

    {
        this->scheduleParamInit(0, 0);
    }

    {
        this->scheduleParamInit(1, 0);
    }

    {
        this->scheduleParamInit(2, 0);
    }

    {
        this->scheduleParamInit(3, 0);
    }

    {
        this->scheduleParamInit(4, 0);
    }

    {
        this->scheduleParamInit(5, 0);
    }

    this->processParamInitEvents();
}

number param_11_value_constrain(number v) const {
    v = (v > 10 ? 10 : (v < 1 ? 1 : v));
    return v;
}

void p_11_in3_number_set(number v) {
    this->p_11->updateTime(this->_currentTime);
    this->p_11->eventinlet_02_out1_number_set(v);
}

number param_12_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < 0 ? 0 : v));
    return v;
}

void p_09_in5_number_set(number v) {
    this->p_09->updateTime(this->_currentTime);
    this->p_09->eventinlet_01_out1_number_set(v);
}

number param_13_value_constrain(number v) const {
    v = (v > 10 ? 10 : (v < -10 ? -10 : v));
    return v;
}

void p_14_in3_list_set(const list& v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->eventinlet_08_out1_list_set(v);
}

void p_16_out1_list_set(const list& v) {
    this->p_14_in3_list_set(v);
}

void p_16_in2_number_set(number v) {
    this->p_16->updateTime(this->_currentTime);
    this->p_16->eventinlet_12_out1_number_set(v);
}

number param_14_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < 0 ? 0 : v));
    return v;
}

void p_14_in4_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->eventinlet_09_out1_number_set(v);
}

number param_15_value_constrain(number v) const {
    v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));
    return v;
}

void p_14_in7_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->eventinlet_10_out1_number_set(v);
}

number param_16_value_constrain(number v) const {
    v = (v > 5 ? 5 : (v < 1 ? 1 : v));
    return v;
}

void p_14_in8_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->eventinlet_11_out1_number_set(v);
}

void p_13_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
    RNBO_UNUSED(port);
    RNBO_UNUSED(channel);
    RNBO_UNUSED(status);
    this->p_13->processMidiEvent(_currentTime, 0, data, length);
}

void p_14_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
    RNBO_UNUSED(port);
    RNBO_UNUSED(channel);
    RNBO_UNUSED(status);
    this->p_14->processMidiEvent(_currentTime, 0, data, length);
}

void p_15_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
    RNBO_UNUSED(port);
    RNBO_UNUSED(channel);
    RNBO_UNUSED(status);
    this->p_15->processMidiEvent(_currentTime, 0, data, length);
}

void p_15_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: Gate
    ConstSampleArray<2> ins = {in1, in2};

    SampleArray<2> outs = {out1, out2};
    this->p_15->process(ins, 2, outs, 2, n);
}

void p_08_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    const SampleValue * in3,
    const SampleValue * in4,
    SampleValue * out1,
    SampleValue * out2,
    SampleValue * out3,
    SampleValue * out4,
    Index n
) {
    // subpatcher: ingain
    ConstSampleArray<4> ins = {in1, in2, in3, in4};

    SampleArray<4> outs = {out1, out2, out3, out4};
    this->p_08->process(ins, 4, outs, 4, n);
}

void p_13_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: Pitch
    ConstSampleArray<2> ins = {in1, in2};

    SampleArray<2> outs = {out1, out2};
    this->p_13->process(ins, 2, outs, 2, n);
}

void p_16_perform(Index n) {
    // subpatcher: DelayTime
    this->p_16->process(nullptr, 0, nullptr, 0, n);
}

void feedbackreader_01_perform(SampleValue * output, Index n) {
    auto& buffer = this->feedbacktilde_01_feedbackbuffer;

    for (Index i = 0; i < n; i++) {
        output[(Index)i] = buffer[(Index)i];
    }
}

void feedbackreader_02_perform(SampleValue * output, Index n) {
    auto& buffer = this->feedbacktilde_02_feedbackbuffer;

    for (Index i = 0; i < n; i++) {
        output[(Index)i] = buffer[(Index)i];
    }
}

void p_14_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    const SampleValue * in5,
    const SampleValue * in6,
    SampleValue * out1,
    SampleValue * out2,
    SampleValue * out3,
    SampleValue * out4,
    Index n
) {
    // subpatcher: Bubble
    ConstSampleArray<4> ins = {in1, in2, in5, in6};

    SampleArray<4> outs = {out1, out2, out3, out4};
    this->p_14->process(ins, 4, outs, 4, n);
}

void p_12_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: LowPass
    ConstSampleArray<2> ins = {in1, in2};

    SampleArray<2> outs = {out1, out2};
    this->p_12->process(ins, 2, outs, 2, n);
}

void p_11_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: Saturation
    ConstSampleArray<2> ins = {in1, in2};

    SampleArray<2> outs = {out1, out2};
    this->p_11->process(ins, 2, outs, 2, n);
}

void p_09_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    const SampleValue * in3,
    const SampleValue * in4,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: Mix~
    ConstSampleArray<4> ins = {in1, in2, in3, in4};

    SampleArray<2> outs = {out1, out2};
    this->p_09->process(ins, 4, outs, 2, n);
}

void p_10_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: outgain
    ConstSampleArray<2> ins = {in1, in2};

    SampleArray<2> outs = {out1, out2};
    this->p_10->process(ins, 2, outs, 2, n);
}

void limi_01_perform(const SampleValue * input1, SampleValue * output1, Index n) {
    RNBO_UNUSED(output1);
    RNBO_UNUSED(input1);
    auto __limi_01_lookaheadInv = this->limi_01_lookaheadInv;
    auto __limi_01_threshold = this->limi_01_threshold;
    auto __limi_01_lookahead = this->limi_01_lookahead;
    auto __limi_01_recover = this->limi_01_recover;
    auto __limi_01_last = this->limi_01_last;
    auto __limi_01_postamp = this->limi_01_postamp;
    auto __limi_01_lookaheadIndex = this->limi_01_lookaheadIndex;
    auto __limi_01_preamp = this->limi_01_preamp;
    auto __limi_01_dcblock = this->limi_01_dcblock;
    auto __limi_01_bypass = this->limi_01_bypass;
    ConstSampleArray<1> input = {input1};
    SampleArray<1> output = {output1};

    if ((bool)(__limi_01_bypass)) {
        for (Index i = 0; i < n; i++) {
            for (Index j = 0; j < 1; j++) {
                output[(Index)j][(Index)i] = input[(Index)j][(Index)i];
            }
        }
    } else {
        number v;

        for (Index i = 0; i < n; i++) {
            number hotSample = 0;

            for (Index j = 0; j < 1; j++) {
                auto smps = input[(Index)j];
                v = ((bool)(__limi_01_dcblock) ? this->limi_01_dc_next(j, smps[(Index)i], 0.9997) : smps[(Index)i]);
                v *= __limi_01_preamp;
                this->limi_01_lookaheadBuffers[(Index)j][__limi_01_lookaheadIndex] = v * __limi_01_postamp;
                v = rnbo_fabs(v);

                if (v > hotSample)
                    hotSample = v;
            }

            {
                if (__limi_01_last > 0.01)
                    v = __limi_01_last + __limi_01_recover * __limi_01_last;
                else
                    v = __limi_01_last + __limi_01_recover;
            }

            if (v > 1)
                v = 1;

            this->limi_01_gainBuffer[__limi_01_lookaheadIndex] = v;
            int lookaheadPlayback = (int)(__limi_01_lookaheadIndex - (int)(__limi_01_lookahead));

            if (lookaheadPlayback < 0)
                lookaheadPlayback += (int)(__limi_01_lookahead);

            if (hotSample * v > __limi_01_threshold) {
                number newgain;
                number curgain = __limi_01_threshold / hotSample;
                number inc = __limi_01_threshold - curgain;
                number acc = 0.0;
                number flag = 0;

                for (Index j = 0; flag == 0 && j < (Index)(__limi_01_lookahead); j++) {
                    int k = (int)(__limi_01_lookaheadIndex - (int)(j));

                    if (k < 0)
                        k += (int)(__limi_01_lookahead);

                    {
                        newgain = curgain + inc * (acc * acc);
                    }

                    if (newgain < this->limi_01_gainBuffer[(Index)k])
                        this->limi_01_gainBuffer[(Index)k] = newgain;
                    else
                        flag = 1;

                    acc = acc + __limi_01_lookaheadInv;
                }
            }

            for (Index j = 0; j < 1; j++) {
                output[(Index)j][(Index)i] = this->limi_01_lookaheadBuffers[(Index)j][(Index)lookaheadPlayback] * this->limi_01_gainBuffer[(Index)lookaheadPlayback];
            }

            __limi_01_last = this->limi_01_gainBuffer[__limi_01_lookaheadIndex];
            __limi_01_lookaheadIndex++;

            if (__limi_01_lookaheadIndex >= __limi_01_lookahead)
                __limi_01_lookaheadIndex = 0;
        }
    }

    this->limi_01_lookaheadIndex = __limi_01_lookaheadIndex;
    this->limi_01_last = __limi_01_last;
}

void limi_02_perform(const SampleValue * input1, SampleValue * output1, Index n) {
    RNBO_UNUSED(output1);
    RNBO_UNUSED(input1);
    auto __limi_02_lookaheadInv = this->limi_02_lookaheadInv;
    auto __limi_02_threshold = this->limi_02_threshold;
    auto __limi_02_lookahead = this->limi_02_lookahead;
    auto __limi_02_recover = this->limi_02_recover;
    auto __limi_02_last = this->limi_02_last;
    auto __limi_02_postamp = this->limi_02_postamp;
    auto __limi_02_lookaheadIndex = this->limi_02_lookaheadIndex;
    auto __limi_02_preamp = this->limi_02_preamp;
    auto __limi_02_dcblock = this->limi_02_dcblock;
    auto __limi_02_bypass = this->limi_02_bypass;
    ConstSampleArray<1> input = {input1};
    SampleArray<1> output = {output1};

    if ((bool)(__limi_02_bypass)) {
        for (Index i = 0; i < n; i++) {
            for (Index j = 0; j < 1; j++) {
                output[(Index)j][(Index)i] = input[(Index)j][(Index)i];
            }
        }
    } else {
        number v;

        for (Index i = 0; i < n; i++) {
            number hotSample = 0;

            for (Index j = 0; j < 1; j++) {
                auto smps = input[(Index)j];
                v = ((bool)(__limi_02_dcblock) ? this->limi_02_dc_next(j, smps[(Index)i], 0.9997) : smps[(Index)i]);
                v *= __limi_02_preamp;
                this->limi_02_lookaheadBuffers[(Index)j][__limi_02_lookaheadIndex] = v * __limi_02_postamp;
                v = rnbo_fabs(v);

                if (v > hotSample)
                    hotSample = v;
            }

            {
                if (__limi_02_last > 0.01)
                    v = __limi_02_last + __limi_02_recover * __limi_02_last;
                else
                    v = __limi_02_last + __limi_02_recover;
            }

            if (v > 1)
                v = 1;

            this->limi_02_gainBuffer[__limi_02_lookaheadIndex] = v;
            int lookaheadPlayback = (int)(__limi_02_lookaheadIndex - (int)(__limi_02_lookahead));

            if (lookaheadPlayback < 0)
                lookaheadPlayback += (int)(__limi_02_lookahead);

            if (hotSample * v > __limi_02_threshold) {
                number newgain;
                number curgain = __limi_02_threshold / hotSample;
                number inc = __limi_02_threshold - curgain;
                number acc = 0.0;
                number flag = 0;

                for (Index j = 0; flag == 0 && j < (Index)(__limi_02_lookahead); j++) {
                    int k = (int)(__limi_02_lookaheadIndex - (int)(j));

                    if (k < 0)
                        k += (int)(__limi_02_lookahead);

                    {
                        newgain = curgain + inc * (acc * acc);
                    }

                    if (newgain < this->limi_02_gainBuffer[(Index)k])
                        this->limi_02_gainBuffer[(Index)k] = newgain;
                    else
                        flag = 1;

                    acc = acc + __limi_02_lookaheadInv;
                }
            }

            for (Index j = 0; j < 1; j++) {
                output[(Index)j][(Index)i] = this->limi_02_lookaheadBuffers[(Index)j][(Index)lookaheadPlayback] * this->limi_02_gainBuffer[(Index)lookaheadPlayback];
            }

            __limi_02_last = this->limi_02_gainBuffer[__limi_02_lookaheadIndex];
            __limi_02_lookaheadIndex++;

            if (__limi_02_lookaheadIndex >= __limi_02_lookahead)
                __limi_02_lookaheadIndex = 0;
        }
    }

    this->limi_02_lookaheadIndex = __limi_02_lookaheadIndex;
    this->limi_02_last = __limi_02_last;
}

void feedbackwriter_01_perform(const SampleValue * input, Index n) {
    auto& buffer = this->feedbacktilde_01_feedbackbuffer;

    for (Index i = 0; i < n; i++) {
        buffer[(Index)i] = input[(Index)i];
    }
}

void feedbackwriter_02_perform(const SampleValue * input, Index n) {
    auto& buffer = this->feedbacktilde_02_feedbackbuffer;

    for (Index i = 0; i < n; i++) {
        buffer[(Index)i] = input[(Index)i];
    }
}

void stackprotect_perform(Index n) {
    RNBO_UNUSED(n);
    auto __stackprotect_count = this->stackprotect_count;
    __stackprotect_count = 0;
    this->stackprotect_count = __stackprotect_count;
}

void limi_01_lookahead_setter(number v) {
    this->limi_01_lookahead = (v > 512 ? 512 : (v < 0 ? 0 : v));
    this->limi_01_lookaheadInv = (number)1 / this->limi_01_lookahead;
}

void limi_01_preamp_setter(number v) {
    this->limi_01_preamp = rnbo_pow(10., v * 0.05);
}

void limi_01_postamp_setter(number v) {
    this->limi_01_postamp = rnbo_pow(10., v * 0.05);
}

void limi_01_threshold_setter(number v) {
    this->limi_01_threshold = rnbo_pow(10., v * 0.05);
}

void limi_02_lookahead_setter(number v) {
    this->limi_02_lookahead = (v > 512 ? 512 : (v < 0 ? 0 : v));
    this->limi_02_lookaheadInv = (number)1 / this->limi_02_lookahead;
}

void limi_02_preamp_setter(number v) {
    this->limi_02_preamp = rnbo_pow(10., v * 0.05);
}

void limi_02_postamp_setter(number v) {
    this->limi_02_postamp = rnbo_pow(10., v * 0.05);
}

void limi_02_threshold_setter(number v) {
    this->limi_02_threshold = rnbo_pow(10., v * 0.05);
}

number limi_01_dc1_next(number x, number gain) {
    number y = x - this->limi_01_dc1_xm1 + this->limi_01_dc1_ym1 * gain;
    this->limi_01_dc1_xm1 = x;
    this->limi_01_dc1_ym1 = y;
    return y;
}

void limi_01_dc1_reset() {
    this->limi_01_dc1_xm1 = 0;
    this->limi_01_dc1_ym1 = 0;
}

void limi_01_dc1_dspsetup() {
    this->limi_01_dc1_reset();
}

number limi_01_dc_next(Index i, number x, number gain) {
    switch ((int)i) {
    default:
        {
        return this->limi_01_dc1_next(x, gain);
        }
    }

    return 0;
}

void limi_01_dc_reset(Index i) {
    switch ((int)i) {
    default:
        {
        return this->limi_01_dc1_reset();
        }
    }
}

void limi_01_dc_dspsetup(Index i) {
    switch ((int)i) {
    default:
        {
        return this->limi_01_dc1_dspsetup();
        }
    }
}

void limi_01_reset() {
    this->limi_01_recover = (number)1000 / (this->limi_01_release * this->samplerate());

    {
        this->limi_01_recover *= 0.707;
    }
}

void limi_01_dspsetup(bool force) {
    if ((bool)(this->limi_01_setupDone) && (bool)(!(bool)(force)))
        return;

    this->limi_01_reset();
    this->limi_01_setupDone = true;
    this->limi_01_dc1_dspsetup();
}

number limi_02_dc1_next(number x, number gain) {
    number y = x - this->limi_02_dc1_xm1 + this->limi_02_dc1_ym1 * gain;
    this->limi_02_dc1_xm1 = x;
    this->limi_02_dc1_ym1 = y;
    return y;
}

void limi_02_dc1_reset() {
    this->limi_02_dc1_xm1 = 0;
    this->limi_02_dc1_ym1 = 0;
}

void limi_02_dc1_dspsetup() {
    this->limi_02_dc1_reset();
}

number limi_02_dc_next(Index i, number x, number gain) {
    switch ((int)i) {
    default:
        {
        return this->limi_02_dc1_next(x, gain);
        }
    }

    return 0;
}

void limi_02_dc_reset(Index i) {
    switch ((int)i) {
    default:
        {
        return this->limi_02_dc1_reset();
        }
    }
}

void limi_02_dc_dspsetup(Index i) {
    switch ((int)i) {
    default:
        {
        return this->limi_02_dc1_dspsetup();
        }
    }
}

void limi_02_reset() {
    this->limi_02_recover = (number)1000 / (this->limi_02_release * this->samplerate());

    {
        this->limi_02_recover *= 0.707;
    }
}

void limi_02_dspsetup(bool force) {
    if ((bool)(this->limi_02_setupDone) && (bool)(!(bool)(force)))
        return;

    this->limi_02_reset();
    this->limi_02_setupDone = true;
    this->limi_02_dc1_dspsetup();
}

void param_11_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_11_value;
}

void param_11_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_11_value_set(preset["value"]);
}

void param_12_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_12_value;
}

void param_12_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_12_value_set(preset["value"]);
}

void param_13_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_13_value;
}

void param_13_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_13_value_set(preset["value"]);
}

void param_14_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_14_value;
}

void param_14_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_14_value_set(preset["value"]);
}

void param_15_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_15_value;
}

void param_15_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_15_value_set(preset["value"]);
}

void param_16_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_16_value;
}

void param_16_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_16_value_set(preset["value"]);
}

Index globaltransport_getSampleOffset(MillisecondTime time) {
    return this->mstosamps(this->maximum(0, time - this->getEngine()->getCurrentTime()));
}

number globaltransport_getTempoAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_tempo[(Index)sampleOffset] : this->globaltransport_lastTempo);
}

number globaltransport_getStateAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_state[(Index)sampleOffset] : this->globaltransport_lastState);
}

number globaltransport_getState(MillisecondTime time) {
    return this->globaltransport_getStateAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getTempo(MillisecondTime time) {
    return this->globaltransport_getTempoAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getBeatTime(MillisecondTime time) {
    number i = 2;

    while (i < this->globaltransport_beatTimeChanges->length && this->globaltransport_beatTimeChanges[(Index)(i + 1)] <= time) {
        i += 2;
    }

    i -= 2;
    number beatTimeBase = this->globaltransport_beatTimeChanges[(Index)i];

    if (this->globaltransport_getState(time) == 0)
        return beatTimeBase;

    number beatTimeBaseMsTime = this->globaltransport_beatTimeChanges[(Index)(i + 1)];
    number diff = time - beatTimeBaseMsTime;
    number diffInBeats = diff * this->globaltransport_getTempo(time) * 0.008 / (number)480;
    return beatTimeBase + diffInBeats;
}

bool globaltransport_setTempo(MillisecondTime time, number tempo, bool notify) {
    if ((bool)(notify)) {
        this->processTempoEvent(time, tempo);
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getTempoAtSample((SampleIndex)(offset)) != tempo) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_tempo, this->vs, tempo, offset);
            this->globaltransport_lastTempo = tempo;
            this->globaltransport_tempoNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setState(MillisecondTime time, number state, bool notify) {
    if ((bool)(notify)) {
        this->processTransportEvent(time, TransportState(state));
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getStateAtSample(offset) != state) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_state, this->vs, state, offset);
            this->globaltransport_lastState = TransportState(state);
            this->globaltransport_stateNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setBeatTime(MillisecondTime time, number beattime, bool notify) {
    if ((bool)(notify)) {
        this->processBeatTimeEvent(time, beattime);
        this->globaltransport_notify = true;
        return false;
    } else {
        bool beatTimeHasChanged = false;
        float oldBeatTime = (float)(this->globaltransport_getBeatTime(time));
        float newBeatTime = (float)(beattime);

        if (oldBeatTime != newBeatTime) {
            beatTimeHasChanged = true;
        }

        this->globaltransport_beatTimeChanges->push(beattime);
        this->globaltransport_beatTimeChanges->push(time);
        return beatTimeHasChanged;
    }
}

number globaltransport_getBeatTimeAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBeatTime(this->getEngine()->getCurrentTime() + msOffset);
}

array<number, 2> globaltransport_getTimeSignature(MillisecondTime time) {
    number i = 3;

    while (i < this->globaltransport_timeSignatureChanges->length && this->globaltransport_timeSignatureChanges[(Index)(i + 2)] <= time) {
        i += 3;
    }

    i -= 3;

    return {
        this->globaltransport_timeSignatureChanges[(Index)i],
        this->globaltransport_timeSignatureChanges[(Index)(i + 1)]
    };
}

array<number, 2> globaltransport_getTimeSignatureAtSample(SampleIndex sampleOffset) {
    MillisecondTime msOffset = (MillisecondTime)(this->sampstoms(sampleOffset));
    return this->globaltransport_getTimeSignature(this->getEngine()->getCurrentTime() + msOffset);
}

void globaltransport_setBBUBase(
    MillisecondTime time,
    number numerator,
    number denominator,
    number bars,
    number beats,
    number units
) {
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    bars--;
    beats--;
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;

    while (units > beatLengthInUnits) {
        units -= beatLengthInUnits;
        beats++;
    }

    number targetBeatTime = bars * numerator + beats + units / beatLengthInUnits;
    this->globaltransport_bbuBase = targetBeatTime - beatsIncCurrenttDenom;
}

array<number, 3> globaltransport_getBBU(MillisecondTime time) {
    array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);
    number numerator = currentSig[0];
    number denominator = currentSig[1];
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;
    number targetBeatTime = beatsIncCurrenttDenom + this->globaltransport_bbuBase;
    number currentBars = 0;
    number currentBeats = 0;
    number currentUnits = 0;

    if (targetBeatTime >= 0) {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;
        currentBeats = trunc(targetBeatTime);
        targetBeatTime -= currentBeats;
        currentUnits = targetBeatTime * beatLengthInUnits;
    } else {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;

        if (targetBeatTime != 0) {
            currentBars -= 1;
            currentBeats = trunc(targetBeatTime);
            targetBeatTime -= currentBeats;
            currentBeats = numerator + currentBeats;
            currentUnits = targetBeatTime * beatLengthInUnits;

            if (currentUnits != 0) {
                currentUnits = beatLengthInUnits + currentUnits;
                currentBeats -= 1;
            }
        }
    }

    return {currentBars + 1, currentBeats + 1, currentUnits};
}

bool globaltransport_setTimeSignature(MillisecondTime time, number numerator, number denominator, bool notify) {
    if ((bool)(notify)) {
        this->processTimeSignatureEvent(time, (int)(numerator), (int)(denominator));
        this->globaltransport_notify = true;
    } else {
        array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);

        if (currentSig[0] != numerator || currentSig[1] != denominator) {
            array<number, 3> bbu = this->globaltransport_getBBU(time);
            this->globaltransport_setBBUBase(time, numerator, denominator, bbu[0], bbu[1], bbu[2]);
            this->globaltransport_timeSignatureChanges->push(numerator);
            this->globaltransport_timeSignatureChanges->push(denominator);
            this->globaltransport_timeSignatureChanges->push(time);
            return true;
        }
    }

    return false;
}

array<number, 3> globaltransport_getBBUAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBBU(this->getEngine()->getCurrentTime() + msOffset);
}

bool globaltransport_setBBU(MillisecondTime time, number bars, number beats, number units, bool notify) {
    RNBO_UNUSED(notify);
    array<number, 2> sig = this->globaltransport_getTimeSignature(time);
    number numerator = sig[0];
    number denominator = sig[1];
    this->globaltransport_setBBUBase(time, numerator, denominator, bars, beats, units);
    return true;
}

void globaltransport_advance() {
    if ((bool)(this->globaltransport_tempoNeedsReset)) {
        fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
        this->globaltransport_tempoNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTempoEvent(this->globaltransport_lastTempo);
        }
    }

    if ((bool)(this->globaltransport_stateNeedsReset)) {
        fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
        this->globaltransport_stateNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTransportEvent(TransportState(this->globaltransport_lastState));
        }
    }

    if (this->globaltransport_beatTimeChanges->length > 2) {
        this->globaltransport_beatTimeChanges[0] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 2)];
        this->globaltransport_beatTimeChanges[1] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 1)];
        this->globaltransport_beatTimeChanges->length = 2;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendBeatTimeEvent(this->globaltransport_beatTimeChanges[0]);
        }
    }

    if (this->globaltransport_timeSignatureChanges->length > 3) {
        this->globaltransport_timeSignatureChanges[0] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 3)];
        this->globaltransport_timeSignatureChanges[1] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 2)];
        this->globaltransport_timeSignatureChanges[2] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 1)];
        this->globaltransport_timeSignatureChanges->length = 3;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTimeSignatureEvent(
                (int)(this->globaltransport_timeSignatureChanges[0]),
                (int)(this->globaltransport_timeSignatureChanges[1])
            );
        }
    }

    this->globaltransport_notify = false;
}

void globaltransport_dspsetup(bool force) {
    if ((bool)(this->globaltransport_setupDone) && (bool)(!(bool)(force)))
        return;

    fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
    this->globaltransport_tempoNeedsReset = false;
    fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
    this->globaltransport_stateNeedsReset = false;
    this->globaltransport_setupDone = true;
}

bool stackprotect_check() {
    this->stackprotect_count++;

    if (this->stackprotect_count > 128) {
        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
        return true;
    }

    return false;
}

void updateTime(MillisecondTime time) {
    this->_currentTime = time;
    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));

    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;

    if (this->sampleOffsetIntoNextAudioBuffer < 0)
        this->sampleOffsetIntoNextAudioBuffer = 0;
}

void assign_defaults()
{
    p_08_target = 0;
    limi_01_bypass = 0;
    limi_01_dcblock = 0;
    limi_01_lookahead = 100;
    limi_01_lookahead_setter(limi_01_lookahead);
    limi_01_preamp = 0;
    limi_01_preamp_setter(limi_01_preamp);
    limi_01_postamp = 0;
    limi_01_postamp_setter(limi_01_postamp);
    limi_01_threshold = 0;
    limi_01_threshold_setter(limi_01_threshold);
    limi_01_release = 1000;
    p_09_target = 0;
    p_10_target = 0;
    p_11_target = 0;
    p_12_target = 0;
    p_13_target = 0;
    p_14_target = 0;
    p_15_target = 0;
    limi_02_bypass = 0;
    limi_02_dcblock = 0;
    limi_02_lookahead = 100;
    limi_02_lookahead_setter(limi_02_lookahead);
    limi_02_preamp = 0;
    limi_02_preamp_setter(limi_02_preamp);
    limi_02_postamp = 0;
    limi_02_postamp_setter(limi_02_postamp);
    limi_02_threshold = 0;
    limi_02_threshold_setter(limi_02_threshold);
    limi_02_release = 1000;
    param_11_value = 1;
    param_12_value = 0;
    param_13_value = 0;
    p_16_target = 0;
    param_14_value = 75;
    param_15_value = 500;
    param_16_value = 1;
    _currentTime = 0;
    audioProcessSampleCount = 0;
    sampleOffsetIntoNextAudioBuffer = 0;
    zeroBuffer = nullptr;
    dummyBuffer = nullptr;
    signals[0] = nullptr;
    signals[1] = nullptr;
    signals[2] = nullptr;
    signals[3] = nullptr;
    signals[4] = nullptr;
    signals[5] = nullptr;
    signals[6] = nullptr;
    signals[7] = nullptr;
    signals[8] = nullptr;
    signals[9] = nullptr;
    didAllocateSignals = 0;
    vs = 0;
    maxvs = 0;
    sr = 44100;
    invsr = 0.00002267573696;
    limi_01_last = 0;
    limi_01_lookaheadIndex = 0;
    limi_01_recover = 0;
    limi_01_lookaheadInv = 0;
    limi_01_dc1_xm1 = 0;
    limi_01_dc1_ym1 = 0;
    limi_01_setupDone = false;
    limi_02_last = 0;
    limi_02_lookaheadIndex = 0;
    limi_02_recover = 0;
    limi_02_lookaheadInv = 0;
    limi_02_dc1_xm1 = 0;
    limi_02_dc1_ym1 = 0;
    limi_02_setupDone = false;
    param_11_lastValue = 0;
    param_12_lastValue = 0;
    param_13_lastValue = 0;
    param_14_lastValue = 0;
    feedbacktilde_01_feedbackbuffer = nullptr;
    param_15_lastValue = 0;
    param_16_lastValue = 0;
    feedbacktilde_02_feedbackbuffer = nullptr;
    globaltransport_tempo = nullptr;
    globaltransport_tempoNeedsReset = false;
    globaltransport_lastTempo = 120;
    globaltransport_state = nullptr;
    globaltransport_stateNeedsReset = false;
    globaltransport_lastState = 0;
    globaltransport_beatTimeChanges = { 0, 0 };
    globaltransport_timeSignatureChanges = { 4, 4, 0 };
    globaltransport_notify = false;
    globaltransport_bbuBase = 0;
    globaltransport_setupDone = false;
    stackprotect_count = 0;
    _voiceIndex = 0;
    _noteNumber = 0;
    isMuted = 1;
}

// member variables

    number p_08_target;
    number limi_01_bypass;
    number limi_01_dcblock;
    number limi_01_lookahead;
    number limi_01_preamp;
    number limi_01_postamp;
    number limi_01_threshold;
    number limi_01_release;
    number p_09_target;
    number p_10_target;
    number p_11_target;
    number p_12_target;
    number p_13_target;
    number p_14_target;
    number p_15_target;
    number limi_02_bypass;
    number limi_02_dcblock;
    number limi_02_lookahead;
    number limi_02_preamp;
    number limi_02_postamp;
    number limi_02_threshold;
    number limi_02_release;
    number param_11_value;
    number param_12_value;
    number param_13_value;
    number p_16_target;
    number param_14_value;
    number param_15_value;
    number param_16_value;
    MillisecondTime _currentTime;
    UInt64 audioProcessSampleCount;
    SampleIndex sampleOffsetIntoNextAudioBuffer;
    signal zeroBuffer;
    signal dummyBuffer;
    SampleValue * signals[10];
    bool didAllocateSignals;
    Index vs;
    Index maxvs;
    number sr;
    number invsr;
    SampleValue limi_01_lookaheadBuffers[1][512] = { };
    SampleValue limi_01_gainBuffer[512] = { };
    number limi_01_last;
    int limi_01_lookaheadIndex;
    number limi_01_recover;
    number limi_01_lookaheadInv;
    number limi_01_dc1_xm1;
    number limi_01_dc1_ym1;
    bool limi_01_setupDone;
    SampleValue limi_02_lookaheadBuffers[1][512] = { };
    SampleValue limi_02_gainBuffer[512] = { };
    number limi_02_last;
    int limi_02_lookaheadIndex;
    number limi_02_recover;
    number limi_02_lookaheadInv;
    number limi_02_dc1_xm1;
    number limi_02_dc1_ym1;
    bool limi_02_setupDone;
    number param_11_lastValue;
    number param_12_lastValue;
    number param_13_lastValue;
    number param_14_lastValue;
    signal feedbacktilde_01_feedbackbuffer;
    number param_15_lastValue;
    number param_16_lastValue;
    signal feedbacktilde_02_feedbackbuffer;
    signal globaltransport_tempo;
    bool globaltransport_tempoNeedsReset;
    number globaltransport_lastTempo;
    signal globaltransport_state;
    bool globaltransport_stateNeedsReset;
    number globaltransport_lastState;
    list globaltransport_beatTimeChanges;
    list globaltransport_timeSignatureChanges;
    bool globaltransport_notify;
    number globaltransport_bbuBase;
    bool globaltransport_setupDone;
    number stackprotect_count;
    Index _voiceIndex;
    Int _noteNumber;
    Index isMuted;
    indexlist paramInitIndices;
    indexlist paramInitOrder;
    RNBOSubpatcher_56* p_08;
    RNBOSubpatcher_57* p_09;
    RNBOSubpatcher_58* p_10;
    RNBOSubpatcher_59* p_11;
    RNBOSubpatcher_60* p_12;
    RNBOSubpatcher_61* p_13;
    RNBOSubpatcher_62* p_14;
    RNBOSubpatcher_63* p_15;
    RNBOSubpatcher_64* p_16;

};

PatcherInterface* createRnboBubble()
{
    return new RnboBubble();
}

#ifndef RNBO_NO_PATCHERFACTORY

extern "C" PatcherFactoryFunctionPtr GetPatcherFactoryFunction(PlatformInterface* platformInterface)
#else

extern "C" PatcherFactoryFunctionPtr RnboBubbleFactoryFunction(PlatformInterface* platformInterface)
#endif

{
    Platform::set(platformInterface);
    return createRnboBubble;
}

} // end RNBO namespace

